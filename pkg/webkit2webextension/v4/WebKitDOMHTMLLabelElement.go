// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMHTMLLabelElement = coreglib.Type(C.webkit_dom_html_label_element_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMHTMLLabelElement, F: marshalDOMHTMLLabelElement},
	})
}

// DOMHTMLLabelElementOverrides contains methods that are overridable.
type DOMHTMLLabelElementOverrides struct {
}

func defaultDOMHTMLLabelElementOverrides(v *DOMHTMLLabelElement) DOMHTMLLabelElementOverrides {
	return DOMHTMLLabelElementOverrides{}
}

type DOMHTMLLabelElement struct {
	_ [0]func() // equal guard
	DOMHTMLElement
}

var (
	_ coreglib.Objector = (*DOMHTMLLabelElement)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMHTMLLabelElement, *DOMHTMLLabelElementClass, DOMHTMLLabelElementOverrides](
		GTypeDOMHTMLLabelElement,
		initDOMHTMLLabelElementClass,
		wrapDOMHTMLLabelElement,
		defaultDOMHTMLLabelElementOverrides,
	)
}

func initDOMHTMLLabelElementClass(gclass unsafe.Pointer, overrides DOMHTMLLabelElementOverrides, classInitFunc func(*DOMHTMLLabelElementClass)) {
	if classInitFunc != nil {
		class := (*DOMHTMLLabelElementClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMHTMLLabelElement(obj *coreglib.Object) *DOMHTMLLabelElement {
	return &DOMHTMLLabelElement{
		DOMHTMLElement: DOMHTMLElement{
			DOMElement: DOMElement{
				DOMNode: DOMNode{
					DOMObject: DOMObject{
						Object: obj,
					},
					Object: obj,
					DOMEventTarget: DOMEventTarget{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalDOMHTMLLabelElement(p uintptr) (interface{}, error) {
	return wrapDOMHTMLLabelElement(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Form: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlFormElement: KitDOMHTMLFormElement.
//
func (self *DOMHTMLLabelElement) Form() *DOMHTMLFormElement {
	var _arg0 *C.WebKitDOMHTMLLabelElement // out
	var _cret *C.WebKitDOMHTMLFormElement  // in

	_arg0 = (*C.WebKitDOMHTMLLabelElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_label_element_get_form(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlFormElement *DOMHTMLFormElement // out

	_domhtmlFormElement = wrapDOMHTMLFormElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domhtmlFormElement
}

// HtmlFor: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLLabelElement) HtmlFor() string {
	var _arg0 *C.WebKitDOMHTMLLabelElement // out
	var _cret *C.gchar                     // in

	_arg0 = (*C.WebKitDOMHTMLLabelElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_label_element_get_html_for(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SetHtmlFor: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLLabelElement) SetHtmlFor(value string) {
	var _arg0 *C.WebKitDOMHTMLLabelElement // out
	var _arg1 *C.gchar                     // out

	_arg0 = (*C.WebKitDOMHTMLLabelElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_label_element_set_html_for(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// DOMHTMLLabelElementClass: instance of this type is always passed by
// reference.
type DOMHTMLLabelElementClass struct {
	*domhtmlLabelElementClass
}

// domhtmlLabelElementClass is the struct that's finalized.
type domhtmlLabelElementClass struct {
	native *C.WebKitDOMHTMLLabelElementClass
}

func (d *DOMHTMLLabelElementClass) ParentClass() *DOMHTMLElementClass {
	valptr := &d.native.parent_class
	var _v *DOMHTMLElementClass // out
	_v = (*DOMHTMLElementClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
