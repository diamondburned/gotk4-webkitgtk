// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMHTMLCollection = coreglib.Type(C.webkit_dom_html_collection_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMHTMLCollection, F: marshalDOMHTMLCollection},
	})
}

// DOMHTMLCollectionOverrides contains methods that are overridable.
type DOMHTMLCollectionOverrides struct {
}

func defaultDOMHTMLCollectionOverrides(v *DOMHTMLCollection) DOMHTMLCollectionOverrides {
	return DOMHTMLCollectionOverrides{}
}

type DOMHTMLCollection struct {
	_ [0]func() // equal guard
	DOMObject
}

var (
	_ coreglib.Objector = (*DOMHTMLCollection)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMHTMLCollection, *DOMHTMLCollectionClass, DOMHTMLCollectionOverrides](
		GTypeDOMHTMLCollection,
		initDOMHTMLCollectionClass,
		wrapDOMHTMLCollection,
		defaultDOMHTMLCollectionOverrides,
	)
}

func initDOMHTMLCollectionClass(gclass unsafe.Pointer, overrides DOMHTMLCollectionOverrides, classInitFunc func(*DOMHTMLCollectionClass)) {
	if classInitFunc != nil {
		class := (*DOMHTMLCollectionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMHTMLCollection(obj *coreglib.Object) *DOMHTMLCollection {
	return &DOMHTMLCollection{
		DOMObject: DOMObject{
			Object: obj,
		},
	}
}

func marshalDOMHTMLCollection(p uintptr) (interface{}, error) {
	return wrapDOMHTMLCollection(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Length: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gulong: #gulong.
//
func (self *DOMHTMLCollection) Length() uint32 {
	var _arg0 *C.WebKitDOMHTMLCollection // out
	var _cret C.gulong                   // in

	_arg0 = (*C.WebKitDOMHTMLCollection)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_collection_get_length(_arg0)
	runtime.KeepAlive(self)

	var _gulong uint32 // out

	_gulong = uint32(_cret)

	return _gulong
}

// Item: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - index: #gulong.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMHTMLCollection) Item(index uint32) *DOMNode {
	var _arg0 *C.WebKitDOMHTMLCollection // out
	var _arg1 C.gulong                   // out
	var _cret *C.WebKitDOMNode           // in

	_arg0 = (*C.WebKitDOMHTMLCollection)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gulong(index)

	_cret = C.webkit_dom_html_collection_item(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(index)

	var _domNode *DOMNode // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))

	return _domNode
}

// NamedItem: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - name: #gchar.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMHTMLCollection) NamedItem(name string) *DOMNode {
	var _arg0 *C.WebKitDOMHTMLCollection // out
	var _arg1 *C.gchar                   // out
	var _cret *C.WebKitDOMNode           // in

	_arg0 = (*C.WebKitDOMHTMLCollection)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_html_collection_named_item(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(name)

	var _domNode *DOMNode // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))

	return _domNode
}

// DOMHTMLCollectionClass: instance of this type is always passed by reference.
type DOMHTMLCollectionClass struct {
	*domhtmlCollectionClass
}

// domhtmlCollectionClass is the struct that's finalized.
type domhtmlCollectionClass struct {
	native *C.WebKitDOMHTMLCollectionClass
}

func (d *DOMHTMLCollectionClass) ParentClass() *DOMObjectClass {
	valptr := &d.native.parent_class
	var _v *DOMObjectClass // out
	_v = (*DOMObjectClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
