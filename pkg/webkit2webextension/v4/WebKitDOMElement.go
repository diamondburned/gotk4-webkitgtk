// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMElement = coreglib.Type(C.webkit_dom_element_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMElement, F: marshalDOMElement},
	})
}

// DOM_ELEMENT_ALLOW_KEYBOARD_INPUT: deprecated: Use JavaScriptCore API instead.
const DOM_ELEMENT_ALLOW_KEYBOARD_INPUT = 1

// DOMElementOverrides contains methods that are overridable.
type DOMElementOverrides struct {
}

func defaultDOMElementOverrides(v *DOMElement) DOMElementOverrides {
	return DOMElementOverrides{}
}

type DOMElement struct {
	_ [0]func() // equal guard
	DOMNode
}

var (
	_ coreglib.Objector = (*DOMElement)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMElement, *DOMElementClass, DOMElementOverrides](
		GTypeDOMElement,
		initDOMElementClass,
		wrapDOMElement,
		defaultDOMElementOverrides,
	)
}

func initDOMElementClass(gclass unsafe.Pointer, overrides DOMElementOverrides, classInitFunc func(*DOMElementClass)) {
	if classInitFunc != nil {
		class := (*DOMElementClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMElement(obj *coreglib.Object) *DOMElement {
	return &DOMElement{
		DOMNode: DOMNode{
			DOMObject: DOMObject{
				Object: obj,
			},
			Object: obj,
			DOMEventTarget: DOMEventTarget{
				Object: obj,
			},
		},
	}
}

func marshalDOMElement(p uintptr) (interface{}, error) {
	return wrapDOMElement(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Blur: deprecated: Use JavaScriptCore API instead.
func (self *DOMElement) Blur() {
	var _arg0 *C.WebKitDOMElement // out

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_element_blur(_arg0)
	runtime.KeepAlive(self)
}

// Closest: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - selectors: #gchar.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMElement) Closest(selectors string) (*DOMElement, error) {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out
	var _cret *C.WebKitDOMElement // in
	var _cerr *C.GError           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(selectors)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_element_closest(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(selectors)

	var _domElement *DOMElement // out
	var _goerr error            // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domElement, _goerr
}

// Focus: deprecated: Use JavaScriptCore API instead.
func (self *DOMElement) Focus() {
	var _arg0 *C.WebKitDOMElement // out

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_element_focus(_arg0)
	runtime.KeepAlive(self)
}

// Attribute: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - name: #gchar.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMElement) Attribute(name string) string {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out
	var _cret *C.gchar            // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_element_get_attribute(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(name)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// AttributeNode: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - name: #gchar.
//
// The function returns the following values:
//
//   - domAttr: KitDOMAttr.
//
func (self *DOMElement) AttributeNode(name string) *DOMAttr {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out
	var _cret *C.WebKitDOMAttr    // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_element_get_attribute_node(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(name)

	var _domAttr *DOMAttr // out

	_domAttr = wrapDOMAttr(coreglib.Take(unsafe.Pointer(_cret)))

	return _domAttr
}

// AttributeNodeNs: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - namespaceURI: #gchar.
//   - localName: #gchar.
//
// The function returns the following values:
//
//   - domAttr: KitDOMAttr.
//
func (self *DOMElement) AttributeNodeNs(namespaceURI, localName string) *DOMAttr {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out
	var _arg2 *C.gchar            // out
	var _cret *C.WebKitDOMAttr    // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(namespaceURI)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(localName)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.webkit_dom_element_get_attribute_node_ns(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(namespaceURI)
	runtime.KeepAlive(localName)

	var _domAttr *DOMAttr // out

	_domAttr = wrapDOMAttr(coreglib.Take(unsafe.Pointer(_cret)))

	return _domAttr
}

// AttributeNs: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - namespaceURI: #gchar.
//   - localName: #gchar.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMElement) AttributeNs(namespaceURI, localName string) string {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out
	var _arg2 *C.gchar            // out
	var _cret *C.gchar            // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(namespaceURI)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(localName)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.webkit_dom_element_get_attribute_ns(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(namespaceURI)
	runtime.KeepAlive(localName)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Attributes: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domNamedNodeMap: KitDOMNamedNodeMap.
//
func (self *DOMElement) Attributes() *DOMNamedNodeMap {
	var _arg0 *C.WebKitDOMElement      // out
	var _cret *C.WebKitDOMNamedNodeMap // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_attributes(_arg0)
	runtime.KeepAlive(self)

	var _domNamedNodeMap *DOMNamedNodeMap // out

	_domNamedNodeMap = wrapDOMNamedNodeMap(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domNamedNodeMap
}

// BoundingClientRect returns a KitDOMClientRect representing the size and
// position of self relative to the viewport.
//
// Deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domClientRect: KitDOMClientRect.
//
func (self *DOMElement) BoundingClientRect() *DOMClientRect {
	var _arg0 *C.WebKitDOMElement    // out
	var _cret *C.WebKitDOMClientRect // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_bounding_client_rect(_arg0)
	runtime.KeepAlive(self)

	var _domClientRect *DOMClientRect // out

	_domClientRect = wrapDOMClientRect(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domClientRect
}

// ChildElementCount: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gulong: #gulong.
//
func (self *DOMElement) ChildElementCount() uint32 {
	var _arg0 *C.WebKitDOMElement // out
	var _cret C.gulong            // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_child_element_count(_arg0)
	runtime.KeepAlive(self)

	var _gulong uint32 // out

	_gulong = uint32(_cret)

	return _gulong
}

// Children: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMElement) Children() *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMElement        // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_children(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// ClassList: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domdomTokenList: KitDOMDOMTokenList.
//
func (self *DOMElement) ClassList() *DOMDOMTokenList {
	var _arg0 *C.WebKitDOMElement      // out
	var _cret *C.WebKitDOMDOMTokenList // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_class_list(_arg0)
	runtime.KeepAlive(self)

	var _domdomTokenList *DOMDOMTokenList // out

	_domdomTokenList = wrapDOMDOMTokenList(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domdomTokenList
}

// ClassName: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMElement) ClassName() string {
	var _arg0 *C.WebKitDOMElement // out
	var _cret *C.gchar            // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_class_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ClientHeight: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gdouble: #gdouble.
//
func (self *DOMElement) ClientHeight() float64 {
	var _arg0 *C.WebKitDOMElement // out
	var _cret C.gdouble           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_client_height(_arg0)
	runtime.KeepAlive(self)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// ClientLeft: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gdouble: #gdouble.
//
func (self *DOMElement) ClientLeft() float64 {
	var _arg0 *C.WebKitDOMElement // out
	var _cret C.gdouble           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_client_left(_arg0)
	runtime.KeepAlive(self)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// ClientRects returns a collection of KitDOMClientRect objects, each of which
// describe the size and position of a CSS border box relative to the viewport.
//
// Deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domClientRectList: KitDOMClientRectList.
//
func (self *DOMElement) ClientRects() *DOMClientRectList {
	var _arg0 *C.WebKitDOMElement        // out
	var _cret *C.WebKitDOMClientRectList // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_client_rects(_arg0)
	runtime.KeepAlive(self)

	var _domClientRectList *DOMClientRectList // out

	_domClientRectList = wrapDOMClientRectList(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domClientRectList
}

// ClientTop: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gdouble: #gdouble.
//
func (self *DOMElement) ClientTop() float64 {
	var _arg0 *C.WebKitDOMElement // out
	var _cret C.gdouble           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_client_top(_arg0)
	runtime.KeepAlive(self)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// ClientWidth: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gdouble: #gdouble.
//
func (self *DOMElement) ClientWidth() float64 {
	var _arg0 *C.WebKitDOMElement // out
	var _cret C.gdouble           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_client_width(_arg0)
	runtime.KeepAlive(self)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// ElementsByClassName: deprecated: Use
// webkit_dom_element_get_elements_by_class_name_as_html_collection() instead.
//
// The function takes the following parameters:
//
//   - className with the tag name.
//
// The function returns the following values:
//
//   - domNodeList: KitDOMNodeList.
//
func (self *DOMElement) ElementsByClassName(className string) *DOMNodeList {
	var _arg0 *C.WebKitDOMElement  // out
	var _arg1 *C.gchar             // out
	var _cret *C.WebKitDOMNodeList // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(className)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_element_get_elements_by_class_name(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(className)

	var _domNodeList *DOMNodeList // out

	_domNodeList = wrapDOMNodeList(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domNodeList
}

// ElementsByClassNameAsHtmlCollection: deprecated: Use JavaScriptCore API
// instead.
//
// The function takes the following parameters:
//
//   - name: #gchar.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMElement) ElementsByClassNameAsHtmlCollection(name string) *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMElement        // out
	var _arg1 *C.gchar                   // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_element_get_elements_by_class_name_as_html_collection(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(name)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// ElementsByTagName: deprecated: Use
// webkit_dom_element_get_elements_by_tag_name_as_html_collection() instead.
//
// The function takes the following parameters:
//
//   - tagName with the tag name.
//
// The function returns the following values:
//
//   - domNodeList: KitDOMNodeList.
//
func (self *DOMElement) ElementsByTagName(tagName string) *DOMNodeList {
	var _arg0 *C.WebKitDOMElement  // out
	var _arg1 *C.gchar             // out
	var _cret *C.WebKitDOMNodeList // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(tagName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_element_get_elements_by_tag_name(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(tagName)

	var _domNodeList *DOMNodeList // out

	_domNodeList = wrapDOMNodeList(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domNodeList
}

// ElementsByTagNameAsHtmlCollection: deprecated: Use JavaScriptCore API
// instead.
//
// The function takes the following parameters:
//
//   - name: #gchar.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMElement) ElementsByTagNameAsHtmlCollection(name string) *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMElement        // out
	var _arg1 *C.gchar                   // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_element_get_elements_by_tag_name_as_html_collection(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(name)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// ElementsByTagNameNs: deprecated: Use
// webkit_dom_element_get_elements_by_tag_name_ns_as_html_collection() instead.
//
// The function takes the following parameters:
//
//   - namespaceUri with the namespace URI.
//   - tagName with the tag name.
//
// The function returns the following values:
//
//   - domNodeList: KitDOMNodeList.
//
func (self *DOMElement) ElementsByTagNameNs(namespaceUri, tagName string) *DOMNodeList {
	var _arg0 *C.WebKitDOMElement  // out
	var _arg1 *C.gchar             // out
	var _arg2 *C.gchar             // out
	var _cret *C.WebKitDOMNodeList // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(namespaceUri)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(tagName)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.webkit_dom_element_get_elements_by_tag_name_ns(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(namespaceUri)
	runtime.KeepAlive(tagName)

	var _domNodeList *DOMNodeList // out

	_domNodeList = wrapDOMNodeList(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domNodeList
}

// ElementsByTagNameNsAsHtmlCollection: deprecated: Use JavaScriptCore API
// instead.
//
// The function takes the following parameters:
//
//   - namespaceURI: #gchar.
//   - localName: #gchar.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMElement) ElementsByTagNameNsAsHtmlCollection(namespaceURI, localName string) *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMElement        // out
	var _arg1 *C.gchar                   // out
	var _arg2 *C.gchar                   // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(namespaceURI)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(localName)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.webkit_dom_element_get_elements_by_tag_name_ns_as_html_collection(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(namespaceURI)
	runtime.KeepAlive(localName)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// FirstElementChild: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMElement) FirstElementChild() *DOMElement {
	var _arg0 *C.WebKitDOMElement // out
	var _cret *C.WebKitDOMElement // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_first_element_child(_arg0)
	runtime.KeepAlive(self)

	var _domElement *DOMElement // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domElement
}

// ID: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMElement) ID() string {
	var _arg0 *C.WebKitDOMElement // out
	var _cret *C.gchar            // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_id(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// InnerHtml: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMElement) InnerHtml() string {
	var _arg0 *C.WebKitDOMElement // out
	var _cret *C.gchar            // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_inner_html(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// LastElementChild: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMElement) LastElementChild() *DOMElement {
	var _arg0 *C.WebKitDOMElement // out
	var _cret *C.WebKitDOMElement // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_last_element_child(_arg0)
	runtime.KeepAlive(self)

	var _domElement *DOMElement // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domElement
}

// LocalName: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMElement) LocalName() string {
	var _arg0 *C.WebKitDOMElement // out
	var _cret *C.gchar            // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_local_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// NamespaceURI: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMElement) NamespaceURI() string {
	var _arg0 *C.WebKitDOMElement // out
	var _cret *C.gchar            // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_namespace_uri(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// NextElementSibling: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMElement) NextElementSibling() *DOMElement {
	var _arg0 *C.WebKitDOMElement // out
	var _cret *C.WebKitDOMElement // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_next_element_sibling(_arg0)
	runtime.KeepAlive(self)

	var _domElement *DOMElement // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domElement
}

// OffsetHeight: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gdouble: #gdouble.
//
func (self *DOMElement) OffsetHeight() float64 {
	var _arg0 *C.WebKitDOMElement // out
	var _cret C.gdouble           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_offset_height(_arg0)
	runtime.KeepAlive(self)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// OffsetLeft: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gdouble: #gdouble.
//
func (self *DOMElement) OffsetLeft() float64 {
	var _arg0 *C.WebKitDOMElement // out
	var _cret C.gdouble           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_offset_left(_arg0)
	runtime.KeepAlive(self)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// OffsetParent: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMElement) OffsetParent() *DOMElement {
	var _arg0 *C.WebKitDOMElement // out
	var _cret *C.WebKitDOMElement // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_offset_parent(_arg0)
	runtime.KeepAlive(self)

	var _domElement *DOMElement // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domElement
}

// OffsetTop: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gdouble: #gdouble.
//
func (self *DOMElement) OffsetTop() float64 {
	var _arg0 *C.WebKitDOMElement // out
	var _cret C.gdouble           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_offset_top(_arg0)
	runtime.KeepAlive(self)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// OffsetWidth: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gdouble: #gdouble.
//
func (self *DOMElement) OffsetWidth() float64 {
	var _arg0 *C.WebKitDOMElement // out
	var _cret C.gdouble           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_offset_width(_arg0)
	runtime.KeepAlive(self)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// OuterHtml: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMElement) OuterHtml() string {
	var _arg0 *C.WebKitDOMElement // out
	var _cret *C.gchar            // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_outer_html(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Prefix: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMElement) Prefix() string {
	var _arg0 *C.WebKitDOMElement // out
	var _cret *C.gchar            // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_prefix(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// PreviousElementSibling: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMElement) PreviousElementSibling() *DOMElement {
	var _arg0 *C.WebKitDOMElement // out
	var _cret *C.WebKitDOMElement // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_previous_element_sibling(_arg0)
	runtime.KeepAlive(self)

	var _domElement *DOMElement // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domElement
}

// ScrollHeight: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMElement) ScrollHeight() int32 {
	var _arg0 *C.WebKitDOMElement // out
	var _cret C.glong             // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_scroll_height(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// ScrollLeft: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMElement) ScrollLeft() int32 {
	var _arg0 *C.WebKitDOMElement // out
	var _cret C.glong             // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_scroll_left(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// ScrollTop: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMElement) ScrollTop() int32 {
	var _arg0 *C.WebKitDOMElement // out
	var _cret C.glong             // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_scroll_top(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// ScrollWidth: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMElement) ScrollWidth() int32 {
	var _arg0 *C.WebKitDOMElement // out
	var _cret C.glong             // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_scroll_width(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// Style: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domcssStyleDeclaration: KitDOMCSSStyleDeclaration.
//
func (self *DOMElement) Style() *DOMCSSStyleDeclaration {
	var _arg0 *C.WebKitDOMElement             // out
	var _cret *C.WebKitDOMCSSStyleDeclaration // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_style(_arg0)
	runtime.KeepAlive(self)

	var _domcssStyleDeclaration *DOMCSSStyleDeclaration // out

	_domcssStyleDeclaration = wrapDOMCSSStyleDeclaration(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domcssStyleDeclaration
}

// TagName: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMElement) TagName() string {
	var _arg0 *C.WebKitDOMElement // out
	var _cret *C.gchar            // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_tag_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// WebkitRegionOverset: CSS Regions support has been removed. This function does
// nothing.
//
// Deprecated: since version 2.20.
//
// The function returns the following values:
//
//   - utf8: NULL.
//
func (self *DOMElement) WebkitRegionOverset() string {
	var _arg0 *C.WebKitDOMElement // out
	var _cret *C.gchar            // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_get_webkit_region_overset(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// HasAttribute: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - name: #gchar.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMElement) HasAttribute(name string) bool {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out
	var _cret C.gboolean          // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_element_has_attribute(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(name)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HasAttributeNs: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - namespaceURI: #gchar.
//   - localName: #gchar.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMElement) HasAttributeNs(namespaceURI, localName string) bool {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out
	var _arg2 *C.gchar            // out
	var _cret C.gboolean          // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(namespaceURI)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(localName)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.webkit_dom_element_has_attribute_ns(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(namespaceURI)
	runtime.KeepAlive(localName)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HasAttributes: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMElement) HasAttributes() bool {
	var _arg0 *C.WebKitDOMElement // out
	var _cret C.gboolean          // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_element_has_attributes(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HtmlInputElementGetAutoFilled: get whether the element is an HTML input
// element that has been filled automatically.
//
// Deprecated: Use webkit_web_form_manager_input_element_is_auto_filled()
// instead.
//
// The function returns the following values:
//
//   - ok: whether element has been filled automatically.
//
func (element *DOMElement) HtmlInputElementGetAutoFilled() bool {
	var _arg0 *C.WebKitDOMElement // out
	var _cret C.gboolean          // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(element).Native()))

	_cret = C.webkit_dom_element_html_input_element_get_auto_filled(_arg0)
	runtime.KeepAlive(element)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HtmlInputElementIsUserEdited: get whether element is an HTML text input
// element that has been edited by a user action.
//
// Deprecated: Use webkit_web_form_manager_input_element_is_user_edited()
// instead.
//
// The function returns the following values:
//
//   - ok: whether element has been edited by a user action.
//
func (element *DOMElement) HtmlInputElementIsUserEdited() bool {
	var _arg0 *C.WebKitDOMElement // out
	var _cret C.gboolean          // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(element).Native()))

	_cret = C.webkit_dom_element_html_input_element_is_user_edited(_arg0)
	runtime.KeepAlive(element)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HtmlInputElementSetAutoFilled: set whether the element is an HTML input
// element that has been filled automatically. If element is not an HTML input
// element this function does nothing.
//
// Deprecated: Use webkit_web_form_manager_input_element_auto_fill() instead.
//
// The function takes the following parameters:
//
//   - autoFilled: value to set.
//
func (element *DOMElement) HtmlInputElementSetAutoFilled(autoFilled bool) {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(element).Native()))
	if autoFilled {
		_arg1 = C.TRUE
	}

	C.webkit_dom_element_html_input_element_set_auto_filled(_arg0, _arg1)
	runtime.KeepAlive(element)
	runtime.KeepAlive(autoFilled)
}

// HtmlInputElementSetEditingValue: set the value of an HTML input element as if
// it had been edited by the user, triggering a change event. If element is not
// an HTML input element this function does nothing.
//
// Deprecated: Use webkit_web_form_manager_input_element_auto_fill() instead.
//
// The function takes the following parameters:
//
//   - value: text to set.
//
func (element *DOMElement) HtmlInputElementSetEditingValue(value string) {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.char             // out

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(element).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_element_html_input_element_set_editing_value(_arg0, _arg1)
	runtime.KeepAlive(element)
	runtime.KeepAlive(value)
}

// InsertAdjacentElement: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - where: #gchar.
//   - element: KitDOMElement.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMElement) InsertAdjacentElement(where string, element *DOMElement) (*DOMElement, error) {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out
	var _arg2 *C.WebKitDOMElement // out
	var _cret *C.WebKitDOMElement // in
	var _cerr *C.GError           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(where)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(element).Native()))

	_cret = C.webkit_dom_element_insert_adjacent_element(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(where)
	runtime.KeepAlive(element)

	var _domElement *DOMElement // out
	var _goerr error            // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domElement, _goerr
}

// InsertAdjacentHtml: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - where: #gchar.
//   - html: #gchar.
//
func (self *DOMElement) InsertAdjacentHtml(where, html string) error {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out
	var _arg2 *C.gchar            // out
	var _cerr *C.GError           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(where)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(html)))
	defer C.free(unsafe.Pointer(_arg2))

	C.webkit_dom_element_insert_adjacent_html(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(where)
	runtime.KeepAlive(html)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// InsertAdjacentText: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - where: #gchar.
//   - text: #gchar.
//
func (self *DOMElement) InsertAdjacentText(where, text string) error {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out
	var _arg2 *C.gchar            // out
	var _cerr *C.GError           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(where)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg2))

	C.webkit_dom_element_insert_adjacent_text(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(where)
	runtime.KeepAlive(text)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Matches: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - selectors: #gchar.
//
func (self *DOMElement) Matches(selectors string) error {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out
	var _cerr *C.GError           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(selectors)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_element_matches(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(selectors)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// QuerySelector: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - selectors: #gchar.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMElement) QuerySelector(selectors string) (*DOMElement, error) {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out
	var _cret *C.WebKitDOMElement // in
	var _cerr *C.GError           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(selectors)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_element_query_selector(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(selectors)

	var _domElement *DOMElement // out
	var _goerr error            // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domElement, _goerr
}

// QuerySelectorAll: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - selectors: #gchar.
//
// The function returns the following values:
//
//   - domNodeList: KitDOMNodeList.
//
func (self *DOMElement) QuerySelectorAll(selectors string) (*DOMNodeList, error) {
	var _arg0 *C.WebKitDOMElement  // out
	var _arg1 *C.gchar             // out
	var _cret *C.WebKitDOMNodeList // in
	var _cerr *C.GError            // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(selectors)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_element_query_selector_all(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(selectors)

	var _domNodeList *DOMNodeList // out
	var _goerr error              // out

	_domNodeList = wrapDOMNodeList(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domNodeList, _goerr
}

// Remove: deprecated: Use JavaScriptCore API instead.
func (self *DOMElement) Remove() error {
	var _arg0 *C.WebKitDOMElement // out
	var _cerr *C.GError           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_element_remove(_arg0, &_cerr)
	runtime.KeepAlive(self)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// RemoveAttribute: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - name: #gchar.
//
func (self *DOMElement) RemoveAttribute(name string) {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_element_remove_attribute(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(name)
}

// RemoveAttributeNode: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - oldAttr: KitDOMAttr.
//
// The function returns the following values:
//
//   - domAttr: KitDOMAttr.
//
func (self *DOMElement) RemoveAttributeNode(oldAttr *DOMAttr) (*DOMAttr, error) {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.WebKitDOMAttr    // out
	var _cret *C.WebKitDOMAttr    // in
	var _cerr *C.GError           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMAttr)(unsafe.Pointer(coreglib.InternObject(oldAttr).Native()))

	_cret = C.webkit_dom_element_remove_attribute_node(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(oldAttr)

	var _domAttr *DOMAttr // out
	var _goerr error      // out

	_domAttr = wrapDOMAttr(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domAttr, _goerr
}

// RemoveAttributeNs: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - namespaceURI: #gchar.
//   - localName: #gchar.
//
func (self *DOMElement) RemoveAttributeNs(namespaceURI, localName string) {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out
	var _arg2 *C.gchar            // out

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(namespaceURI)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(localName)))
	defer C.free(unsafe.Pointer(_arg2))

	C.webkit_dom_element_remove_attribute_ns(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(namespaceURI)
	runtime.KeepAlive(localName)
}

// RequestPointerLock: deprecated: Use JavaScriptCore API instead.
func (self *DOMElement) RequestPointerLock() {
	var _arg0 *C.WebKitDOMElement // out

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_element_request_pointer_lock(_arg0)
	runtime.KeepAlive(self)
}

// ScrollByLines: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - lines: #glong.
//
func (self *DOMElement) ScrollByLines(lines int32) {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 C.glong             // out

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(lines)

	C.webkit_dom_element_scroll_by_lines(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(lines)
}

// ScrollByPages: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - pages: #glong.
//
func (self *DOMElement) ScrollByPages(pages int32) {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 C.glong             // out

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(pages)

	C.webkit_dom_element_scroll_by_pages(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(pages)
}

// ScrollIntoView: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - alignWithTop: #gboolean.
//
func (self *DOMElement) ScrollIntoView(alignWithTop bool) {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if alignWithTop {
		_arg1 = C.TRUE
	}

	C.webkit_dom_element_scroll_into_view(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(alignWithTop)
}

// ScrollIntoViewIfNeeded: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - centerIfNeeded: #gboolean.
//
func (self *DOMElement) ScrollIntoViewIfNeeded(centerIfNeeded bool) {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if centerIfNeeded {
		_arg1 = C.TRUE
	}

	C.webkit_dom_element_scroll_into_view_if_needed(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(centerIfNeeded)
}

// SetAttribute: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - name: #gchar.
//   - value: #gchar.
//
func (self *DOMElement) SetAttribute(name, value string) error {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out
	var _arg2 *C.gchar            // out
	var _cerr *C.GError           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg2))

	C.webkit_dom_element_set_attribute(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(name)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetAttributeNode: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - newAttr: KitDOMAttr.
//
// The function returns the following values:
//
//   - domAttr: KitDOMAttr.
//
func (self *DOMElement) SetAttributeNode(newAttr *DOMAttr) (*DOMAttr, error) {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.WebKitDOMAttr    // out
	var _cret *C.WebKitDOMAttr    // in
	var _cerr *C.GError           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMAttr)(unsafe.Pointer(coreglib.InternObject(newAttr).Native()))

	_cret = C.webkit_dom_element_set_attribute_node(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(newAttr)

	var _domAttr *DOMAttr // out
	var _goerr error      // out

	_domAttr = wrapDOMAttr(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domAttr, _goerr
}

// SetAttributeNodeNs: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - newAttr: KitDOMAttr.
//
// The function returns the following values:
//
//   - domAttr: KitDOMAttr.
//
func (self *DOMElement) SetAttributeNodeNs(newAttr *DOMAttr) (*DOMAttr, error) {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.WebKitDOMAttr    // out
	var _cret *C.WebKitDOMAttr    // in
	var _cerr *C.GError           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMAttr)(unsafe.Pointer(coreglib.InternObject(newAttr).Native()))

	_cret = C.webkit_dom_element_set_attribute_node_ns(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(newAttr)

	var _domAttr *DOMAttr // out
	var _goerr error      // out

	_domAttr = wrapDOMAttr(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domAttr, _goerr
}

// SetAttributeNs: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - namespaceURI (optional): #gchar.
//   - qualifiedName: #gchar.
//   - value: #gchar.
//
func (self *DOMElement) SetAttributeNs(namespaceURI, qualifiedName, value string) error {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out
	var _arg2 *C.gchar            // out
	var _arg3 *C.gchar            // out
	var _cerr *C.GError           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if namespaceURI != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(namespaceURI)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(qualifiedName)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg3))

	C.webkit_dom_element_set_attribute_ns(_arg0, _arg1, _arg2, _arg3, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(namespaceURI)
	runtime.KeepAlive(qualifiedName)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetClassName: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMElement) SetClassName(value string) {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_element_set_class_name(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetID: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMElement) SetID(value string) {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_element_set_id(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetInnerHtml: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMElement) SetInnerHtml(value string) error {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out
	var _cerr *C.GError           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_element_set_inner_html(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetOuterHtml: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMElement) SetOuterHtml(value string) error {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out
	var _cerr *C.GError           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_element_set_outer_html(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetScrollLeft: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #glong.
//
func (self *DOMElement) SetScrollLeft(value int32) {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 C.glong             // out

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(value)

	C.webkit_dom_element_set_scroll_left(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetScrollTop: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #glong.
//
func (self *DOMElement) SetScrollTop(value int32) {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 C.glong             // out

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(value)

	C.webkit_dom_element_set_scroll_top(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// WebkitMatchesSelector: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - selectors: #gchar.
//
func (self *DOMElement) WebkitMatchesSelector(selectors string) error {
	var _arg0 *C.WebKitDOMElement // out
	var _arg1 *C.gchar            // out
	var _cerr *C.GError           // in

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(selectors)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_element_webkit_matches_selector(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(selectors)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// WebkitRequestFullscreen: deprecated: Use JavaScriptCore API instead.
func (self *DOMElement) WebkitRequestFullscreen() {
	var _arg0 *C.WebKitDOMElement // out

	_arg0 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_element_webkit_request_fullscreen(_arg0)
	runtime.KeepAlive(self)
}

// DOMElementClass: instance of this type is always passed by reference.
type DOMElementClass struct {
	*domElementClass
}

// domElementClass is the struct that's finalized.
type domElementClass struct {
	native *C.WebKitDOMElementClass
}

func (d *DOMElementClass) ParentClass() *DOMNodeClass {
	valptr := &d.native.parent_class
	var _v *DOMNodeClass // out
	_v = (*DOMNodeClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
