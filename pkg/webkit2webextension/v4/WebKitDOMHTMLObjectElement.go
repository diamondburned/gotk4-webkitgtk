// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMHTMLObjectElement = coreglib.Type(C.webkit_dom_html_object_element_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMHTMLObjectElement, F: marshalDOMHTMLObjectElement},
	})
}

// DOMHTMLObjectElementOverrides contains methods that are overridable.
type DOMHTMLObjectElementOverrides struct {
}

func defaultDOMHTMLObjectElementOverrides(v *DOMHTMLObjectElement) DOMHTMLObjectElementOverrides {
	return DOMHTMLObjectElementOverrides{}
}

type DOMHTMLObjectElement struct {
	_ [0]func() // equal guard
	DOMHTMLElement
}

var (
	_ coreglib.Objector = (*DOMHTMLObjectElement)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMHTMLObjectElement, *DOMHTMLObjectElementClass, DOMHTMLObjectElementOverrides](
		GTypeDOMHTMLObjectElement,
		initDOMHTMLObjectElementClass,
		wrapDOMHTMLObjectElement,
		defaultDOMHTMLObjectElementOverrides,
	)
}

func initDOMHTMLObjectElementClass(gclass unsafe.Pointer, overrides DOMHTMLObjectElementOverrides, classInitFunc func(*DOMHTMLObjectElementClass)) {
	if classInitFunc != nil {
		class := (*DOMHTMLObjectElementClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMHTMLObjectElement(obj *coreglib.Object) *DOMHTMLObjectElement {
	return &DOMHTMLObjectElement{
		DOMHTMLElement: DOMHTMLElement{
			DOMElement: DOMElement{
				DOMNode: DOMNode{
					DOMObject: DOMObject{
						Object: obj,
					},
					Object: obj,
					DOMEventTarget: DOMEventTarget{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalDOMHTMLObjectElement(p uintptr) (interface{}, error) {
	return wrapDOMHTMLObjectElement(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Align: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLObjectElement) Align() string {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_object_element_get_align(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Archive: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLObjectElement) Archive() string {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_object_element_get_archive(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Border: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLObjectElement) Border() string {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_object_element_get_border(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Code: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLObjectElement) Code() string {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_object_element_get_code(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// CodeBase: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLObjectElement) CodeBase() string {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_object_element_get_code_base(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// CodeType: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLObjectElement) CodeType() string {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_object_element_get_code_type(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ContentDocument: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domDocument: KitDOMDocument.
//
func (self *DOMHTMLObjectElement) ContentDocument() *DOMDocument {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _cret *C.WebKitDOMDocument          // in

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_object_element_get_content_document(_arg0)
	runtime.KeepAlive(self)

	var _domDocument *DOMDocument // out

	_domDocument = wrapDOMDocument(coreglib.Take(unsafe.Pointer(_cret)))

	return _domDocument
}

// Data: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLObjectElement) Data() string {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_object_element_get_data(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Declare: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMHTMLObjectElement) Declare() bool {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _cret C.gboolean                    // in

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_object_element_get_declare(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Form: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlFormElement: KitDOMHTMLFormElement.
//
func (self *DOMHTMLObjectElement) Form() *DOMHTMLFormElement {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _cret *C.WebKitDOMHTMLFormElement   // in

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_object_element_get_form(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlFormElement *DOMHTMLFormElement // out

	_domhtmlFormElement = wrapDOMHTMLFormElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domhtmlFormElement
}

// Height: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLObjectElement) Height() string {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_object_element_get_height(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Hspace: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMHTMLObjectElement) Hspace() int32 {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _cret C.glong                       // in

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_object_element_get_hspace(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// Name: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLObjectElement) Name() string {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_object_element_get_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Standby: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLObjectElement) Standby() string {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_object_element_get_standby(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// TypeAttr: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLObjectElement) TypeAttr() string {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_object_element_get_type_attr(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// UseMap: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLObjectElement) UseMap() string {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_object_element_get_use_map(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Vspace: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMHTMLObjectElement) Vspace() int32 {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _cret C.glong                       // in

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_object_element_get_vspace(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// Width: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLObjectElement) Width() string {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_object_element_get_width(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SetAlign: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLObjectElement) SetAlign(value string) {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_object_element_set_align(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetArchive: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLObjectElement) SetArchive(value string) {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_object_element_set_archive(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetBorder: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLObjectElement) SetBorder(value string) {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_object_element_set_border(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetCode: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLObjectElement) SetCode(value string) {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_object_element_set_code(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetCodeBase: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLObjectElement) SetCodeBase(value string) {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_object_element_set_code_base(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetCodeType: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLObjectElement) SetCodeType(value string) {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_object_element_set_code_type(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetData: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLObjectElement) SetData(value string) {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_object_element_set_data(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetDeclare: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gboolean.
//
func (self *DOMHTMLObjectElement) SetDeclare(value bool) {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _arg1 C.gboolean                    // out

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if value {
		_arg1 = C.TRUE
	}

	C.webkit_dom_html_object_element_set_declare(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetHeight: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLObjectElement) SetHeight(value string) {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_object_element_set_height(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetHspace: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #glong.
//
func (self *DOMHTMLObjectElement) SetHspace(value int32) {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _arg1 C.glong                       // out

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(value)

	C.webkit_dom_html_object_element_set_hspace(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetName: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLObjectElement) SetName(value string) {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_object_element_set_name(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetStandby: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLObjectElement) SetStandby(value string) {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_object_element_set_standby(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetTypeAttr: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLObjectElement) SetTypeAttr(value string) {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_object_element_set_type_attr(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetUseMap: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLObjectElement) SetUseMap(value string) {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_object_element_set_use_map(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetVspace: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #glong.
//
func (self *DOMHTMLObjectElement) SetVspace(value int32) {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _arg1 C.glong                       // out

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(value)

	C.webkit_dom_html_object_element_set_vspace(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetWidth: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLObjectElement) SetWidth(value string) {
	var _arg0 *C.WebKitDOMHTMLObjectElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLObjectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_object_element_set_width(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// DOMHTMLObjectElementClass: instance of this type is always passed by
// reference.
type DOMHTMLObjectElementClass struct {
	*domhtmlObjectElementClass
}

// domhtmlObjectElementClass is the struct that's finalized.
type domhtmlObjectElementClass struct {
	native *C.WebKitDOMHTMLObjectElementClass
}

func (d *DOMHTMLObjectElementClass) ParentClass() *DOMHTMLElementClass {
	valptr := &d.native.parent_class
	var _v *DOMHTMLElementClass // out
	_v = (*DOMHTMLElementClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
