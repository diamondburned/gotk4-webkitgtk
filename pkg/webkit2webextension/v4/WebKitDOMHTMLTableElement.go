// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMHTMLTableElement = coreglib.Type(C.webkit_dom_html_table_element_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMHTMLTableElement, F: marshalDOMHTMLTableElement},
	})
}

// DOMHTMLTableElementOverrides contains methods that are overridable.
type DOMHTMLTableElementOverrides struct {
}

func defaultDOMHTMLTableElementOverrides(v *DOMHTMLTableElement) DOMHTMLTableElementOverrides {
	return DOMHTMLTableElementOverrides{}
}

type DOMHTMLTableElement struct {
	_ [0]func() // equal guard
	DOMHTMLElement
}

var (
	_ coreglib.Objector = (*DOMHTMLTableElement)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMHTMLTableElement, *DOMHTMLTableElementClass, DOMHTMLTableElementOverrides](
		GTypeDOMHTMLTableElement,
		initDOMHTMLTableElementClass,
		wrapDOMHTMLTableElement,
		defaultDOMHTMLTableElementOverrides,
	)
}

func initDOMHTMLTableElementClass(gclass unsafe.Pointer, overrides DOMHTMLTableElementOverrides, classInitFunc func(*DOMHTMLTableElementClass)) {
	if classInitFunc != nil {
		class := (*DOMHTMLTableElementClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMHTMLTableElement(obj *coreglib.Object) *DOMHTMLTableElement {
	return &DOMHTMLTableElement{
		DOMHTMLElement: DOMHTMLElement{
			DOMElement: DOMElement{
				DOMNode: DOMNode{
					DOMObject: DOMObject{
						Object: obj,
					},
					Object: obj,
					DOMEventTarget: DOMEventTarget{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalDOMHTMLTableElement(p uintptr) (interface{}, error) {
	return wrapDOMHTMLTableElement(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// CreateCaption: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlElement: KitDOMHTMLElement.
//
func (self *DOMHTMLTableElement) CreateCaption() *DOMHTMLElement {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _cret *C.WebKitDOMHTMLElement      // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_element_create_caption(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlElement *DOMHTMLElement // out

	_domhtmlElement = wrapDOMHTMLElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domhtmlElement
}

// CreateTFoot: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlElement: KitDOMHTMLElement.
//
func (self *DOMHTMLTableElement) CreateTFoot() *DOMHTMLElement {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _cret *C.WebKitDOMHTMLElement      // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_element_create_t_foot(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlElement *DOMHTMLElement // out

	_domhtmlElement = wrapDOMHTMLElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domhtmlElement
}

// CreateTHead: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlElement: KitDOMHTMLElement.
//
func (self *DOMHTMLTableElement) CreateTHead() *DOMHTMLElement {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _cret *C.WebKitDOMHTMLElement      // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_element_create_t_head(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlElement *DOMHTMLElement // out

	_domhtmlElement = wrapDOMHTMLElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domhtmlElement
}

// DeleteCaption: deprecated: Use JavaScriptCore API instead.
func (self *DOMHTMLTableElement) DeleteCaption() {
	var _arg0 *C.WebKitDOMHTMLTableElement // out

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_html_table_element_delete_caption(_arg0)
	runtime.KeepAlive(self)
}

// DeleteRow: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - index: #glong.
//
func (self *DOMHTMLTableElement) DeleteRow(index int32) error {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _arg1 C.glong                      // out
	var _cerr *C.GError                    // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(index)

	C.webkit_dom_html_table_element_delete_row(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(index)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// DeleteTFoot: deprecated: Use JavaScriptCore API instead.
func (self *DOMHTMLTableElement) DeleteTFoot() {
	var _arg0 *C.WebKitDOMHTMLTableElement // out

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_html_table_element_delete_t_foot(_arg0)
	runtime.KeepAlive(self)
}

// DeleteTHead: deprecated: Use JavaScriptCore API instead.
func (self *DOMHTMLTableElement) DeleteTHead() {
	var _arg0 *C.WebKitDOMHTMLTableElement // out

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_html_table_element_delete_t_head(_arg0)
	runtime.KeepAlive(self)
}

// Align: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableElement) Align() string {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _cret *C.gchar                     // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_element_get_align(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// BgColor: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableElement) BgColor() string {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _cret *C.gchar                     // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_element_get_bg_color(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Border: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableElement) Border() string {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _cret *C.gchar                     // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_element_get_border(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Caption: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlTableCaptionElement: KitDOMHTMLTableCaptionElement.
//
func (self *DOMHTMLTableElement) Caption() *DOMHTMLTableCaptionElement {
	var _arg0 *C.WebKitDOMHTMLTableElement        // out
	var _cret *C.WebKitDOMHTMLTableCaptionElement // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_element_get_caption(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlTableCaptionElement *DOMHTMLTableCaptionElement // out

	_domhtmlTableCaptionElement = wrapDOMHTMLTableCaptionElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domhtmlTableCaptionElement
}

// CellPadding: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableElement) CellPadding() string {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _cret *C.gchar                     // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_element_get_cell_padding(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// CellSpacing: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableElement) CellSpacing() string {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _cret *C.gchar                     // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_element_get_cell_spacing(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Rows: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMHTMLTableElement) Rows() *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _cret *C.WebKitDOMHTMLCollection   // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_element_get_rows(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// Rules: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableElement) Rules() string {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _cret *C.gchar                     // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_element_get_rules(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Summary: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableElement) Summary() string {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _cret *C.gchar                     // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_element_get_summary(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// TBodies: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMHTMLTableElement) TBodies() *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _cret *C.WebKitDOMHTMLCollection   // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_element_get_t_bodies(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// TFoot: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlTableSectionElement: KitDOMHTMLTableSectionElement.
//
func (self *DOMHTMLTableElement) TFoot() *DOMHTMLTableSectionElement {
	var _arg0 *C.WebKitDOMHTMLTableElement        // out
	var _cret *C.WebKitDOMHTMLTableSectionElement // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_element_get_t_foot(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlTableSectionElement *DOMHTMLTableSectionElement // out

	_domhtmlTableSectionElement = wrapDOMHTMLTableSectionElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domhtmlTableSectionElement
}

// THead: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlTableSectionElement: KitDOMHTMLTableSectionElement.
//
func (self *DOMHTMLTableElement) THead() *DOMHTMLTableSectionElement {
	var _arg0 *C.WebKitDOMHTMLTableElement        // out
	var _cret *C.WebKitDOMHTMLTableSectionElement // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_element_get_t_head(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlTableSectionElement *DOMHTMLTableSectionElement // out

	_domhtmlTableSectionElement = wrapDOMHTMLTableSectionElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domhtmlTableSectionElement
}

// Width: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableElement) Width() string {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _cret *C.gchar                     // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_element_get_width(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// InsertRow: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - index: #glong.
//
// The function returns the following values:
//
//   - domhtmlElement: KitDOMHTMLElement.
//
func (self *DOMHTMLTableElement) InsertRow(index int32) (*DOMHTMLElement, error) {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _arg1 C.glong                      // out
	var _cret *C.WebKitDOMHTMLElement      // in
	var _cerr *C.GError                    // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(index)

	_cret = C.webkit_dom_html_table_element_insert_row(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(index)

	var _domhtmlElement *DOMHTMLElement // out
	var _goerr error                    // out

	_domhtmlElement = wrapDOMHTMLElement(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domhtmlElement, _goerr
}

// SetAlign: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableElement) SetAlign(value string) {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _arg1 *C.gchar                     // out

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_element_set_align(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetBgColor: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableElement) SetBgColor(value string) {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _arg1 *C.gchar                     // out

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_element_set_bg_color(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetBorder: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableElement) SetBorder(value string) {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _arg1 *C.gchar                     // out

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_element_set_border(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetCaption: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: KitDOMHTMLTableCaptionElement.
//
func (self *DOMHTMLTableElement) SetCaption(value *DOMHTMLTableCaptionElement) error {
	var _arg0 *C.WebKitDOMHTMLTableElement        // out
	var _arg1 *C.WebKitDOMHTMLTableCaptionElement // out
	var _cerr *C.GError                           // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMHTMLTableCaptionElement)(unsafe.Pointer(coreglib.InternObject(value).Native()))

	C.webkit_dom_html_table_element_set_caption(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetCellPadding: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableElement) SetCellPadding(value string) {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _arg1 *C.gchar                     // out

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_element_set_cell_padding(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetCellSpacing: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableElement) SetCellSpacing(value string) {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _arg1 *C.gchar                     // out

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_element_set_cell_spacing(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetRules: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableElement) SetRules(value string) {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _arg1 *C.gchar                     // out

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_element_set_rules(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetSummary: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableElement) SetSummary(value string) {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _arg1 *C.gchar                     // out

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_element_set_summary(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetTFoot: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: KitDOMHTMLTableSectionElement.
//
func (self *DOMHTMLTableElement) SetTFoot(value *DOMHTMLTableSectionElement) error {
	var _arg0 *C.WebKitDOMHTMLTableElement        // out
	var _arg1 *C.WebKitDOMHTMLTableSectionElement // out
	var _cerr *C.GError                           // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMHTMLTableSectionElement)(unsafe.Pointer(coreglib.InternObject(value).Native()))

	C.webkit_dom_html_table_element_set_t_foot(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetTHead: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: KitDOMHTMLTableSectionElement.
//
func (self *DOMHTMLTableElement) SetTHead(value *DOMHTMLTableSectionElement) error {
	var _arg0 *C.WebKitDOMHTMLTableElement        // out
	var _arg1 *C.WebKitDOMHTMLTableSectionElement // out
	var _cerr *C.GError                           // in

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMHTMLTableSectionElement)(unsafe.Pointer(coreglib.InternObject(value).Native()))

	C.webkit_dom_html_table_element_set_t_head(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetWidth: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableElement) SetWidth(value string) {
	var _arg0 *C.WebKitDOMHTMLTableElement // out
	var _arg1 *C.gchar                     // out

	_arg0 = (*C.WebKitDOMHTMLTableElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_element_set_width(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// DOMHTMLTableElementClass: instance of this type is always passed by
// reference.
type DOMHTMLTableElementClass struct {
	*domhtmlTableElementClass
}

// domhtmlTableElementClass is the struct that's finalized.
type domhtmlTableElementClass struct {
	native *C.WebKitDOMHTMLTableElementClass
}

func (d *DOMHTMLTableElementClass) ParentClass() *DOMHTMLElementClass {
	valptr := &d.native.parent_class
	var _v *DOMHTMLElementClass // out
	_v = (*DOMHTMLElementClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
