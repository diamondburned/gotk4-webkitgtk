// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMHTMLLinkElement = coreglib.Type(C.webkit_dom_html_link_element_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMHTMLLinkElement, F: marshalDOMHTMLLinkElement},
	})
}

// DOMHTMLLinkElementOverrides contains methods that are overridable.
type DOMHTMLLinkElementOverrides struct {
}

func defaultDOMHTMLLinkElementOverrides(v *DOMHTMLLinkElement) DOMHTMLLinkElementOverrides {
	return DOMHTMLLinkElementOverrides{}
}

type DOMHTMLLinkElement struct {
	_ [0]func() // equal guard
	DOMHTMLElement
}

var (
	_ coreglib.Objector = (*DOMHTMLLinkElement)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMHTMLLinkElement, *DOMHTMLLinkElementClass, DOMHTMLLinkElementOverrides](
		GTypeDOMHTMLLinkElement,
		initDOMHTMLLinkElementClass,
		wrapDOMHTMLLinkElement,
		defaultDOMHTMLLinkElementOverrides,
	)
}

func initDOMHTMLLinkElementClass(gclass unsafe.Pointer, overrides DOMHTMLLinkElementOverrides, classInitFunc func(*DOMHTMLLinkElementClass)) {
	if classInitFunc != nil {
		class := (*DOMHTMLLinkElementClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMHTMLLinkElement(obj *coreglib.Object) *DOMHTMLLinkElement {
	return &DOMHTMLLinkElement{
		DOMHTMLElement: DOMHTMLElement{
			DOMElement: DOMElement{
				DOMNode: DOMNode{
					DOMObject: DOMObject{
						Object: obj,
					},
					Object: obj,
					DOMEventTarget: DOMEventTarget{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalDOMHTMLLinkElement(p uintptr) (interface{}, error) {
	return wrapDOMHTMLLinkElement(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Charset: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLLinkElement) Charset() string {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_link_element_get_charset(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Disabled: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMHTMLLinkElement) Disabled() bool {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _cret C.gboolean                  // in

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_link_element_get_disabled(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Href: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLLinkElement) Href() string {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_link_element_get_href(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Hreflang: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLLinkElement) Hreflang() string {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_link_element_get_hreflang(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Media: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLLinkElement) Media() string {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_link_element_get_media(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Rel: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLLinkElement) Rel() string {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_link_element_get_rel(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Rev: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLLinkElement) Rev() string {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_link_element_get_rev(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Sheet: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domStyleSheet: KitDOMStyleSheet.
//
func (self *DOMHTMLLinkElement) Sheet() *DOMStyleSheet {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _cret *C.WebKitDOMStyleSheet      // in

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_link_element_get_sheet(_arg0)
	runtime.KeepAlive(self)

	var _domStyleSheet *DOMStyleSheet // out

	_domStyleSheet = wrapDOMStyleSheet(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domStyleSheet
}

// Sizes: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domdomTokenList: KitDOMDOMTokenList.
//
func (self *DOMHTMLLinkElement) Sizes() *DOMDOMTokenList {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _cret *C.WebKitDOMDOMTokenList    // in

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_link_element_get_sizes(_arg0)
	runtime.KeepAlive(self)

	var _domdomTokenList *DOMDOMTokenList // out

	_domdomTokenList = wrapDOMDOMTokenList(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domdomTokenList
}

// Target: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLLinkElement) Target() string {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_link_element_get_target(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// TypeAttr: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLLinkElement) TypeAttr() string {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_link_element_get_type_attr(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SetCharset: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLLinkElement) SetCharset(value string) {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _arg1 *C.gchar                    // out

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_link_element_set_charset(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetDisabled: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gboolean.
//
func (self *DOMHTMLLinkElement) SetDisabled(value bool) {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _arg1 C.gboolean                  // out

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if value {
		_arg1 = C.TRUE
	}

	C.webkit_dom_html_link_element_set_disabled(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetHref: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLLinkElement) SetHref(value string) {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _arg1 *C.gchar                    // out

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_link_element_set_href(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetHreflang: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLLinkElement) SetHreflang(value string) {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _arg1 *C.gchar                    // out

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_link_element_set_hreflang(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetMedia: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLLinkElement) SetMedia(value string) {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _arg1 *C.gchar                    // out

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_link_element_set_media(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetRel: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLLinkElement) SetRel(value string) {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _arg1 *C.gchar                    // out

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_link_element_set_rel(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetRev: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLLinkElement) SetRev(value string) {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _arg1 *C.gchar                    // out

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_link_element_set_rev(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetSizes: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLLinkElement) SetSizes(value string) {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _arg1 *C.gchar                    // out

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_link_element_set_sizes(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetTarget: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLLinkElement) SetTarget(value string) {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _arg1 *C.gchar                    // out

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_link_element_set_target(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetTypeAttr: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLLinkElement) SetTypeAttr(value string) {
	var _arg0 *C.WebKitDOMHTMLLinkElement // out
	var _arg1 *C.gchar                    // out

	_arg0 = (*C.WebKitDOMHTMLLinkElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_link_element_set_type_attr(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// DOMHTMLLinkElementClass: instance of this type is always passed by reference.
type DOMHTMLLinkElementClass struct {
	*domhtmlLinkElementClass
}

// domhtmlLinkElementClass is the struct that's finalized.
type domhtmlLinkElementClass struct {
	native *C.WebKitDOMHTMLLinkElementClass
}

func (d *DOMHTMLLinkElementClass) ParentClass() *DOMHTMLElementClass {
	valptr := &d.native.parent_class
	var _v *DOMHTMLElementClass // out
	_v = (*DOMHTMLElementClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
