// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMKeyboardEvent = coreglib.Type(C.webkit_dom_keyboard_event_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMKeyboardEvent, F: marshalDOMKeyboardEvent},
	})
}

// DOM_KEYBOARD_EVENT_KEY_LOCATION_LEFT: deprecated: Use JavaScriptCore API
// instead.
const DOM_KEYBOARD_EVENT_KEY_LOCATION_LEFT = 1

// DOM_KEYBOARD_EVENT_KEY_LOCATION_NUMPAD: deprecated: Use JavaScriptCore API
// instead.
const DOM_KEYBOARD_EVENT_KEY_LOCATION_NUMPAD = 3

// DOM_KEYBOARD_EVENT_KEY_LOCATION_RIGHT: deprecated: Use JavaScriptCore API
// instead.
const DOM_KEYBOARD_EVENT_KEY_LOCATION_RIGHT = 2

// DOM_KEYBOARD_EVENT_KEY_LOCATION_STANDARD: deprecated: Use JavaScriptCore API
// instead.
const DOM_KEYBOARD_EVENT_KEY_LOCATION_STANDARD = 0

// DOMKeyboardEventOverrides contains methods that are overridable.
type DOMKeyboardEventOverrides struct {
}

func defaultDOMKeyboardEventOverrides(v *DOMKeyboardEvent) DOMKeyboardEventOverrides {
	return DOMKeyboardEventOverrides{}
}

type DOMKeyboardEvent struct {
	_ [0]func() // equal guard
	DOMUIEvent
}

var (
	_ coreglib.Objector = (*DOMKeyboardEvent)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMKeyboardEvent, *DOMKeyboardEventClass, DOMKeyboardEventOverrides](
		GTypeDOMKeyboardEvent,
		initDOMKeyboardEventClass,
		wrapDOMKeyboardEvent,
		defaultDOMKeyboardEventOverrides,
	)
}

func initDOMKeyboardEventClass(gclass unsafe.Pointer, overrides DOMKeyboardEventOverrides, classInitFunc func(*DOMKeyboardEventClass)) {
	if classInitFunc != nil {
		class := (*DOMKeyboardEventClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMKeyboardEvent(obj *coreglib.Object) *DOMKeyboardEvent {
	return &DOMKeyboardEvent{
		DOMUIEvent: DOMUIEvent{
			DOMEvent: DOMEvent{
				DOMObject: DOMObject{
					Object: obj,
				},
			},
		},
	}
}

func marshalDOMKeyboardEvent(p uintptr) (interface{}, error) {
	return wrapDOMKeyboardEvent(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// AltGraphKey: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMKeyboardEvent) AltGraphKey() bool {
	var _arg0 *C.WebKitDOMKeyboardEvent // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitDOMKeyboardEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_keyboard_event_get_alt_graph_key(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AltKey: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMKeyboardEvent) AltKey() bool {
	var _arg0 *C.WebKitDOMKeyboardEvent // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitDOMKeyboardEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_keyboard_event_get_alt_key(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// CtrlKey: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMKeyboardEvent) CtrlKey() bool {
	var _arg0 *C.WebKitDOMKeyboardEvent // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitDOMKeyboardEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_keyboard_event_get_ctrl_key(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// KeyIdentifier: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMKeyboardEvent) KeyIdentifier() string {
	var _arg0 *C.WebKitDOMKeyboardEvent // out
	var _cret *C.gchar                  // in

	_arg0 = (*C.WebKitDOMKeyboardEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_keyboard_event_get_key_identifier(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// KeyLocation: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gulong: #gulong.
//
func (self *DOMKeyboardEvent) KeyLocation() uint32 {
	var _arg0 *C.WebKitDOMKeyboardEvent // out
	var _cret C.gulong                  // in

	_arg0 = (*C.WebKitDOMKeyboardEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_keyboard_event_get_key_location(_arg0)
	runtime.KeepAlive(self)

	var _gulong uint32 // out

	_gulong = uint32(_cret)

	return _gulong
}

// MetaKey: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMKeyboardEvent) MetaKey() bool {
	var _arg0 *C.WebKitDOMKeyboardEvent // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitDOMKeyboardEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_keyboard_event_get_meta_key(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ModifierState: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - keyIdentifierArg: #gchar.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMKeyboardEvent) ModifierState(keyIdentifierArg string) bool {
	var _arg0 *C.WebKitDOMKeyboardEvent // out
	var _arg1 *C.gchar                  // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitDOMKeyboardEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(keyIdentifierArg)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_keyboard_event_get_modifier_state(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(keyIdentifierArg)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShiftKey: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMKeyboardEvent) ShiftKey() bool {
	var _arg0 *C.WebKitDOMKeyboardEvent // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitDOMKeyboardEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_keyboard_event_get_shift_key(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// InitKeyboardEvent: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - typ: #gchar.
//   - canBubble: #gboolean.
//   - cancelable: #gboolean.
//   - view: KitDOMDOMWindow.
//   - keyIdentifier: #gchar.
//   - location: #gulong.
//   - ctrlKey: #gboolean.
//   - altKey: #gboolean.
//   - shiftKey: #gboolean.
//   - metaKey: #gboolean.
//   - altGraphKey: #gboolean.
//
func (self *DOMKeyboardEvent) InitKeyboardEvent(typ string, canBubble, cancelable bool, view *DOMDOMWindow, keyIdentifier string, location uint32, ctrlKey, altKey, shiftKey, metaKey, altGraphKey bool) {
	var _arg0 *C.WebKitDOMKeyboardEvent // out
	var _arg1 *C.gchar                  // out
	var _arg2 C.gboolean                // out
	var _arg3 C.gboolean                // out
	var _arg4 *C.WebKitDOMDOMWindow     // out
	var _arg5 *C.gchar                  // out
	var _arg6 C.gulong                  // out
	var _arg7 C.gboolean                // out
	var _arg8 C.gboolean                // out
	var _arg9 C.gboolean                // out
	var _arg10 C.gboolean               // out
	var _arg11 C.gboolean               // out

	_arg0 = (*C.WebKitDOMKeyboardEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(typ)))
	defer C.free(unsafe.Pointer(_arg1))
	if canBubble {
		_arg2 = C.TRUE
	}
	if cancelable {
		_arg3 = C.TRUE
	}
	_arg4 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(view).Native()))
	_arg5 = (*C.gchar)(unsafe.Pointer(C.CString(keyIdentifier)))
	defer C.free(unsafe.Pointer(_arg5))
	_arg6 = C.gulong(location)
	if ctrlKey {
		_arg7 = C.TRUE
	}
	if altKey {
		_arg8 = C.TRUE
	}
	if shiftKey {
		_arg9 = C.TRUE
	}
	if metaKey {
		_arg10 = C.TRUE
	}
	if altGraphKey {
		_arg11 = C.TRUE
	}

	C.webkit_dom_keyboard_event_init_keyboard_event(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10, _arg11)
	runtime.KeepAlive(self)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(canBubble)
	runtime.KeepAlive(cancelable)
	runtime.KeepAlive(view)
	runtime.KeepAlive(keyIdentifier)
	runtime.KeepAlive(location)
	runtime.KeepAlive(ctrlKey)
	runtime.KeepAlive(altKey)
	runtime.KeepAlive(shiftKey)
	runtime.KeepAlive(metaKey)
	runtime.KeepAlive(altGraphKey)
}

// DOMKeyboardEventClass: instance of this type is always passed by reference.
type DOMKeyboardEventClass struct {
	*domKeyboardEventClass
}

// domKeyboardEventClass is the struct that's finalized.
type domKeyboardEventClass struct {
	native *C.WebKitDOMKeyboardEventClass
}

func (d *DOMKeyboardEventClass) ParentClass() *DOMUIEventClass {
	valptr := &d.native.parent_class
	var _v *DOMUIEventClass // out
	_v = (*DOMUIEventClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
