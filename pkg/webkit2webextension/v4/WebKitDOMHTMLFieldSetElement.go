// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMHTMLFieldSetElement = coreglib.Type(C.webkit_dom_html_field_set_element_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMHTMLFieldSetElement, F: marshalDOMHTMLFieldSetElement},
	})
}

// DOMHTMLFieldSetElementOverrides contains methods that are overridable.
type DOMHTMLFieldSetElementOverrides struct {
}

func defaultDOMHTMLFieldSetElementOverrides(v *DOMHTMLFieldSetElement) DOMHTMLFieldSetElementOverrides {
	return DOMHTMLFieldSetElementOverrides{}
}

type DOMHTMLFieldSetElement struct {
	_ [0]func() // equal guard
	DOMHTMLElement
}

var (
	_ coreglib.Objector = (*DOMHTMLFieldSetElement)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMHTMLFieldSetElement, *DOMHTMLFieldSetElementClass, DOMHTMLFieldSetElementOverrides](
		GTypeDOMHTMLFieldSetElement,
		initDOMHTMLFieldSetElementClass,
		wrapDOMHTMLFieldSetElement,
		defaultDOMHTMLFieldSetElementOverrides,
	)
}

func initDOMHTMLFieldSetElementClass(gclass unsafe.Pointer, overrides DOMHTMLFieldSetElementOverrides, classInitFunc func(*DOMHTMLFieldSetElementClass)) {
	if classInitFunc != nil {
		class := (*DOMHTMLFieldSetElementClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMHTMLFieldSetElement(obj *coreglib.Object) *DOMHTMLFieldSetElement {
	return &DOMHTMLFieldSetElement{
		DOMHTMLElement: DOMHTMLElement{
			DOMElement: DOMElement{
				DOMNode: DOMNode{
					DOMObject: DOMObject{
						Object: obj,
					},
					Object: obj,
					DOMEventTarget: DOMEventTarget{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalDOMHTMLFieldSetElement(p uintptr) (interface{}, error) {
	return wrapDOMHTMLFieldSetElement(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Form: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlFormElement: KitDOMHTMLFormElement.
//
func (self *DOMHTMLFieldSetElement) Form() *DOMHTMLFormElement {
	var _arg0 *C.WebKitDOMHTMLFieldSetElement // out
	var _cret *C.WebKitDOMHTMLFormElement     // in

	_arg0 = (*C.WebKitDOMHTMLFieldSetElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_field_set_element_get_form(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlFormElement *DOMHTMLFormElement // out

	_domhtmlFormElement = wrapDOMHTMLFormElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domhtmlFormElement
}

// DOMHTMLFieldSetElementClass: instance of this type is always passed by
// reference.
type DOMHTMLFieldSetElementClass struct {
	*domhtmlFieldSetElementClass
}

// domhtmlFieldSetElementClass is the struct that's finalized.
type domhtmlFieldSetElementClass struct {
	native *C.WebKitDOMHTMLFieldSetElementClass
}

func (d *DOMHTMLFieldSetElementClass) ParentClass() *DOMHTMLElementClass {
	valptr := &d.native.parent_class
	var _v *DOMHTMLElementClass // out
	_v = (*DOMHTMLElementClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
