// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMObject = coreglib.Type(C.webkit_dom_object_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMObject, F: marshalDOMObject},
	})
}

// DOMObjectOverrides contains methods that are overridable.
type DOMObjectOverrides struct {
}

func defaultDOMObjectOverrides(v *DOMObject) DOMObjectOverrides {
	return DOMObjectOverrides{}
}

type DOMObject struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*DOMObject)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMObject, *DOMObjectClass, DOMObjectOverrides](
		GTypeDOMObject,
		initDOMObjectClass,
		wrapDOMObject,
		defaultDOMObjectOverrides,
	)
}

func initDOMObjectClass(gclass unsafe.Pointer, overrides DOMObjectOverrides, classInitFunc func(*DOMObjectClass)) {
	if classInitFunc != nil {
		class := (*DOMObjectClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMObject(obj *coreglib.Object) *DOMObject {
	return &DOMObject{
		Object: obj,
	}
}

func marshalDOMObject(p uintptr) (interface{}, error) {
	return wrapDOMObject(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// DOMObjectClass: instance of this type is always passed by reference.
type DOMObjectClass struct {
	*domObjectClass
}

// domObjectClass is the struct that's finalized.
type domObjectClass struct {
	native *C.WebKitDOMObjectClass
}
