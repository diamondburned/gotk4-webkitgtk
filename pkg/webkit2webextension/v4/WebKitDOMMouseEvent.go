// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMMouseEvent = coreglib.Type(C.webkit_dom_mouse_event_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMMouseEvent, F: marshalDOMMouseEvent},
	})
}

// DOMMouseEventOverrides contains methods that are overridable.
type DOMMouseEventOverrides struct {
}

func defaultDOMMouseEventOverrides(v *DOMMouseEvent) DOMMouseEventOverrides {
	return DOMMouseEventOverrides{}
}

type DOMMouseEvent struct {
	_ [0]func() // equal guard
	DOMUIEvent
}

var (
	_ coreglib.Objector = (*DOMMouseEvent)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMMouseEvent, *DOMMouseEventClass, DOMMouseEventOverrides](
		GTypeDOMMouseEvent,
		initDOMMouseEventClass,
		wrapDOMMouseEvent,
		defaultDOMMouseEventOverrides,
	)
}

func initDOMMouseEventClass(gclass unsafe.Pointer, overrides DOMMouseEventOverrides, classInitFunc func(*DOMMouseEventClass)) {
	if classInitFunc != nil {
		class := (*DOMMouseEventClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMMouseEvent(obj *coreglib.Object) *DOMMouseEvent {
	return &DOMMouseEvent{
		DOMUIEvent: DOMUIEvent{
			DOMEvent: DOMEvent{
				DOMObject: DOMObject{
					Object: obj,
				},
			},
		},
	}
}

func marshalDOMMouseEvent(p uintptr) (interface{}, error) {
	return wrapDOMMouseEvent(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// AltKey: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMMouseEvent) AltKey() bool {
	var _arg0 *C.WebKitDOMMouseEvent // out
	var _cret C.gboolean             // in

	_arg0 = (*C.WebKitDOMMouseEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_mouse_event_get_alt_key(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Button: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gushort: #gushort.
//
func (self *DOMMouseEvent) Button() uint16 {
	var _arg0 *C.WebKitDOMMouseEvent // out
	var _cret C.gushort              // in

	_arg0 = (*C.WebKitDOMMouseEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_mouse_event_get_button(_arg0)
	runtime.KeepAlive(self)

	var _gushort uint16 // out

	_gushort = uint16(_cret)

	return _gushort
}

// ClientX: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMMouseEvent) ClientX() int32 {
	var _arg0 *C.WebKitDOMMouseEvent // out
	var _cret C.glong                // in

	_arg0 = (*C.WebKitDOMMouseEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_mouse_event_get_client_x(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// ClientY: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMMouseEvent) ClientY() int32 {
	var _arg0 *C.WebKitDOMMouseEvent // out
	var _cret C.glong                // in

	_arg0 = (*C.WebKitDOMMouseEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_mouse_event_get_client_y(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// CtrlKey: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMMouseEvent) CtrlKey() bool {
	var _arg0 *C.WebKitDOMMouseEvent // out
	var _cret C.gboolean             // in

	_arg0 = (*C.WebKitDOMMouseEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_mouse_event_get_ctrl_key(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// FromElement: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMMouseEvent) FromElement() *DOMNode {
	var _arg0 *C.WebKitDOMMouseEvent // out
	var _cret *C.WebKitDOMNode       // in

	_arg0 = (*C.WebKitDOMMouseEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_mouse_event_get_from_element(_arg0)
	runtime.KeepAlive(self)

	var _domNode *DOMNode // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))

	return _domNode
}

// MetaKey: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMMouseEvent) MetaKey() bool {
	var _arg0 *C.WebKitDOMMouseEvent // out
	var _cret C.gboolean             // in

	_arg0 = (*C.WebKitDOMMouseEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_mouse_event_get_meta_key(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// OffsetX: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMMouseEvent) OffsetX() int32 {
	var _arg0 *C.WebKitDOMMouseEvent // out
	var _cret C.glong                // in

	_arg0 = (*C.WebKitDOMMouseEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_mouse_event_get_offset_x(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// OffsetY: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMMouseEvent) OffsetY() int32 {
	var _arg0 *C.WebKitDOMMouseEvent // out
	var _cret C.glong                // in

	_arg0 = (*C.WebKitDOMMouseEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_mouse_event_get_offset_y(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// RelatedTarget: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domEventTarget: KitDOMEventTarget.
//
func (self *DOMMouseEvent) RelatedTarget() *DOMEventTarget {
	var _arg0 *C.WebKitDOMMouseEvent  // out
	var _cret *C.WebKitDOMEventTarget // in

	_arg0 = (*C.WebKitDOMMouseEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_mouse_event_get_related_target(_arg0)
	runtime.KeepAlive(self)

	var _domEventTarget *DOMEventTarget // out

	_domEventTarget = wrapDOMEventTarget(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domEventTarget
}

// ScreenX: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMMouseEvent) ScreenX() int32 {
	var _arg0 *C.WebKitDOMMouseEvent // out
	var _cret C.glong                // in

	_arg0 = (*C.WebKitDOMMouseEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_mouse_event_get_screen_x(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// ScreenY: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMMouseEvent) ScreenY() int32 {
	var _arg0 *C.WebKitDOMMouseEvent // out
	var _cret C.glong                // in

	_arg0 = (*C.WebKitDOMMouseEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_mouse_event_get_screen_y(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// ShiftKey: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMMouseEvent) ShiftKey() bool {
	var _arg0 *C.WebKitDOMMouseEvent // out
	var _cret C.gboolean             // in

	_arg0 = (*C.WebKitDOMMouseEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_mouse_event_get_shift_key(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ToElement: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMMouseEvent) ToElement() *DOMNode {
	var _arg0 *C.WebKitDOMMouseEvent // out
	var _cret *C.WebKitDOMNode       // in

	_arg0 = (*C.WebKitDOMMouseEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_mouse_event_get_to_element(_arg0)
	runtime.KeepAlive(self)

	var _domNode *DOMNode // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))

	return _domNode
}

// X: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMMouseEvent) X() int32 {
	var _arg0 *C.WebKitDOMMouseEvent // out
	var _cret C.glong                // in

	_arg0 = (*C.WebKitDOMMouseEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_mouse_event_get_x(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// Y: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMMouseEvent) Y() int32 {
	var _arg0 *C.WebKitDOMMouseEvent // out
	var _cret C.glong                // in

	_arg0 = (*C.WebKitDOMMouseEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_mouse_event_get_y(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// InitMouseEvent: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - typ: #gchar.
//   - canBubble: #gboolean.
//   - cancelable: #gboolean.
//   - view: KitDOMDOMWindow.
//   - detail: #glong.
//   - screenX: #glong.
//   - screenY: #glong.
//   - clientX: #glong.
//   - clientY: #glong.
//   - ctrlKey: #gboolean.
//   - altKey: #gboolean.
//   - shiftKey: #gboolean.
//   - metaKey: #gboolean.
//   - button: #gushort.
//   - relatedTarget: KitDOMEventTarget.
//
func (self *DOMMouseEvent) InitMouseEvent(typ string, canBubble, cancelable bool, view *DOMDOMWindow, detail, screenX, screenY, clientX, clientY int32, ctrlKey, altKey, shiftKey, metaKey bool, button uint16, relatedTarget DOMEventTargetter) {
	var _arg0 *C.WebKitDOMMouseEvent   // out
	var _arg1 *C.gchar                 // out
	var _arg2 C.gboolean               // out
	var _arg3 C.gboolean               // out
	var _arg4 *C.WebKitDOMDOMWindow    // out
	var _arg5 C.glong                  // out
	var _arg6 C.glong                  // out
	var _arg7 C.glong                  // out
	var _arg8 C.glong                  // out
	var _arg9 C.glong                  // out
	var _arg10 C.gboolean              // out
	var _arg11 C.gboolean              // out
	var _arg12 C.gboolean              // out
	var _arg13 C.gboolean              // out
	var _arg14 C.gushort               // out
	var _arg15 *C.WebKitDOMEventTarget // out

	_arg0 = (*C.WebKitDOMMouseEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(typ)))
	defer C.free(unsafe.Pointer(_arg1))
	if canBubble {
		_arg2 = C.TRUE
	}
	if cancelable {
		_arg3 = C.TRUE
	}
	_arg4 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(view).Native()))
	_arg5 = C.glong(detail)
	_arg6 = C.glong(screenX)
	_arg7 = C.glong(screenY)
	_arg8 = C.glong(clientX)
	_arg9 = C.glong(clientY)
	if ctrlKey {
		_arg10 = C.TRUE
	}
	if altKey {
		_arg11 = C.TRUE
	}
	if shiftKey {
		_arg12 = C.TRUE
	}
	if metaKey {
		_arg13 = C.TRUE
	}
	_arg14 = C.gushort(button)
	_arg15 = (*C.WebKitDOMEventTarget)(unsafe.Pointer(coreglib.InternObject(relatedTarget).Native()))

	C.webkit_dom_mouse_event_init_mouse_event(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7, _arg8, _arg9, _arg10, _arg11, _arg12, _arg13, _arg14, _arg15)
	runtime.KeepAlive(self)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(canBubble)
	runtime.KeepAlive(cancelable)
	runtime.KeepAlive(view)
	runtime.KeepAlive(detail)
	runtime.KeepAlive(screenX)
	runtime.KeepAlive(screenY)
	runtime.KeepAlive(clientX)
	runtime.KeepAlive(clientY)
	runtime.KeepAlive(ctrlKey)
	runtime.KeepAlive(altKey)
	runtime.KeepAlive(shiftKey)
	runtime.KeepAlive(metaKey)
	runtime.KeepAlive(button)
	runtime.KeepAlive(relatedTarget)
}

// DOMMouseEventClass: instance of this type is always passed by reference.
type DOMMouseEventClass struct {
	*domMouseEventClass
}

// domMouseEventClass is the struct that's finalized.
type domMouseEventClass struct {
	native *C.WebKitDOMMouseEventClass
}

func (d *DOMMouseEventClass) ParentClass() *DOMUIEventClass {
	valptr := &d.native.parent_class
	var _v *DOMUIEventClass // out
	_v = (*DOMUIEventClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
