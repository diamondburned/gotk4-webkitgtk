// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMDocumentType = coreglib.Type(C.webkit_dom_document_type_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMDocumentType, F: marshalDOMDocumentType},
	})
}

// DOMDocumentTypeOverrides contains methods that are overridable.
type DOMDocumentTypeOverrides struct {
}

func defaultDOMDocumentTypeOverrides(v *DOMDocumentType) DOMDocumentTypeOverrides {
	return DOMDocumentTypeOverrides{}
}

type DOMDocumentType struct {
	_ [0]func() // equal guard
	DOMNode
}

var (
	_ coreglib.Objector = (*DOMDocumentType)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMDocumentType, *DOMDocumentTypeClass, DOMDocumentTypeOverrides](
		GTypeDOMDocumentType,
		initDOMDocumentTypeClass,
		wrapDOMDocumentType,
		defaultDOMDocumentTypeOverrides,
	)
}

func initDOMDocumentTypeClass(gclass unsafe.Pointer, overrides DOMDocumentTypeOverrides, classInitFunc func(*DOMDocumentTypeClass)) {
	if classInitFunc != nil {
		class := (*DOMDocumentTypeClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMDocumentType(obj *coreglib.Object) *DOMDocumentType {
	return &DOMDocumentType{
		DOMNode: DOMNode{
			DOMObject: DOMObject{
				Object: obj,
			},
			Object: obj,
			DOMEventTarget: DOMEventTarget{
				Object: obj,
			},
		},
	}
}

func marshalDOMDocumentType(p uintptr) (interface{}, error) {
	return wrapDOMDocumentType(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Entities: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domNamedNodeMap: KitDOMNamedNodeMap.
//
func (self *DOMDocumentType) Entities() *DOMNamedNodeMap {
	var _arg0 *C.WebKitDOMDocumentType // out
	var _cret *C.WebKitDOMNamedNodeMap // in

	_arg0 = (*C.WebKitDOMDocumentType)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_type_get_entities(_arg0)
	runtime.KeepAlive(self)

	var _domNamedNodeMap *DOMNamedNodeMap // out

	_domNamedNodeMap = wrapDOMNamedNodeMap(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domNamedNodeMap
}

// InternalSubset: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocumentType) InternalSubset() string {
	var _arg0 *C.WebKitDOMDocumentType // out
	var _cret *C.gchar                 // in

	_arg0 = (*C.WebKitDOMDocumentType)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_type_get_internal_subset(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Name: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocumentType) Name() string {
	var _arg0 *C.WebKitDOMDocumentType // out
	var _cret *C.gchar                 // in

	_arg0 = (*C.WebKitDOMDocumentType)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_type_get_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Notations: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domNamedNodeMap: KitDOMNamedNodeMap.
//
func (self *DOMDocumentType) Notations() *DOMNamedNodeMap {
	var _arg0 *C.WebKitDOMDocumentType // out
	var _cret *C.WebKitDOMNamedNodeMap // in

	_arg0 = (*C.WebKitDOMDocumentType)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_type_get_notations(_arg0)
	runtime.KeepAlive(self)

	var _domNamedNodeMap *DOMNamedNodeMap // out

	_domNamedNodeMap = wrapDOMNamedNodeMap(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domNamedNodeMap
}

// PublicID: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocumentType) PublicID() string {
	var _arg0 *C.WebKitDOMDocumentType // out
	var _cret *C.gchar                 // in

	_arg0 = (*C.WebKitDOMDocumentType)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_type_get_public_id(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SystemID: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocumentType) SystemID() string {
	var _arg0 *C.WebKitDOMDocumentType // out
	var _cret *C.gchar                 // in

	_arg0 = (*C.WebKitDOMDocumentType)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_type_get_system_id(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// DOMDocumentTypeClass: instance of this type is always passed by reference.
type DOMDocumentTypeClass struct {
	*domDocumentTypeClass
}

// domDocumentTypeClass is the struct that's finalized.
type domDocumentTypeClass struct {
	native *C.WebKitDOMDocumentTypeClass
}

func (d *DOMDocumentTypeClass) ParentClass() *DOMNodeClass {
	valptr := &d.native.parent_class
	var _v *DOMNodeClass // out
	_v = (*DOMNodeClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
