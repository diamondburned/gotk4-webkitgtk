// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMHTMLTableRowElement = coreglib.Type(C.webkit_dom_html_table_row_element_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMHTMLTableRowElement, F: marshalDOMHTMLTableRowElement},
	})
}

// DOMHTMLTableRowElementOverrides contains methods that are overridable.
type DOMHTMLTableRowElementOverrides struct {
}

func defaultDOMHTMLTableRowElementOverrides(v *DOMHTMLTableRowElement) DOMHTMLTableRowElementOverrides {
	return DOMHTMLTableRowElementOverrides{}
}

type DOMHTMLTableRowElement struct {
	_ [0]func() // equal guard
	DOMHTMLElement
}

var (
	_ coreglib.Objector = (*DOMHTMLTableRowElement)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMHTMLTableRowElement, *DOMHTMLTableRowElementClass, DOMHTMLTableRowElementOverrides](
		GTypeDOMHTMLTableRowElement,
		initDOMHTMLTableRowElementClass,
		wrapDOMHTMLTableRowElement,
		defaultDOMHTMLTableRowElementOverrides,
	)
}

func initDOMHTMLTableRowElementClass(gclass unsafe.Pointer, overrides DOMHTMLTableRowElementOverrides, classInitFunc func(*DOMHTMLTableRowElementClass)) {
	if classInitFunc != nil {
		class := (*DOMHTMLTableRowElementClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMHTMLTableRowElement(obj *coreglib.Object) *DOMHTMLTableRowElement {
	return &DOMHTMLTableRowElement{
		DOMHTMLElement: DOMHTMLElement{
			DOMElement: DOMElement{
				DOMNode: DOMNode{
					DOMObject: DOMObject{
						Object: obj,
					},
					Object: obj,
					DOMEventTarget: DOMEventTarget{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalDOMHTMLTableRowElement(p uintptr) (interface{}, error) {
	return wrapDOMHTMLTableRowElement(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// DeleteCell: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - index: #glong.
//
func (self *DOMHTMLTableRowElement) DeleteCell(index int32) error {
	var _arg0 *C.WebKitDOMHTMLTableRowElement // out
	var _arg1 C.glong                         // out
	var _cerr *C.GError                       // in

	_arg0 = (*C.WebKitDOMHTMLTableRowElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(index)

	C.webkit_dom_html_table_row_element_delete_cell(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(index)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Align: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableRowElement) Align() string {
	var _arg0 *C.WebKitDOMHTMLTableRowElement // out
	var _cret *C.gchar                        // in

	_arg0 = (*C.WebKitDOMHTMLTableRowElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_row_element_get_align(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// BgColor: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableRowElement) BgColor() string {
	var _arg0 *C.WebKitDOMHTMLTableRowElement // out
	var _cret *C.gchar                        // in

	_arg0 = (*C.WebKitDOMHTMLTableRowElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_row_element_get_bg_color(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Cells: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMHTMLTableRowElement) Cells() *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMHTMLTableRowElement // out
	var _cret *C.WebKitDOMHTMLCollection      // in

	_arg0 = (*C.WebKitDOMHTMLTableRowElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_row_element_get_cells(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// Ch: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableRowElement) Ch() string {
	var _arg0 *C.WebKitDOMHTMLTableRowElement // out
	var _cret *C.gchar                        // in

	_arg0 = (*C.WebKitDOMHTMLTableRowElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_row_element_get_ch(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ChOff: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableRowElement) ChOff() string {
	var _arg0 *C.WebKitDOMHTMLTableRowElement // out
	var _cret *C.gchar                        // in

	_arg0 = (*C.WebKitDOMHTMLTableRowElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_row_element_get_ch_off(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// RowIndex: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMHTMLTableRowElement) RowIndex() int32 {
	var _arg0 *C.WebKitDOMHTMLTableRowElement // out
	var _cret C.glong                         // in

	_arg0 = (*C.WebKitDOMHTMLTableRowElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_row_element_get_row_index(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// SectionRowIndex: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMHTMLTableRowElement) SectionRowIndex() int32 {
	var _arg0 *C.WebKitDOMHTMLTableRowElement // out
	var _cret C.glong                         // in

	_arg0 = (*C.WebKitDOMHTMLTableRowElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_row_element_get_section_row_index(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// VAlign: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableRowElement) VAlign() string {
	var _arg0 *C.WebKitDOMHTMLTableRowElement // out
	var _cret *C.gchar                        // in

	_arg0 = (*C.WebKitDOMHTMLTableRowElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_row_element_get_v_align(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// InsertCell: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - index: #glong.
//
// The function returns the following values:
//
//   - domhtmlElement: KitDOMHTMLElement.
//
func (self *DOMHTMLTableRowElement) InsertCell(index int32) (*DOMHTMLElement, error) {
	var _arg0 *C.WebKitDOMHTMLTableRowElement // out
	var _arg1 C.glong                         // out
	var _cret *C.WebKitDOMHTMLElement         // in
	var _cerr *C.GError                       // in

	_arg0 = (*C.WebKitDOMHTMLTableRowElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(index)

	_cret = C.webkit_dom_html_table_row_element_insert_cell(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(index)

	var _domhtmlElement *DOMHTMLElement // out
	var _goerr error                    // out

	_domhtmlElement = wrapDOMHTMLElement(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domhtmlElement, _goerr
}

// SetAlign: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableRowElement) SetAlign(value string) {
	var _arg0 *C.WebKitDOMHTMLTableRowElement // out
	var _arg1 *C.gchar                        // out

	_arg0 = (*C.WebKitDOMHTMLTableRowElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_row_element_set_align(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetBgColor: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableRowElement) SetBgColor(value string) {
	var _arg0 *C.WebKitDOMHTMLTableRowElement // out
	var _arg1 *C.gchar                        // out

	_arg0 = (*C.WebKitDOMHTMLTableRowElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_row_element_set_bg_color(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetCh: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableRowElement) SetCh(value string) {
	var _arg0 *C.WebKitDOMHTMLTableRowElement // out
	var _arg1 *C.gchar                        // out

	_arg0 = (*C.WebKitDOMHTMLTableRowElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_row_element_set_ch(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetChOff: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableRowElement) SetChOff(value string) {
	var _arg0 *C.WebKitDOMHTMLTableRowElement // out
	var _arg1 *C.gchar                        // out

	_arg0 = (*C.WebKitDOMHTMLTableRowElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_row_element_set_ch_off(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetVAlign: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableRowElement) SetVAlign(value string) {
	var _arg0 *C.WebKitDOMHTMLTableRowElement // out
	var _arg1 *C.gchar                        // out

	_arg0 = (*C.WebKitDOMHTMLTableRowElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_row_element_set_v_align(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// DOMHTMLTableRowElementClass: instance of this type is always passed by
// reference.
type DOMHTMLTableRowElementClass struct {
	*domhtmlTableRowElementClass
}

// domhtmlTableRowElementClass is the struct that's finalized.
type domhtmlTableRowElementClass struct {
	native *C.WebKitDOMHTMLTableRowElementClass
}

func (d *DOMHTMLTableRowElementClass) ParentClass() *DOMHTMLElementClass {
	valptr := &d.native.parent_class
	var _v *DOMHTMLElementClass // out
	_v = (*DOMHTMLElementClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
