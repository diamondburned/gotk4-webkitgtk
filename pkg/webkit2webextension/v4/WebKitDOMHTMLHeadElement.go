// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMHTMLHeadElement = coreglib.Type(C.webkit_dom_html_head_element_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMHTMLHeadElement, F: marshalDOMHTMLHeadElement},
	})
}

// DOMHTMLHeadElementOverrides contains methods that are overridable.
type DOMHTMLHeadElementOverrides struct {
}

func defaultDOMHTMLHeadElementOverrides(v *DOMHTMLHeadElement) DOMHTMLHeadElementOverrides {
	return DOMHTMLHeadElementOverrides{}
}

type DOMHTMLHeadElement struct {
	_ [0]func() // equal guard
	DOMHTMLElement
}

var (
	_ coreglib.Objector = (*DOMHTMLHeadElement)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMHTMLHeadElement, *DOMHTMLHeadElementClass, DOMHTMLHeadElementOverrides](
		GTypeDOMHTMLHeadElement,
		initDOMHTMLHeadElementClass,
		wrapDOMHTMLHeadElement,
		defaultDOMHTMLHeadElementOverrides,
	)
}

func initDOMHTMLHeadElementClass(gclass unsafe.Pointer, overrides DOMHTMLHeadElementOverrides, classInitFunc func(*DOMHTMLHeadElementClass)) {
	if classInitFunc != nil {
		class := (*DOMHTMLHeadElementClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMHTMLHeadElement(obj *coreglib.Object) *DOMHTMLHeadElement {
	return &DOMHTMLHeadElement{
		DOMHTMLElement: DOMHTMLElement{
			DOMElement: DOMElement{
				DOMNode: DOMNode{
					DOMObject: DOMObject{
						Object: obj,
					},
					Object: obj,
					DOMEventTarget: DOMEventTarget{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalDOMHTMLHeadElement(p uintptr) (interface{}, error) {
	return wrapDOMHTMLHeadElement(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Profile: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLHeadElement) Profile() string {
	var _arg0 *C.WebKitDOMHTMLHeadElement // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.WebKitDOMHTMLHeadElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_head_element_get_profile(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SetProfile: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLHeadElement) SetProfile(value string) {
	var _arg0 *C.WebKitDOMHTMLHeadElement // out
	var _arg1 *C.gchar                    // out

	_arg0 = (*C.WebKitDOMHTMLHeadElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_head_element_set_profile(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// DOMHTMLHeadElementClass: instance of this type is always passed by reference.
type DOMHTMLHeadElementClass struct {
	*domhtmlHeadElementClass
}

// domhtmlHeadElementClass is the struct that's finalized.
type domhtmlHeadElementClass struct {
	native *C.WebKitDOMHTMLHeadElementClass
}

func (d *DOMHTMLHeadElementClass) ParentClass() *DOMHTMLElementClass {
	valptr := &d.native.parent_class
	var _v *DOMHTMLElementClass // out
	_v = (*DOMHTMLElementClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
