// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMHTMLAppletElement = coreglib.Type(C.webkit_dom_html_applet_element_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMHTMLAppletElement, F: marshalDOMHTMLAppletElement},
	})
}

// DOMHTMLAppletElementOverrides contains methods that are overridable.
type DOMHTMLAppletElementOverrides struct {
}

func defaultDOMHTMLAppletElementOverrides(v *DOMHTMLAppletElement) DOMHTMLAppletElementOverrides {
	return DOMHTMLAppletElementOverrides{}
}

type DOMHTMLAppletElement struct {
	_ [0]func() // equal guard
	DOMHTMLElement
}

var (
	_ coreglib.Objector = (*DOMHTMLAppletElement)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMHTMLAppletElement, *DOMHTMLAppletElementClass, DOMHTMLAppletElementOverrides](
		GTypeDOMHTMLAppletElement,
		initDOMHTMLAppletElementClass,
		wrapDOMHTMLAppletElement,
		defaultDOMHTMLAppletElementOverrides,
	)
}

func initDOMHTMLAppletElementClass(gclass unsafe.Pointer, overrides DOMHTMLAppletElementOverrides, classInitFunc func(*DOMHTMLAppletElementClass)) {
	if classInitFunc != nil {
		class := (*DOMHTMLAppletElementClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMHTMLAppletElement(obj *coreglib.Object) *DOMHTMLAppletElement {
	return &DOMHTMLAppletElement{
		DOMHTMLElement: DOMHTMLElement{
			DOMElement: DOMElement{
				DOMNode: DOMNode{
					DOMObject: DOMObject{
						Object: obj,
					},
					Object: obj,
					DOMEventTarget: DOMEventTarget{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalDOMHTMLAppletElement(p uintptr) (interface{}, error) {
	return wrapDOMHTMLAppletElement(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Align: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLAppletElement) Align() string {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_applet_element_get_align(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Alt: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLAppletElement) Alt() string {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_applet_element_get_alt(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Archive: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLAppletElement) Archive() string {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_applet_element_get_archive(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Code: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLAppletElement) Code() string {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_applet_element_get_code(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// CodeBase: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLAppletElement) CodeBase() string {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_applet_element_get_code_base(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Height: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLAppletElement) Height() string {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_applet_element_get_height(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Hspace: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMHTMLAppletElement) Hspace() int32 {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _cret C.glong                       // in

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_applet_element_get_hspace(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// Name: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLAppletElement) Name() string {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_applet_element_get_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Object: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLAppletElement) Object() string {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_applet_element_get_object(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Vspace: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMHTMLAppletElement) Vspace() int32 {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _cret C.glong                       // in

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_applet_element_get_vspace(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// Width: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLAppletElement) Width() string {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_applet_element_get_width(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SetAlign: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLAppletElement) SetAlign(value string) {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_applet_element_set_align(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetAlt: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLAppletElement) SetAlt(value string) {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_applet_element_set_alt(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetArchive: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLAppletElement) SetArchive(value string) {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_applet_element_set_archive(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetCode: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLAppletElement) SetCode(value string) {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_applet_element_set_code(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetCodeBase: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLAppletElement) SetCodeBase(value string) {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_applet_element_set_code_base(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetHeight: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLAppletElement) SetHeight(value string) {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_applet_element_set_height(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetHspace: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #glong.
//
func (self *DOMHTMLAppletElement) SetHspace(value int32) {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _arg1 C.glong                       // out

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(value)

	C.webkit_dom_html_applet_element_set_hspace(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetName: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLAppletElement) SetName(value string) {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_applet_element_set_name(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetObject: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLAppletElement) SetObject(value string) {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_applet_element_set_object(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetVspace: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #glong.
//
func (self *DOMHTMLAppletElement) SetVspace(value int32) {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _arg1 C.glong                       // out

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(value)

	C.webkit_dom_html_applet_element_set_vspace(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetWidth: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLAppletElement) SetWidth(value string) {
	var _arg0 *C.WebKitDOMHTMLAppletElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLAppletElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_applet_element_set_width(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// DOMHTMLAppletElementClass: instance of this type is always passed by
// reference.
type DOMHTMLAppletElementClass struct {
	*domhtmlAppletElementClass
}

// domhtmlAppletElementClass is the struct that's finalized.
type domhtmlAppletElementClass struct {
	native *C.WebKitDOMHTMLAppletElementClass
}

func (d *DOMHTMLAppletElementClass) ParentClass() *DOMHTMLElementClass {
	valptr := &d.native.parent_class
	var _v *DOMHTMLElementClass // out
	_v = (*DOMHTMLElementClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
