// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMCSSValue = coreglib.Type(C.webkit_dom_css_value_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMCSSValue, F: marshalDOMCSSValue},
	})
}

// DOM_CSS_VALUE_CSS_CUSTOM: deprecated: Use JavaScriptCore API instead.
const DOM_CSS_VALUE_CSS_CUSTOM = 3

// DOM_CSS_VALUE_CSS_INHERIT: deprecated: Use JavaScriptCore API instead.
const DOM_CSS_VALUE_CSS_INHERIT = 0

// DOM_CSS_VALUE_CSS_PRIMITIVE_VALUE: deprecated: Use JavaScriptCore API
// instead.
const DOM_CSS_VALUE_CSS_PRIMITIVE_VALUE = 1

// DOM_CSS_VALUE_CSS_VALUE_LIST: deprecated: Use JavaScriptCore API instead.
const DOM_CSS_VALUE_CSS_VALUE_LIST = 2

// DOMCSSValueOverrides contains methods that are overridable.
type DOMCSSValueOverrides struct {
}

func defaultDOMCSSValueOverrides(v *DOMCSSValue) DOMCSSValueOverrides {
	return DOMCSSValueOverrides{}
}

type DOMCSSValue struct {
	_ [0]func() // equal guard
	DOMObject
}

var (
	_ coreglib.Objector = (*DOMCSSValue)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMCSSValue, *DOMCSSValueClass, DOMCSSValueOverrides](
		GTypeDOMCSSValue,
		initDOMCSSValueClass,
		wrapDOMCSSValue,
		defaultDOMCSSValueOverrides,
	)
}

func initDOMCSSValueClass(gclass unsafe.Pointer, overrides DOMCSSValueOverrides, classInitFunc func(*DOMCSSValueClass)) {
	if classInitFunc != nil {
		class := (*DOMCSSValueClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMCSSValue(obj *coreglib.Object) *DOMCSSValue {
	return &DOMCSSValue{
		DOMObject: DOMObject{
			Object: obj,
		},
	}
}

func marshalDOMCSSValue(p uintptr) (interface{}, error) {
	return wrapDOMCSSValue(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// CSSText: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMCSSValue) CSSText() string {
	var _arg0 *C.WebKitDOMCSSValue // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMCSSValue)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_css_value_get_css_text(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// CSSValueType: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gushort: #gushort.
//
func (self *DOMCSSValue) CSSValueType() uint16 {
	var _arg0 *C.WebKitDOMCSSValue // out
	var _cret C.gushort            // in

	_arg0 = (*C.WebKitDOMCSSValue)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_css_value_get_css_value_type(_arg0)
	runtime.KeepAlive(self)

	var _gushort uint16 // out

	_gushort = uint16(_cret)

	return _gushort
}

// SetCSSText: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMCSSValue) SetCSSText(value string) error {
	var _arg0 *C.WebKitDOMCSSValue // out
	var _arg1 *C.gchar             // out
	var _cerr *C.GError            // in

	_arg0 = (*C.WebKitDOMCSSValue)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_css_value_set_css_text(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// DOMCSSValueClass: instance of this type is always passed by reference.
type DOMCSSValueClass struct {
	*domcssValueClass
}

// domcssValueClass is the struct that's finalized.
type domcssValueClass struct {
	native *C.WebKitDOMCSSValueClass
}

func (d *DOMCSSValueClass) ParentClass() *DOMObjectClass {
	valptr := &d.native.parent_class
	var _v *DOMObjectClass // out
	_v = (*DOMObjectClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
