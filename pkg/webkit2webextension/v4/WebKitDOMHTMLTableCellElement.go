// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMHTMLTableCellElement = coreglib.Type(C.webkit_dom_html_table_cell_element_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMHTMLTableCellElement, F: marshalDOMHTMLTableCellElement},
	})
}

// DOMHTMLTableCellElementOverrides contains methods that are overridable.
type DOMHTMLTableCellElementOverrides struct {
}

func defaultDOMHTMLTableCellElementOverrides(v *DOMHTMLTableCellElement) DOMHTMLTableCellElementOverrides {
	return DOMHTMLTableCellElementOverrides{}
}

type DOMHTMLTableCellElement struct {
	_ [0]func() // equal guard
	DOMHTMLElement
}

var (
	_ coreglib.Objector = (*DOMHTMLTableCellElement)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMHTMLTableCellElement, *DOMHTMLTableCellElementClass, DOMHTMLTableCellElementOverrides](
		GTypeDOMHTMLTableCellElement,
		initDOMHTMLTableCellElementClass,
		wrapDOMHTMLTableCellElement,
		defaultDOMHTMLTableCellElementOverrides,
	)
}

func initDOMHTMLTableCellElementClass(gclass unsafe.Pointer, overrides DOMHTMLTableCellElementOverrides, classInitFunc func(*DOMHTMLTableCellElementClass)) {
	if classInitFunc != nil {
		class := (*DOMHTMLTableCellElementClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMHTMLTableCellElement(obj *coreglib.Object) *DOMHTMLTableCellElement {
	return &DOMHTMLTableCellElement{
		DOMHTMLElement: DOMHTMLElement{
			DOMElement: DOMElement{
				DOMNode: DOMNode{
					DOMObject: DOMObject{
						Object: obj,
					},
					Object: obj,
					DOMEventTarget: DOMEventTarget{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalDOMHTMLTableCellElement(p uintptr) (interface{}, error) {
	return wrapDOMHTMLTableCellElement(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Abbr: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableCellElement) Abbr() string {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _cret *C.gchar                         // in

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_cell_element_get_abbr(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Align: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableCellElement) Align() string {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _cret *C.gchar                         // in

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_cell_element_get_align(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Axis: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableCellElement) Axis() string {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _cret *C.gchar                         // in

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_cell_element_get_axis(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// BgColor: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableCellElement) BgColor() string {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _cret *C.gchar                         // in

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_cell_element_get_bg_color(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// CellIndex: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMHTMLTableCellElement) CellIndex() int32 {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _cret C.glong                          // in

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_cell_element_get_cell_index(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// Ch: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableCellElement) Ch() string {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _cret *C.gchar                         // in

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_cell_element_get_ch(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ChOff: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableCellElement) ChOff() string {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _cret *C.gchar                         // in

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_cell_element_get_ch_off(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ColSpan: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMHTMLTableCellElement) ColSpan() int32 {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _cret C.glong                          // in

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_cell_element_get_col_span(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// Headers: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableCellElement) Headers() string {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _cret *C.gchar                         // in

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_cell_element_get_headers(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Height: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableCellElement) Height() string {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _cret *C.gchar                         // in

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_cell_element_get_height(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// NoWrap: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMHTMLTableCellElement) NoWrap() bool {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _cret C.gboolean                       // in

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_cell_element_get_no_wrap(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RowSpan: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMHTMLTableCellElement) RowSpan() int32 {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _cret C.glong                          // in

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_cell_element_get_row_span(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// Scope: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableCellElement) Scope() string {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _cret *C.gchar                         // in

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_cell_element_get_scope(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// VAlign: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableCellElement) VAlign() string {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _cret *C.gchar                         // in

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_cell_element_get_v_align(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Width: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableCellElement) Width() string {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _cret *C.gchar                         // in

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_cell_element_get_width(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SetAbbr: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableCellElement) SetAbbr(value string) {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _arg1 *C.gchar                         // out

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_cell_element_set_abbr(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetAlign: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableCellElement) SetAlign(value string) {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _arg1 *C.gchar                         // out

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_cell_element_set_align(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetAxis: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableCellElement) SetAxis(value string) {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _arg1 *C.gchar                         // out

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_cell_element_set_axis(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetBgColor: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableCellElement) SetBgColor(value string) {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _arg1 *C.gchar                         // out

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_cell_element_set_bg_color(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetCh: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableCellElement) SetCh(value string) {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _arg1 *C.gchar                         // out

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_cell_element_set_ch(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetChOff: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableCellElement) SetChOff(value string) {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _arg1 *C.gchar                         // out

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_cell_element_set_ch_off(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetColSpan: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #glong.
//
func (self *DOMHTMLTableCellElement) SetColSpan(value int32) {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _arg1 C.glong                          // out

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(value)

	C.webkit_dom_html_table_cell_element_set_col_span(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetHeaders: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableCellElement) SetHeaders(value string) {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _arg1 *C.gchar                         // out

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_cell_element_set_headers(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetHeight: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableCellElement) SetHeight(value string) {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _arg1 *C.gchar                         // out

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_cell_element_set_height(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetNoWrap: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gboolean.
//
func (self *DOMHTMLTableCellElement) SetNoWrap(value bool) {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _arg1 C.gboolean                       // out

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if value {
		_arg1 = C.TRUE
	}

	C.webkit_dom_html_table_cell_element_set_no_wrap(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetRowSpan: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #glong.
//
func (self *DOMHTMLTableCellElement) SetRowSpan(value int32) {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _arg1 C.glong                          // out

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(value)

	C.webkit_dom_html_table_cell_element_set_row_span(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetScope: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableCellElement) SetScope(value string) {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _arg1 *C.gchar                         // out

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_cell_element_set_scope(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetVAlign: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableCellElement) SetVAlign(value string) {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _arg1 *C.gchar                         // out

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_cell_element_set_v_align(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetWidth: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableCellElement) SetWidth(value string) {
	var _arg0 *C.WebKitDOMHTMLTableCellElement // out
	var _arg1 *C.gchar                         // out

	_arg0 = (*C.WebKitDOMHTMLTableCellElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_cell_element_set_width(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// DOMHTMLTableCellElementClass: instance of this type is always passed by
// reference.
type DOMHTMLTableCellElementClass struct {
	*domhtmlTableCellElementClass
}

// domhtmlTableCellElementClass is the struct that's finalized.
type domhtmlTableCellElementClass struct {
	native *C.WebKitDOMHTMLTableCellElementClass
}

func (d *DOMHTMLTableCellElementClass) ParentClass() *DOMHTMLElementClass {
	valptr := &d.native.parent_class
	var _v *DOMHTMLElementClass // out
	_v = (*DOMHTMLElementClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
