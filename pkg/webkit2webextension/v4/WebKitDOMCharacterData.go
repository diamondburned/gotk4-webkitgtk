// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMCharacterData = coreglib.Type(C.webkit_dom_character_data_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMCharacterData, F: marshalDOMCharacterData},
	})
}

// DOMCharacterDataOverrides contains methods that are overridable.
type DOMCharacterDataOverrides struct {
}

func defaultDOMCharacterDataOverrides(v *DOMCharacterData) DOMCharacterDataOverrides {
	return DOMCharacterDataOverrides{}
}

type DOMCharacterData struct {
	_ [0]func() // equal guard
	DOMNode
}

var (
	_ coreglib.Objector = (*DOMCharacterData)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMCharacterData, *DOMCharacterDataClass, DOMCharacterDataOverrides](
		GTypeDOMCharacterData,
		initDOMCharacterDataClass,
		wrapDOMCharacterData,
		defaultDOMCharacterDataOverrides,
	)
}

func initDOMCharacterDataClass(gclass unsafe.Pointer, overrides DOMCharacterDataOverrides, classInitFunc func(*DOMCharacterDataClass)) {
	if classInitFunc != nil {
		class := (*DOMCharacterDataClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMCharacterData(obj *coreglib.Object) *DOMCharacterData {
	return &DOMCharacterData{
		DOMNode: DOMNode{
			DOMObject: DOMObject{
				Object: obj,
			},
			Object: obj,
			DOMEventTarget: DOMEventTarget{
				Object: obj,
			},
		},
	}
}

func marshalDOMCharacterData(p uintptr) (interface{}, error) {
	return wrapDOMCharacterData(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// AppendData: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - data: #gchar.
//
func (self *DOMCharacterData) AppendData(data string) error {
	var _arg0 *C.WebKitDOMCharacterData // out
	var _arg1 *C.gchar                  // out
	var _cerr *C.GError                 // in

	_arg0 = (*C.WebKitDOMCharacterData)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(data)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_character_data_append_data(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(data)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// DeleteData: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - offset: #gulong.
//   - length: #gulong.
//
func (self *DOMCharacterData) DeleteData(offset, length uint32) error {
	var _arg0 *C.WebKitDOMCharacterData // out
	var _arg1 C.gulong                  // out
	var _arg2 C.gulong                  // out
	var _cerr *C.GError                 // in

	_arg0 = (*C.WebKitDOMCharacterData)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gulong(offset)
	_arg2 = C.gulong(length)

	C.webkit_dom_character_data_delete_data(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(offset)
	runtime.KeepAlive(length)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Data: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMCharacterData) Data() string {
	var _arg0 *C.WebKitDOMCharacterData // out
	var _cret *C.gchar                  // in

	_arg0 = (*C.WebKitDOMCharacterData)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_character_data_get_data(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Length: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gulong: #gulong.
//
func (self *DOMCharacterData) Length() uint32 {
	var _arg0 *C.WebKitDOMCharacterData // out
	var _cret C.gulong                  // in

	_arg0 = (*C.WebKitDOMCharacterData)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_character_data_get_length(_arg0)
	runtime.KeepAlive(self)

	var _gulong uint32 // out

	_gulong = uint32(_cret)

	return _gulong
}

// InsertData: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - offset: #gulong.
//   - data: #gchar.
//
func (self *DOMCharacterData) InsertData(offset uint32, data string) error {
	var _arg0 *C.WebKitDOMCharacterData // out
	var _arg1 C.gulong                  // out
	var _arg2 *C.gchar                  // out
	var _cerr *C.GError                 // in

	_arg0 = (*C.WebKitDOMCharacterData)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gulong(offset)
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(data)))
	defer C.free(unsafe.Pointer(_arg2))

	C.webkit_dom_character_data_insert_data(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(offset)
	runtime.KeepAlive(data)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// ReplaceData: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - offset: #gulong.
//   - length: #gulong.
//   - data: #gchar.
//
func (self *DOMCharacterData) ReplaceData(offset, length uint32, data string) error {
	var _arg0 *C.WebKitDOMCharacterData // out
	var _arg1 C.gulong                  // out
	var _arg2 C.gulong                  // out
	var _arg3 *C.gchar                  // out
	var _cerr *C.GError                 // in

	_arg0 = (*C.WebKitDOMCharacterData)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gulong(offset)
	_arg2 = C.gulong(length)
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(data)))
	defer C.free(unsafe.Pointer(_arg3))

	C.webkit_dom_character_data_replace_data(_arg0, _arg1, _arg2, _arg3, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(offset)
	runtime.KeepAlive(length)
	runtime.KeepAlive(data)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetData: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMCharacterData) SetData(value string) error {
	var _arg0 *C.WebKitDOMCharacterData // out
	var _arg1 *C.gchar                  // out
	var _cerr *C.GError                 // in

	_arg0 = (*C.WebKitDOMCharacterData)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_character_data_set_data(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SubstringData: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - offset: #gulong.
//   - length: #gulong.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMCharacterData) SubstringData(offset, length uint32) (string, error) {
	var _arg0 *C.WebKitDOMCharacterData // out
	var _arg1 C.gulong                  // out
	var _arg2 C.gulong                  // out
	var _cret *C.gchar                  // in
	var _cerr *C.GError                 // in

	_arg0 = (*C.WebKitDOMCharacterData)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gulong(offset)
	_arg2 = C.gulong(length)

	_cret = C.webkit_dom_character_data_substring_data(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(offset)
	runtime.KeepAlive(length)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _utf8, _goerr
}

// DOMCharacterDataClass: instance of this type is always passed by reference.
type DOMCharacterDataClass struct {
	*domCharacterDataClass
}

// domCharacterDataClass is the struct that's finalized.
type domCharacterDataClass struct {
	native *C.WebKitDOMCharacterDataClass
}

func (d *DOMCharacterDataClass) ParentClass() *DOMNodeClass {
	valptr := &d.native.parent_class
	var _v *DOMNodeClass // out
	_v = (*DOMNodeClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
