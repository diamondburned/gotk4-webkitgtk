// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMXPathExpression = coreglib.Type(C.webkit_dom_xpath_expression_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMXPathExpression, F: marshalDOMXPathExpression},
	})
}

// DOMXPathExpressionOverrides contains methods that are overridable.
type DOMXPathExpressionOverrides struct {
}

func defaultDOMXPathExpressionOverrides(v *DOMXPathExpression) DOMXPathExpressionOverrides {
	return DOMXPathExpressionOverrides{}
}

type DOMXPathExpression struct {
	_ [0]func() // equal guard
	DOMObject
}

var (
	_ coreglib.Objector = (*DOMXPathExpression)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMXPathExpression, *DOMXPathExpressionClass, DOMXPathExpressionOverrides](
		GTypeDOMXPathExpression,
		initDOMXPathExpressionClass,
		wrapDOMXPathExpression,
		defaultDOMXPathExpressionOverrides,
	)
}

func initDOMXPathExpressionClass(gclass unsafe.Pointer, overrides DOMXPathExpressionOverrides, classInitFunc func(*DOMXPathExpressionClass)) {
	if classInitFunc != nil {
		class := (*DOMXPathExpressionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMXPathExpression(obj *coreglib.Object) *DOMXPathExpression {
	return &DOMXPathExpression{
		DOMObject: DOMObject{
			Object: obj,
		},
	}
}

func marshalDOMXPathExpression(p uintptr) (interface{}, error) {
	return wrapDOMXPathExpression(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Evaluate: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - contextNode: KitDOMNode.
//   - typ: #gushort.
//   - inResult: KitDOMXPathResult.
//
// The function returns the following values:
//
//   - domxPathResult: KitDOMXPathResult.
//
func (self *DOMXPathExpression) Evaluate(contextNode *DOMNode, typ uint16, inResult *DOMXPathResult) (*DOMXPathResult, error) {
	var _arg0 *C.WebKitDOMXPathExpression // out
	var _arg1 *C.WebKitDOMNode            // out
	var _arg2 C.gushort                   // out
	var _arg3 *C.WebKitDOMXPathResult     // out
	var _cret *C.WebKitDOMXPathResult     // in
	var _cerr *C.GError                   // in

	_arg0 = (*C.WebKitDOMXPathExpression)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(contextNode).Native()))
	_arg2 = C.gushort(typ)
	_arg3 = (*C.WebKitDOMXPathResult)(unsafe.Pointer(coreglib.InternObject(inResult).Native()))

	_cret = C.webkit_dom_xpath_expression_evaluate(_arg0, _arg1, _arg2, _arg3, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(contextNode)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(inResult)

	var _domxPathResult *DOMXPathResult // out
	var _goerr error                    // out

	_domxPathResult = wrapDOMXPathResult(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domxPathResult, _goerr
}

// DOMXPathExpressionClass: instance of this type is always passed by reference.
type DOMXPathExpressionClass struct {
	*domxPathExpressionClass
}

// domxPathExpressionClass is the struct that's finalized.
type domxPathExpressionClass struct {
	native *C.WebKitDOMXPathExpressionClass
}

func (d *DOMXPathExpressionClass) ParentClass() *DOMObjectClass {
	valptr := &d.native.parent_class
	var _v *DOMObjectClass // out
	_v = (*DOMObjectClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
