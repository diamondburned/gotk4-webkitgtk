// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMHTMLSelectElement = coreglib.Type(C.webkit_dom_html_select_element_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMHTMLSelectElement, F: marshalDOMHTMLSelectElement},
	})
}

// DOMHTMLSelectElementOverrides contains methods that are overridable.
type DOMHTMLSelectElementOverrides struct {
}

func defaultDOMHTMLSelectElementOverrides(v *DOMHTMLSelectElement) DOMHTMLSelectElementOverrides {
	return DOMHTMLSelectElementOverrides{}
}

type DOMHTMLSelectElement struct {
	_ [0]func() // equal guard
	DOMHTMLElement
}

var (
	_ coreglib.Objector = (*DOMHTMLSelectElement)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMHTMLSelectElement, *DOMHTMLSelectElementClass, DOMHTMLSelectElementOverrides](
		GTypeDOMHTMLSelectElement,
		initDOMHTMLSelectElementClass,
		wrapDOMHTMLSelectElement,
		defaultDOMHTMLSelectElementOverrides,
	)
}

func initDOMHTMLSelectElementClass(gclass unsafe.Pointer, overrides DOMHTMLSelectElementOverrides, classInitFunc func(*DOMHTMLSelectElementClass)) {
	if classInitFunc != nil {
		class := (*DOMHTMLSelectElementClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMHTMLSelectElement(obj *coreglib.Object) *DOMHTMLSelectElement {
	return &DOMHTMLSelectElement{
		DOMHTMLElement: DOMHTMLElement{
			DOMElement: DOMElement{
				DOMNode: DOMNode{
					DOMObject: DOMObject{
						Object: obj,
					},
					Object: obj,
					DOMEventTarget: DOMEventTarget{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalDOMHTMLSelectElement(p uintptr) (interface{}, error) {
	return wrapDOMHTMLSelectElement(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Add: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - element: KitDOMHTMLElement.
//   - before: KitDOMHTMLElement.
//
func (self *DOMHTMLSelectElement) Add(element, before *DOMHTMLElement) error {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _arg1 *C.WebKitDOMHTMLElement       // out
	var _arg2 *C.WebKitDOMHTMLElement       // out
	var _cerr *C.GError                     // in

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(element).Native()))
	_arg2 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(before).Native()))

	C.webkit_dom_html_select_element_add(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(element)
	runtime.KeepAlive(before)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Autofocus: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMHTMLSelectElement) Autofocus() bool {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _cret C.gboolean                    // in

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_select_element_get_autofocus(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Disabled: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMHTMLSelectElement) Disabled() bool {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _cret C.gboolean                    // in

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_select_element_get_disabled(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Form: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlFormElement: KitDOMHTMLFormElement.
//
func (self *DOMHTMLSelectElement) Form() *DOMHTMLFormElement {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _cret *C.WebKitDOMHTMLFormElement   // in

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_select_element_get_form(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlFormElement *DOMHTMLFormElement // out

	_domhtmlFormElement = wrapDOMHTMLFormElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domhtmlFormElement
}

// Length: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gulong: #gulong.
//
func (self *DOMHTMLSelectElement) Length() uint32 {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _cret C.gulong                      // in

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_select_element_get_length(_arg0)
	runtime.KeepAlive(self)

	var _gulong uint32 // out

	_gulong = uint32(_cret)

	return _gulong
}

// Multiple: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMHTMLSelectElement) Multiple() bool {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _cret C.gboolean                    // in

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_select_element_get_multiple(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Name: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLSelectElement) Name() string {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_select_element_get_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Options: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlOptionsCollection: KitDOMHTMLOptionsCollection.
//
func (self *DOMHTMLSelectElement) Options() *DOMHTMLOptionsCollection {
	var _arg0 *C.WebKitDOMHTMLSelectElement     // out
	var _cret *C.WebKitDOMHTMLOptionsCollection // in

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_select_element_get_options(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlOptionsCollection *DOMHTMLOptionsCollection // out

	_domhtmlOptionsCollection = wrapDOMHTMLOptionsCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlOptionsCollection
}

// SelectType: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLSelectElement) SelectType() string {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_select_element_get_select_type(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SelectedIndex: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMHTMLSelectElement) SelectedIndex() int32 {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _cret C.glong                       // in

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_select_element_get_selected_index(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// Size: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMHTMLSelectElement) Size() int32 {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _cret C.glong                       // in

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_select_element_get_size(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// Value: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLSelectElement) Value() string {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_select_element_get_value(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// WillValidate: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMHTMLSelectElement) WillValidate() bool {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _cret C.gboolean                    // in

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_select_element_get_will_validate(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Item: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - index: #gulong.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMHTMLSelectElement) Item(index uint32) *DOMNode {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _arg1 C.gulong                      // out
	var _cret *C.WebKitDOMNode              // in

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gulong(index)

	_cret = C.webkit_dom_html_select_element_item(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(index)

	var _domNode *DOMNode // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))

	return _domNode
}

// NamedItem: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - name: #gchar.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMHTMLSelectElement) NamedItem(name string) *DOMNode {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _arg1 *C.gchar                      // out
	var _cret *C.WebKitDOMNode              // in

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_html_select_element_named_item(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(name)

	var _domNode *DOMNode // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))

	return _domNode
}

// Remove: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - index: #glong.
//
func (self *DOMHTMLSelectElement) Remove(index int32) {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _arg1 C.glong                       // out

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(index)

	C.webkit_dom_html_select_element_remove(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(index)
}

// SetAutofocus: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gboolean.
//
func (self *DOMHTMLSelectElement) SetAutofocus(value bool) {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _arg1 C.gboolean                    // out

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if value {
		_arg1 = C.TRUE
	}

	C.webkit_dom_html_select_element_set_autofocus(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetDisabled: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gboolean.
//
func (self *DOMHTMLSelectElement) SetDisabled(value bool) {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _arg1 C.gboolean                    // out

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if value {
		_arg1 = C.TRUE
	}

	C.webkit_dom_html_select_element_set_disabled(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetLength: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gulong.
//
func (self *DOMHTMLSelectElement) SetLength(value uint32) error {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _arg1 C.gulong                      // out
	var _cerr *C.GError                     // in

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gulong(value)

	C.webkit_dom_html_select_element_set_length(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetMultiple: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gboolean.
//
func (self *DOMHTMLSelectElement) SetMultiple(value bool) {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _arg1 C.gboolean                    // out

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if value {
		_arg1 = C.TRUE
	}

	C.webkit_dom_html_select_element_set_multiple(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetName: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLSelectElement) SetName(value string) {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_select_element_set_name(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetSelectedIndex: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #glong.
//
func (self *DOMHTMLSelectElement) SetSelectedIndex(value int32) {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _arg1 C.glong                       // out

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(value)

	C.webkit_dom_html_select_element_set_selected_index(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetSize: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #glong.
//
func (self *DOMHTMLSelectElement) SetSize(value int32) {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _arg1 C.glong                       // out

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(value)

	C.webkit_dom_html_select_element_set_size(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetValue: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLSelectElement) SetValue(value string) {
	var _arg0 *C.WebKitDOMHTMLSelectElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLSelectElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_select_element_set_value(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// DOMHTMLSelectElementClass: instance of this type is always passed by
// reference.
type DOMHTMLSelectElementClass struct {
	*domhtmlSelectElementClass
}

// domhtmlSelectElementClass is the struct that's finalized.
type domhtmlSelectElementClass struct {
	native *C.WebKitDOMHTMLSelectElementClass
}

func (d *DOMHTMLSelectElementClass) ParentClass() *DOMHTMLElementClass {
	valptr := &d.native.parent_class
	var _v *DOMHTMLElementClass // out
	_v = (*DOMHTMLElementClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
