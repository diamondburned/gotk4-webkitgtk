// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMHTMLDocument = coreglib.Type(C.webkit_dom_html_document_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMHTMLDocument, F: marshalDOMHTMLDocument},
	})
}

// DOMHTMLDocumentOverrides contains methods that are overridable.
type DOMHTMLDocumentOverrides struct {
}

func defaultDOMHTMLDocumentOverrides(v *DOMHTMLDocument) DOMHTMLDocumentOverrides {
	return DOMHTMLDocumentOverrides{}
}

type DOMHTMLDocument struct {
	_ [0]func() // equal guard
	DOMDocument
}

var (
	_ coreglib.Objector = (*DOMHTMLDocument)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMHTMLDocument, *DOMHTMLDocumentClass, DOMHTMLDocumentOverrides](
		GTypeDOMHTMLDocument,
		initDOMHTMLDocumentClass,
		wrapDOMHTMLDocument,
		defaultDOMHTMLDocumentOverrides,
	)
}

func initDOMHTMLDocumentClass(gclass unsafe.Pointer, overrides DOMHTMLDocumentOverrides, classInitFunc func(*DOMHTMLDocumentClass)) {
	if classInitFunc != nil {
		class := (*DOMHTMLDocumentClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMHTMLDocument(obj *coreglib.Object) *DOMHTMLDocument {
	return &DOMHTMLDocument{
		DOMDocument: DOMDocument{
			DOMNode: DOMNode{
				DOMObject: DOMObject{
					Object: obj,
				},
				Object: obj,
				DOMEventTarget: DOMEventTarget{
					Object: obj,
				},
			},
		},
	}
}

func marshalDOMHTMLDocument(p uintptr) (interface{}, error) {
	return wrapDOMHTMLDocument(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// CaptureEvents: deprecated: Use JavaScriptCore API instead.
func (self *DOMHTMLDocument) CaptureEvents() {
	var _arg0 *C.WebKitDOMHTMLDocument // out

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_html_document_capture_events(_arg0)
	runtime.KeepAlive(self)
}

// Clear: deprecated: Use JavaScriptCore API instead.
func (self *DOMHTMLDocument) Clear() {
	var _arg0 *C.WebKitDOMHTMLDocument // out

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_html_document_clear(_arg0)
	runtime.KeepAlive(self)
}

// Close: deprecated: Use JavaScriptCore API instead.
func (self *DOMHTMLDocument) Close() {
	var _arg0 *C.WebKitDOMHTMLDocument // out

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_html_document_close(_arg0)
	runtime.KeepAlive(self)
}

// AlinkColor: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLDocument) AlinkColor() string {
	var _arg0 *C.WebKitDOMHTMLDocument // out
	var _cret *C.gchar                 // in

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_document_get_alink_color(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// BgColor: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLDocument) BgColor() string {
	var _arg0 *C.WebKitDOMHTMLDocument // out
	var _cret *C.gchar                 // in

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_document_get_bg_color(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// CompatMode: deprecated: Use webkit_dom_document_get_compat_mode() instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLDocument) CompatMode() string {
	var _arg0 *C.WebKitDOMHTMLDocument // out
	var _cret *C.gchar                 // in

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_document_get_compat_mode(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// DesignMode: deprecated: Use webkit_dom_document_get_design_mode() instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLDocument) DesignMode() string {
	var _arg0 *C.WebKitDOMHTMLDocument // out
	var _cret *C.gchar                 // in

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_document_get_design_mode(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Dir: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLDocument) Dir() string {
	var _arg0 *C.WebKitDOMHTMLDocument // out
	var _cret *C.gchar                 // in

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_document_get_dir(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Embeds: deprecated: Use webkit_dom_document_get_embeds() instead.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMHTMLDocument) Embeds() *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMHTMLDocument   // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_document_get_embeds(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// FgColor: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLDocument) FgColor() string {
	var _arg0 *C.WebKitDOMHTMLDocument // out
	var _cret *C.gchar                 // in

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_document_get_fg_color(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Height: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMHTMLDocument) Height() int32 {
	var _arg0 *C.WebKitDOMHTMLDocument // out
	var _cret C.glong                  // in

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_document_get_height(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// LinkColor: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLDocument) LinkColor() string {
	var _arg0 *C.WebKitDOMHTMLDocument // out
	var _cret *C.gchar                 // in

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_document_get_link_color(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Plugins: deprecated: Use webkit_dom_document_get_plugins() instead.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMHTMLDocument) Plugins() *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMHTMLDocument   // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_document_get_plugins(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// Scripts: deprecated: Use webkit_dom_document_get_scripts() instead.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMHTMLDocument) Scripts() *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMHTMLDocument   // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_document_get_scripts(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// VlinkColor: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLDocument) VlinkColor() string {
	var _arg0 *C.WebKitDOMHTMLDocument // out
	var _cret *C.gchar                 // in

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_document_get_vlink_color(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Width: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMHTMLDocument) Width() int32 {
	var _arg0 *C.WebKitDOMHTMLDocument // out
	var _cret C.glong                  // in

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_document_get_width(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// ReleaseEvents: deprecated: Use JavaScriptCore API instead.
func (self *DOMHTMLDocument) ReleaseEvents() {
	var _arg0 *C.WebKitDOMHTMLDocument // out

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_html_document_release_events(_arg0)
	runtime.KeepAlive(self)
}

// SetAlinkColor: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLDocument) SetAlinkColor(value string) {
	var _arg0 *C.WebKitDOMHTMLDocument // out
	var _arg1 *C.gchar                 // out

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_document_set_alink_color(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetBgColor: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLDocument) SetBgColor(value string) {
	var _arg0 *C.WebKitDOMHTMLDocument // out
	var _arg1 *C.gchar                 // out

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_document_set_bg_color(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetDesignMode: deprecated: Use webkit_dom_document_set_design_mode() instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLDocument) SetDesignMode(value string) {
	var _arg0 *C.WebKitDOMHTMLDocument // out
	var _arg1 *C.gchar                 // out

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_document_set_design_mode(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetDir: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLDocument) SetDir(value string) {
	var _arg0 *C.WebKitDOMHTMLDocument // out
	var _arg1 *C.gchar                 // out

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_document_set_dir(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetFgColor: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLDocument) SetFgColor(value string) {
	var _arg0 *C.WebKitDOMHTMLDocument // out
	var _arg1 *C.gchar                 // out

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_document_set_fg_color(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetLinkColor: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLDocument) SetLinkColor(value string) {
	var _arg0 *C.WebKitDOMHTMLDocument // out
	var _arg1 *C.gchar                 // out

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_document_set_link_color(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetVlinkColor: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLDocument) SetVlinkColor(value string) {
	var _arg0 *C.WebKitDOMHTMLDocument // out
	var _arg1 *C.gchar                 // out

	_arg0 = (*C.WebKitDOMHTMLDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_document_set_vlink_color(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// DOMHTMLDocumentClass: instance of this type is always passed by reference.
type DOMHTMLDocumentClass struct {
	*domhtmlDocumentClass
}

// domhtmlDocumentClass is the struct that's finalized.
type domhtmlDocumentClass struct {
	native *C.WebKitDOMHTMLDocumentClass
}

func (d *DOMHTMLDocumentClass) ParentClass() *DOMDocumentClass {
	valptr := &d.native.parent_class
	var _v *DOMDocumentClass // out
	_v = (*DOMDocumentClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
