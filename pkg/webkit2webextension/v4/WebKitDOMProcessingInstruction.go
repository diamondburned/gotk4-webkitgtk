// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMProcessingInstruction = coreglib.Type(C.webkit_dom_processing_instruction_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMProcessingInstruction, F: marshalDOMProcessingInstruction},
	})
}

// DOMProcessingInstructionOverrides contains methods that are overridable.
type DOMProcessingInstructionOverrides struct {
}

func defaultDOMProcessingInstructionOverrides(v *DOMProcessingInstruction) DOMProcessingInstructionOverrides {
	return DOMProcessingInstructionOverrides{}
}

type DOMProcessingInstruction struct {
	_ [0]func() // equal guard
	DOMCharacterData
}

var (
	_ coreglib.Objector = (*DOMProcessingInstruction)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMProcessingInstruction, *DOMProcessingInstructionClass, DOMProcessingInstructionOverrides](
		GTypeDOMProcessingInstruction,
		initDOMProcessingInstructionClass,
		wrapDOMProcessingInstruction,
		defaultDOMProcessingInstructionOverrides,
	)
}

func initDOMProcessingInstructionClass(gclass unsafe.Pointer, overrides DOMProcessingInstructionOverrides, classInitFunc func(*DOMProcessingInstructionClass)) {
	if classInitFunc != nil {
		class := (*DOMProcessingInstructionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMProcessingInstruction(obj *coreglib.Object) *DOMProcessingInstruction {
	return &DOMProcessingInstruction{
		DOMCharacterData: DOMCharacterData{
			DOMNode: DOMNode{
				DOMObject: DOMObject{
					Object: obj,
				},
				Object: obj,
				DOMEventTarget: DOMEventTarget{
					Object: obj,
				},
			},
		},
	}
}

func marshalDOMProcessingInstruction(p uintptr) (interface{}, error) {
	return wrapDOMProcessingInstruction(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Sheet: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domStyleSheet: KitDOMStyleSheet.
//
func (self *DOMProcessingInstruction) Sheet() *DOMStyleSheet {
	var _arg0 *C.WebKitDOMProcessingInstruction // out
	var _cret *C.WebKitDOMStyleSheet            // in

	_arg0 = (*C.WebKitDOMProcessingInstruction)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_processing_instruction_get_sheet(_arg0)
	runtime.KeepAlive(self)

	var _domStyleSheet *DOMStyleSheet // out

	_domStyleSheet = wrapDOMStyleSheet(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domStyleSheet
}

// Target: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMProcessingInstruction) Target() string {
	var _arg0 *C.WebKitDOMProcessingInstruction // out
	var _cret *C.gchar                          // in

	_arg0 = (*C.WebKitDOMProcessingInstruction)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_processing_instruction_get_target(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// DOMProcessingInstructionClass: instance of this type is always passed by
// reference.
type DOMProcessingInstructionClass struct {
	*domProcessingInstructionClass
}

// domProcessingInstructionClass is the struct that's finalized.
type domProcessingInstructionClass struct {
	native *C.WebKitDOMProcessingInstructionClass
}

func (d *DOMProcessingInstructionClass) ParentClass() *DOMCharacterDataClass {
	valptr := &d.native.parent_class
	var _v *DOMCharacterDataClass // out
	_v = (*DOMCharacterDataClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
