// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMEntityReference     = coreglib.Type(C.webkit_dom_entity_reference_get_type())
	GTypeDOMHTMLBaseFontElement = coreglib.Type(C.webkit_dom_html_base_font_element_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMEntityReference, F: marshalDOMEntityReference},
		coreglib.TypeMarshaler{T: GTypeDOMHTMLBaseFontElement, F: marshalDOMHTMLBaseFontElement},
	})
}

// DOMEntityReferenceOverrides contains methods that are overridable.
type DOMEntityReferenceOverrides struct {
}

func defaultDOMEntityReferenceOverrides(v *DOMEntityReference) DOMEntityReferenceOverrides {
	return DOMEntityReferenceOverrides{}
}

type DOMEntityReference struct {
	_ [0]func() // equal guard
	DOMNode
}

var (
	_ coreglib.Objector = (*DOMEntityReference)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMEntityReference, *DOMEntityReferenceClass, DOMEntityReferenceOverrides](
		GTypeDOMEntityReference,
		initDOMEntityReferenceClass,
		wrapDOMEntityReference,
		defaultDOMEntityReferenceOverrides,
	)
}

func initDOMEntityReferenceClass(gclass unsafe.Pointer, overrides DOMEntityReferenceOverrides, classInitFunc func(*DOMEntityReferenceClass)) {
	if classInitFunc != nil {
		class := (*DOMEntityReferenceClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMEntityReference(obj *coreglib.Object) *DOMEntityReference {
	return &DOMEntityReference{
		DOMNode: DOMNode{
			DOMObject: DOMObject{
				Object: obj,
			},
			Object: obj,
			DOMEventTarget: DOMEventTarget{
				Object: obj,
			},
		},
	}
}

func marshalDOMEntityReference(p uintptr) (interface{}, error) {
	return wrapDOMEntityReference(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// DOMHTMLBaseFontElementOverrides contains methods that are overridable.
type DOMHTMLBaseFontElementOverrides struct {
}

func defaultDOMHTMLBaseFontElementOverrides(v *DOMHTMLBaseFontElement) DOMHTMLBaseFontElementOverrides {
	return DOMHTMLBaseFontElementOverrides{}
}

type DOMHTMLBaseFontElement struct {
	_ [0]func() // equal guard
	DOMHTMLElement
}

var (
	_ coreglib.Objector = (*DOMHTMLBaseFontElement)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMHTMLBaseFontElement, *DOMHTMLBaseFontElementClass, DOMHTMLBaseFontElementOverrides](
		GTypeDOMHTMLBaseFontElement,
		initDOMHTMLBaseFontElementClass,
		wrapDOMHTMLBaseFontElement,
		defaultDOMHTMLBaseFontElementOverrides,
	)
}

func initDOMHTMLBaseFontElementClass(gclass unsafe.Pointer, overrides DOMHTMLBaseFontElementOverrides, classInitFunc func(*DOMHTMLBaseFontElementClass)) {
	if classInitFunc != nil {
		class := (*DOMHTMLBaseFontElementClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMHTMLBaseFontElement(obj *coreglib.Object) *DOMHTMLBaseFontElement {
	return &DOMHTMLBaseFontElement{
		DOMHTMLElement: DOMHTMLElement{
			DOMElement: DOMElement{
				DOMNode: DOMNode{
					DOMObject: DOMObject{
						Object: obj,
					},
					Object: obj,
					DOMEventTarget: DOMEventTarget{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalDOMHTMLBaseFontElement(p uintptr) (interface{}, error) {
	return wrapDOMHTMLBaseFontElement(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Color: this function has been removed from the DOM spec and it just returns
// NULL.
//
// Deprecated: since version 2.12.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLBaseFontElement) Color() string {
	var _arg0 *C.WebKitDOMHTMLBaseFontElement // out
	var _cret *C.gchar                        // in

	_arg0 = (*C.WebKitDOMHTMLBaseFontElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_base_font_element_get_color(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Face: this function has been removed from the DOM spec and it just returns
// NULL.
//
// Deprecated: since version 2.12.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLBaseFontElement) Face() string {
	var _arg0 *C.WebKitDOMHTMLBaseFontElement // out
	var _cret *C.gchar                        // in

	_arg0 = (*C.WebKitDOMHTMLBaseFontElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_base_font_element_get_face(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Size: this function has been removed from the DOM spec and it just returns 0.
//
// Deprecated: since version 2.12.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMHTMLBaseFontElement) Size() int32 {
	var _arg0 *C.WebKitDOMHTMLBaseFontElement // out
	var _cret C.glong                         // in

	_arg0 = (*C.WebKitDOMHTMLBaseFontElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_base_font_element_get_size(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// SetColor: this function has been removed from the DOM spec and it does
// nothing.
//
// Deprecated: since version 2.12.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLBaseFontElement) SetColor(value string) {
	var _arg0 *C.WebKitDOMHTMLBaseFontElement // out
	var _arg1 *C.gchar                        // out

	_arg0 = (*C.WebKitDOMHTMLBaseFontElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_base_font_element_set_color(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetFace: this function has been removed from the DOM spec and it does
// nothing.
//
// Deprecated: since version 2.12.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLBaseFontElement) SetFace(value string) {
	var _arg0 *C.WebKitDOMHTMLBaseFontElement // out
	var _arg1 *C.gchar                        // out

	_arg0 = (*C.WebKitDOMHTMLBaseFontElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_base_font_element_set_face(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetSize: this function has been removed from the DOM spec and it does
// nothing.
//
// Deprecated: since version 2.12.
//
// The function takes the following parameters:
//
//   - value: #glong.
//
func (self *DOMHTMLBaseFontElement) SetSize(value int32) {
	var _arg0 *C.WebKitDOMHTMLBaseFontElement // out
	var _arg1 C.glong                         // out

	_arg0 = (*C.WebKitDOMHTMLBaseFontElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(value)

	C.webkit_dom_html_base_font_element_set_size(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// DOMEntityReferenceClass: instance of this type is always passed by reference.
type DOMEntityReferenceClass struct {
	*domEntityReferenceClass
}

// domEntityReferenceClass is the struct that's finalized.
type domEntityReferenceClass struct {
	native *C.WebKitDOMEntityReferenceClass
}

func (d *DOMEntityReferenceClass) ParentClass() *DOMNodeClass {
	valptr := &d.native.parent_class
	var _v *DOMNodeClass // out
	_v = (*DOMNodeClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// DOMHTMLBaseFontElementClass: instance of this type is always passed by
// reference.
type DOMHTMLBaseFontElementClass struct {
	*domhtmlBaseFontElementClass
}

// domhtmlBaseFontElementClass is the struct that's finalized.
type domhtmlBaseFontElementClass struct {
	native *C.WebKitDOMHTMLBaseFontElementClass
}

func (d *DOMHTMLBaseFontElementClass) ParentClass() *DOMHTMLElementClass {
	valptr := &d.native.parent_class
	var _v *DOMHTMLElementClass // out
	_v = (*DOMHTMLElementClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
