// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMHTMLTableSectionElement = coreglib.Type(C.webkit_dom_html_table_section_element_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMHTMLTableSectionElement, F: marshalDOMHTMLTableSectionElement},
	})
}

// DOMHTMLTableSectionElementOverrides contains methods that are overridable.
type DOMHTMLTableSectionElementOverrides struct {
}

func defaultDOMHTMLTableSectionElementOverrides(v *DOMHTMLTableSectionElement) DOMHTMLTableSectionElementOverrides {
	return DOMHTMLTableSectionElementOverrides{}
}

type DOMHTMLTableSectionElement struct {
	_ [0]func() // equal guard
	DOMHTMLElement
}

var (
	_ coreglib.Objector = (*DOMHTMLTableSectionElement)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMHTMLTableSectionElement, *DOMHTMLTableSectionElementClass, DOMHTMLTableSectionElementOverrides](
		GTypeDOMHTMLTableSectionElement,
		initDOMHTMLTableSectionElementClass,
		wrapDOMHTMLTableSectionElement,
		defaultDOMHTMLTableSectionElementOverrides,
	)
}

func initDOMHTMLTableSectionElementClass(gclass unsafe.Pointer, overrides DOMHTMLTableSectionElementOverrides, classInitFunc func(*DOMHTMLTableSectionElementClass)) {
	if classInitFunc != nil {
		class := (*DOMHTMLTableSectionElementClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMHTMLTableSectionElement(obj *coreglib.Object) *DOMHTMLTableSectionElement {
	return &DOMHTMLTableSectionElement{
		DOMHTMLElement: DOMHTMLElement{
			DOMElement: DOMElement{
				DOMNode: DOMNode{
					DOMObject: DOMObject{
						Object: obj,
					},
					Object: obj,
					DOMEventTarget: DOMEventTarget{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalDOMHTMLTableSectionElement(p uintptr) (interface{}, error) {
	return wrapDOMHTMLTableSectionElement(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// DeleteRow: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - index: #glong.
//
func (self *DOMHTMLTableSectionElement) DeleteRow(index int32) error {
	var _arg0 *C.WebKitDOMHTMLTableSectionElement // out
	var _arg1 C.glong                             // out
	var _cerr *C.GError                           // in

	_arg0 = (*C.WebKitDOMHTMLTableSectionElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(index)

	C.webkit_dom_html_table_section_element_delete_row(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(index)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Align: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableSectionElement) Align() string {
	var _arg0 *C.WebKitDOMHTMLTableSectionElement // out
	var _cret *C.gchar                            // in

	_arg0 = (*C.WebKitDOMHTMLTableSectionElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_section_element_get_align(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Ch: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableSectionElement) Ch() string {
	var _arg0 *C.WebKitDOMHTMLTableSectionElement // out
	var _cret *C.gchar                            // in

	_arg0 = (*C.WebKitDOMHTMLTableSectionElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_section_element_get_ch(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ChOff: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableSectionElement) ChOff() string {
	var _arg0 *C.WebKitDOMHTMLTableSectionElement // out
	var _cret *C.gchar                            // in

	_arg0 = (*C.WebKitDOMHTMLTableSectionElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_section_element_get_ch_off(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Rows: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMHTMLTableSectionElement) Rows() *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMHTMLTableSectionElement // out
	var _cret *C.WebKitDOMHTMLCollection          // in

	_arg0 = (*C.WebKitDOMHTMLTableSectionElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_section_element_get_rows(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// VAlign: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLTableSectionElement) VAlign() string {
	var _arg0 *C.WebKitDOMHTMLTableSectionElement // out
	var _cret *C.gchar                            // in

	_arg0 = (*C.WebKitDOMHTMLTableSectionElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_table_section_element_get_v_align(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// InsertRow: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - index: #glong.
//
// The function returns the following values:
//
//   - domhtmlElement: KitDOMHTMLElement.
//
func (self *DOMHTMLTableSectionElement) InsertRow(index int32) (*DOMHTMLElement, error) {
	var _arg0 *C.WebKitDOMHTMLTableSectionElement // out
	var _arg1 C.glong                             // out
	var _cret *C.WebKitDOMHTMLElement             // in
	var _cerr *C.GError                           // in

	_arg0 = (*C.WebKitDOMHTMLTableSectionElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(index)

	_cret = C.webkit_dom_html_table_section_element_insert_row(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(index)

	var _domhtmlElement *DOMHTMLElement // out
	var _goerr error                    // out

	_domhtmlElement = wrapDOMHTMLElement(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domhtmlElement, _goerr
}

// SetAlign: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableSectionElement) SetAlign(value string) {
	var _arg0 *C.WebKitDOMHTMLTableSectionElement // out
	var _arg1 *C.gchar                            // out

	_arg0 = (*C.WebKitDOMHTMLTableSectionElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_section_element_set_align(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetCh: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableSectionElement) SetCh(value string) {
	var _arg0 *C.WebKitDOMHTMLTableSectionElement // out
	var _arg1 *C.gchar                            // out

	_arg0 = (*C.WebKitDOMHTMLTableSectionElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_section_element_set_ch(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetChOff: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableSectionElement) SetChOff(value string) {
	var _arg0 *C.WebKitDOMHTMLTableSectionElement // out
	var _arg1 *C.gchar                            // out

	_arg0 = (*C.WebKitDOMHTMLTableSectionElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_section_element_set_ch_off(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetVAlign: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLTableSectionElement) SetVAlign(value string) {
	var _arg0 *C.WebKitDOMHTMLTableSectionElement // out
	var _arg1 *C.gchar                            // out

	_arg0 = (*C.WebKitDOMHTMLTableSectionElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_table_section_element_set_v_align(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// DOMHTMLTableSectionElementClass: instance of this type is always passed by
// reference.
type DOMHTMLTableSectionElementClass struct {
	*domhtmlTableSectionElementClass
}

// domhtmlTableSectionElementClass is the struct that's finalized.
type domhtmlTableSectionElementClass struct {
	native *C.WebKitDOMHTMLTableSectionElementClass
}

func (d *DOMHTMLTableSectionElementClass) ParentClass() *DOMHTMLElementClass {
	valptr := &d.native.parent_class
	var _v *DOMHTMLElementClass // out
	_v = (*DOMHTMLElementClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
