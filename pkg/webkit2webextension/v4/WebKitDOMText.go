// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMText = coreglib.Type(C.webkit_dom_text_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMText, F: marshalDOMText},
	})
}

// DOMTextOverrides contains methods that are overridable.
type DOMTextOverrides struct {
}

func defaultDOMTextOverrides(v *DOMText) DOMTextOverrides {
	return DOMTextOverrides{}
}

type DOMText struct {
	_ [0]func() // equal guard
	DOMCharacterData
}

var (
	_ coreglib.Objector = (*DOMText)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMText, *DOMTextClass, DOMTextOverrides](
		GTypeDOMText,
		initDOMTextClass,
		wrapDOMText,
		defaultDOMTextOverrides,
	)
}

func initDOMTextClass(gclass unsafe.Pointer, overrides DOMTextOverrides, classInitFunc func(*DOMTextClass)) {
	if classInitFunc != nil {
		class := (*DOMTextClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMText(obj *coreglib.Object) *DOMText {
	return &DOMText{
		DOMCharacterData: DOMCharacterData{
			DOMNode: DOMNode{
				DOMObject: DOMObject{
					Object: obj,
				},
				Object: obj,
				DOMEventTarget: DOMEventTarget{
					Object: obj,
				},
			},
		},
	}
}

func marshalDOMText(p uintptr) (interface{}, error) {
	return wrapDOMText(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// WholeText: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMText) WholeText() string {
	var _arg0 *C.WebKitDOMText // out
	var _cret *C.gchar         // in

	_arg0 = (*C.WebKitDOMText)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_text_get_whole_text(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ReplaceWholeText: deprecated: since version 2.14.
//
// The function takes the following parameters:
//
//   - content: #gchar.
//
// The function returns the following values:
//
//   - domText: KitDOMText.
//
func (self *DOMText) ReplaceWholeText(content string) (*DOMText, error) {
	var _arg0 *C.WebKitDOMText // out
	var _arg1 *C.gchar         // out
	var _cret *C.WebKitDOMText // in
	var _cerr *C.GError        // in

	_arg0 = (*C.WebKitDOMText)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(content)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_text_replace_whole_text(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(content)

	var _domText *DOMText // out
	var _goerr error      // out

	_domText = wrapDOMText(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domText, _goerr
}

// SplitText: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - offset: #gulong.
//
// The function returns the following values:
//
//   - domText: KitDOMText.
//
func (self *DOMText) SplitText(offset uint32) (*DOMText, error) {
	var _arg0 *C.WebKitDOMText // out
	var _arg1 C.gulong         // out
	var _cret *C.WebKitDOMText // in
	var _cerr *C.GError        // in

	_arg0 = (*C.WebKitDOMText)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gulong(offset)

	_cret = C.webkit_dom_text_split_text(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(offset)

	var _domText *DOMText // out
	var _goerr error      // out

	_domText = wrapDOMText(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domText, _goerr
}

// DOMTextClass: instance of this type is always passed by reference.
type DOMTextClass struct {
	*domTextClass
}

// domTextClass is the struct that's finalized.
type domTextClass struct {
	native *C.WebKitDOMTextClass
}

func (d *DOMTextClass) ParentClass() *DOMCharacterDataClass {
	valptr := &d.native.parent_class
	var _v *DOMCharacterDataClass // out
	_v = (*DOMCharacterDataClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
