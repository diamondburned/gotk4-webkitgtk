// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMDOMSelection = coreglib.Type(C.webkit_dom_dom_selection_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMDOMSelection, F: marshalDOMDOMSelection},
	})
}

// DOMDOMSelectionOverrides contains methods that are overridable.
type DOMDOMSelectionOverrides struct {
}

func defaultDOMDOMSelectionOverrides(v *DOMDOMSelection) DOMDOMSelectionOverrides {
	return DOMDOMSelectionOverrides{}
}

type DOMDOMSelection struct {
	_ [0]func() // equal guard
	DOMObject
}

var (
	_ coreglib.Objector = (*DOMDOMSelection)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMDOMSelection, *DOMDOMSelectionClass, DOMDOMSelectionOverrides](
		GTypeDOMDOMSelection,
		initDOMDOMSelectionClass,
		wrapDOMDOMSelection,
		defaultDOMDOMSelectionOverrides,
	)
}

func initDOMDOMSelectionClass(gclass unsafe.Pointer, overrides DOMDOMSelectionOverrides, classInitFunc func(*DOMDOMSelectionClass)) {
	if classInitFunc != nil {
		class := (*DOMDOMSelectionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMDOMSelection(obj *coreglib.Object) *DOMDOMSelection {
	return &DOMDOMSelection{
		DOMObject: DOMObject{
			Object: obj,
		},
	}
}

func marshalDOMDOMSelection(p uintptr) (interface{}, error) {
	return wrapDOMDOMSelection(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// AddRange: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - range: KitDOMRange.
//
func (self *DOMDOMSelection) AddRange(_range *DOMRange) {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _arg1 *C.WebKitDOMRange        // out

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(_range).Native()))

	C.webkit_dom_dom_selection_add_range(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(_range)
}

// Collapse: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - node: KitDOMNode.
//   - offset: #gulong.
//
func (self *DOMDOMSelection) Collapse(node *DOMNode, offset uint32) {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _arg1 *C.WebKitDOMNode         // out
	var _arg2 C.gulong                 // out

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(node).Native()))
	_arg2 = C.gulong(offset)

	C.webkit_dom_dom_selection_collapse(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(node)
	runtime.KeepAlive(offset)
}

// CollapseToEnd: deprecated: Use JavaScriptCore API instead.
func (self *DOMDOMSelection) CollapseToEnd() error {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _cerr *C.GError                // in

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_dom_selection_collapse_to_end(_arg0, &_cerr)
	runtime.KeepAlive(self)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// CollapseToStart: deprecated: Use JavaScriptCore API instead.
func (self *DOMDOMSelection) CollapseToStart() error {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _cerr *C.GError                // in

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_dom_selection_collapse_to_start(_arg0, &_cerr)
	runtime.KeepAlive(self)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// ContainsNode: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - node: KitDOMNode.
//   - allowPartial: #gboolean.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMDOMSelection) ContainsNode(node *DOMNode, allowPartial bool) bool {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _arg1 *C.WebKitDOMNode         // out
	var _arg2 C.gboolean               // out
	var _cret C.gboolean               // in

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(node).Native()))
	if allowPartial {
		_arg2 = C.TRUE
	}

	_cret = C.webkit_dom_dom_selection_contains_node(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(node)
	runtime.KeepAlive(allowPartial)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// DeleteFromDocument: deprecated: Use JavaScriptCore API instead.
func (self *DOMDOMSelection) DeleteFromDocument() {
	var _arg0 *C.WebKitDOMDOMSelection // out

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_dom_selection_delete_from_document(_arg0)
	runtime.KeepAlive(self)
}

// Empty: deprecated: Use JavaScriptCore API instead.
func (self *DOMDOMSelection) Empty() {
	var _arg0 *C.WebKitDOMDOMSelection // out

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_dom_selection_empty(_arg0)
	runtime.KeepAlive(self)
}

// Extend: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - node: KitDOMNode.
//   - offset: #gulong.
//
func (self *DOMDOMSelection) Extend(node *DOMNode, offset uint32) error {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _arg1 *C.WebKitDOMNode         // out
	var _arg2 C.gulong                 // out
	var _cerr *C.GError                // in

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(node).Native()))
	_arg2 = C.gulong(offset)

	C.webkit_dom_dom_selection_extend(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(node)
	runtime.KeepAlive(offset)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// AnchorNode: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMDOMSelection) AnchorNode() *DOMNode {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _cret *C.WebKitDOMNode         // in

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_selection_get_anchor_node(_arg0)
	runtime.KeepAlive(self)

	var _domNode *DOMNode // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))

	return _domNode
}

// AnchorOffset: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gulong: #gulong.
//
func (self *DOMDOMSelection) AnchorOffset() uint32 {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _cret C.gulong                 // in

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_selection_get_anchor_offset(_arg0)
	runtime.KeepAlive(self)

	var _gulong uint32 // out

	_gulong = uint32(_cret)

	return _gulong
}

// BaseNode: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMDOMSelection) BaseNode() *DOMNode {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _cret *C.WebKitDOMNode         // in

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_selection_get_base_node(_arg0)
	runtime.KeepAlive(self)

	var _domNode *DOMNode // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))

	return _domNode
}

// BaseOffset: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gulong: #gulong.
//
func (self *DOMDOMSelection) BaseOffset() uint32 {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _cret C.gulong                 // in

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_selection_get_base_offset(_arg0)
	runtime.KeepAlive(self)

	var _gulong uint32 // out

	_gulong = uint32(_cret)

	return _gulong
}

// ExtentNode: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMDOMSelection) ExtentNode() *DOMNode {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _cret *C.WebKitDOMNode         // in

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_selection_get_extent_node(_arg0)
	runtime.KeepAlive(self)

	var _domNode *DOMNode // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))

	return _domNode
}

// ExtentOffset: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gulong: #gulong.
//
func (self *DOMDOMSelection) ExtentOffset() uint32 {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _cret C.gulong                 // in

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_selection_get_extent_offset(_arg0)
	runtime.KeepAlive(self)

	var _gulong uint32 // out

	_gulong = uint32(_cret)

	return _gulong
}

// FocusNode: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMDOMSelection) FocusNode() *DOMNode {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _cret *C.WebKitDOMNode         // in

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_selection_get_focus_node(_arg0)
	runtime.KeepAlive(self)

	var _domNode *DOMNode // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))

	return _domNode
}

// FocusOffset: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gulong: #gulong.
//
func (self *DOMDOMSelection) FocusOffset() uint32 {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _cret C.gulong                 // in

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_selection_get_focus_offset(_arg0)
	runtime.KeepAlive(self)

	var _gulong uint32 // out

	_gulong = uint32(_cret)

	return _gulong
}

// IsCollapsed: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMDOMSelection) IsCollapsed() bool {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _cret C.gboolean               // in

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_selection_get_is_collapsed(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RangeAt: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - index: #gulong.
//
// The function returns the following values:
//
//   - domRange: KitDOMRange.
//
func (self *DOMDOMSelection) RangeAt(index uint32) (*DOMRange, error) {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _arg1 C.gulong                 // out
	var _cret *C.WebKitDOMRange        // in
	var _cerr *C.GError                // in

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gulong(index)

	_cret = C.webkit_dom_dom_selection_get_range_at(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(index)

	var _domRange *DOMRange // out
	var _goerr error        // out

	_domRange = wrapDOMRange(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domRange, _goerr
}

// RangeCount: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gulong: #gulong.
//
func (self *DOMDOMSelection) RangeCount() uint32 {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _cret C.gulong                 // in

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_selection_get_range_count(_arg0)
	runtime.KeepAlive(self)

	var _gulong uint32 // out

	_gulong = uint32(_cret)

	return _gulong
}

// SelectionType: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDOMSelection) SelectionType() string {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _cret *C.gchar                 // in

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_selection_get_selection_type(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Modify: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - alter: #gchar.
//   - direction: #gchar.
//   - granularity: #gchar.
//
func (self *DOMDOMSelection) Modify(alter, direction, granularity string) {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _arg1 *C.gchar                 // out
	var _arg2 *C.gchar                 // out
	var _arg3 *C.gchar                 // out

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(alter)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(direction)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(granularity)))
	defer C.free(unsafe.Pointer(_arg3))

	C.webkit_dom_dom_selection_modify(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(self)
	runtime.KeepAlive(alter)
	runtime.KeepAlive(direction)
	runtime.KeepAlive(granularity)
}

// RemoveAllRanges: deprecated: Use JavaScriptCore API instead.
func (self *DOMDOMSelection) RemoveAllRanges() {
	var _arg0 *C.WebKitDOMDOMSelection // out

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_dom_selection_remove_all_ranges(_arg0)
	runtime.KeepAlive(self)
}

// SelectAllChildren: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - node: KitDOMNode.
//
func (self *DOMDOMSelection) SelectAllChildren(node *DOMNode) {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _arg1 *C.WebKitDOMNode         // out

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(node).Native()))

	C.webkit_dom_dom_selection_select_all_children(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(node)
}

// SetBaseAndExtent: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - baseNode: KitDOMNode.
//   - baseOffset: #gulong.
//   - extentNode: KitDOMNode.
//   - extentOffset: #gulong.
//
func (self *DOMDOMSelection) SetBaseAndExtent(baseNode *DOMNode, baseOffset uint32, extentNode *DOMNode, extentOffset uint32) {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _arg1 *C.WebKitDOMNode         // out
	var _arg2 C.gulong                 // out
	var _arg3 *C.WebKitDOMNode         // out
	var _arg4 C.gulong                 // out

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(baseNode).Native()))
	_arg2 = C.gulong(baseOffset)
	_arg3 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(extentNode).Native()))
	_arg4 = C.gulong(extentOffset)

	C.webkit_dom_dom_selection_set_base_and_extent(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(self)
	runtime.KeepAlive(baseNode)
	runtime.KeepAlive(baseOffset)
	runtime.KeepAlive(extentNode)
	runtime.KeepAlive(extentOffset)
}

// SetPosition: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - node: KitDOMNode.
//   - offset: #gulong.
//
func (self *DOMDOMSelection) SetPosition(node *DOMNode, offset uint32) {
	var _arg0 *C.WebKitDOMDOMSelection // out
	var _arg1 *C.WebKitDOMNode         // out
	var _arg2 C.gulong                 // out

	_arg0 = (*C.WebKitDOMDOMSelection)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(node).Native()))
	_arg2 = C.gulong(offset)

	C.webkit_dom_dom_selection_set_position(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(node)
	runtime.KeepAlive(offset)
}

// DOMDOMSelectionClass: instance of this type is always passed by reference.
type DOMDOMSelectionClass struct {
	*domdomSelectionClass
}

// domdomSelectionClass is the struct that's finalized.
type domdomSelectionClass struct {
	native *C.WebKitDOMDOMSelectionClass
}

func (d *DOMDOMSelectionClass) ParentClass() *DOMObjectClass {
	valptr := &d.native.parent_class
	var _v *DOMObjectClass // out
	_v = (*DOMObjectClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
