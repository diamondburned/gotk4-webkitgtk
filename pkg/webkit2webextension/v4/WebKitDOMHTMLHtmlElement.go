// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMHTMLHtmlElement = coreglib.Type(C.webkit_dom_html_html_element_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMHTMLHtmlElement, F: marshalDOMHTMLHtmlElement},
	})
}

// DOMHTMLHtmlElementOverrides contains methods that are overridable.
type DOMHTMLHtmlElementOverrides struct {
}

func defaultDOMHTMLHtmlElementOverrides(v *DOMHTMLHtmlElement) DOMHTMLHtmlElementOverrides {
	return DOMHTMLHtmlElementOverrides{}
}

type DOMHTMLHtmlElement struct {
	_ [0]func() // equal guard
	DOMHTMLElement
}

var (
	_ coreglib.Objector = (*DOMHTMLHtmlElement)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMHTMLHtmlElement, *DOMHTMLHtmlElementClass, DOMHTMLHtmlElementOverrides](
		GTypeDOMHTMLHtmlElement,
		initDOMHTMLHtmlElementClass,
		wrapDOMHTMLHtmlElement,
		defaultDOMHTMLHtmlElementOverrides,
	)
}

func initDOMHTMLHtmlElementClass(gclass unsafe.Pointer, overrides DOMHTMLHtmlElementOverrides, classInitFunc func(*DOMHTMLHtmlElementClass)) {
	if classInitFunc != nil {
		class := (*DOMHTMLHtmlElementClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMHTMLHtmlElement(obj *coreglib.Object) *DOMHTMLHtmlElement {
	return &DOMHTMLHtmlElement{
		DOMHTMLElement: DOMHTMLElement{
			DOMElement: DOMElement{
				DOMNode: DOMNode{
					DOMObject: DOMObject{
						Object: obj,
					},
					Object: obj,
					DOMEventTarget: DOMEventTarget{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalDOMHTMLHtmlElement(p uintptr) (interface{}, error) {
	return wrapDOMHTMLHtmlElement(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Version: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLHtmlElement) Version() string {
	var _arg0 *C.WebKitDOMHTMLHtmlElement // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.WebKitDOMHTMLHtmlElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_html_element_get_version(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SetVersion: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLHtmlElement) SetVersion(value string) {
	var _arg0 *C.WebKitDOMHTMLHtmlElement // out
	var _arg1 *C.gchar                    // out

	_arg0 = (*C.WebKitDOMHTMLHtmlElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_html_element_set_version(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// DOMHTMLHtmlElementClass: instance of this type is always passed by reference.
type DOMHTMLHtmlElementClass struct {
	*domhtmlHtmlElementClass
}

// domhtmlHtmlElementClass is the struct that's finalized.
type domhtmlHtmlElementClass struct {
	native *C.WebKitDOMHTMLHtmlElementClass
}

func (d *DOMHTMLHtmlElementClass) ParentClass() *DOMHTMLElementClass {
	valptr := &d.native.parent_class
	var _v *DOMHTMLElementClass // out
	_v = (*DOMHTMLElementClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
