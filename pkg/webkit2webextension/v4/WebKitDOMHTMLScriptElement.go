// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMHTMLScriptElement = coreglib.Type(C.webkit_dom_html_script_element_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMHTMLScriptElement, F: marshalDOMHTMLScriptElement},
	})
}

// DOMHTMLScriptElementOverrides contains methods that are overridable.
type DOMHTMLScriptElementOverrides struct {
}

func defaultDOMHTMLScriptElementOverrides(v *DOMHTMLScriptElement) DOMHTMLScriptElementOverrides {
	return DOMHTMLScriptElementOverrides{}
}

type DOMHTMLScriptElement struct {
	_ [0]func() // equal guard
	DOMHTMLElement
}

var (
	_ coreglib.Objector = (*DOMHTMLScriptElement)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMHTMLScriptElement, *DOMHTMLScriptElementClass, DOMHTMLScriptElementOverrides](
		GTypeDOMHTMLScriptElement,
		initDOMHTMLScriptElementClass,
		wrapDOMHTMLScriptElement,
		defaultDOMHTMLScriptElementOverrides,
	)
}

func initDOMHTMLScriptElementClass(gclass unsafe.Pointer, overrides DOMHTMLScriptElementOverrides, classInitFunc func(*DOMHTMLScriptElementClass)) {
	if classInitFunc != nil {
		class := (*DOMHTMLScriptElementClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMHTMLScriptElement(obj *coreglib.Object) *DOMHTMLScriptElement {
	return &DOMHTMLScriptElement{
		DOMHTMLElement: DOMHTMLElement{
			DOMElement: DOMElement{
				DOMNode: DOMNode{
					DOMObject: DOMObject{
						Object: obj,
					},
					Object: obj,
					DOMEventTarget: DOMEventTarget{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalDOMHTMLScriptElement(p uintptr) (interface{}, error) {
	return wrapDOMHTMLScriptElement(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Charset: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLScriptElement) Charset() string {
	var _arg0 *C.WebKitDOMHTMLScriptElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLScriptElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_script_element_get_charset(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Defer: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMHTMLScriptElement) Defer() bool {
	var _arg0 *C.WebKitDOMHTMLScriptElement // out
	var _cret C.gboolean                    // in

	_arg0 = (*C.WebKitDOMHTMLScriptElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_script_element_get_defer(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Event: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLScriptElement) Event() string {
	var _arg0 *C.WebKitDOMHTMLScriptElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLScriptElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_script_element_get_event(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// HtmlFor: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLScriptElement) HtmlFor() string {
	var _arg0 *C.WebKitDOMHTMLScriptElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLScriptElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_script_element_get_html_for(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Src: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLScriptElement) Src() string {
	var _arg0 *C.WebKitDOMHTMLScriptElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLScriptElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_script_element_get_src(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Text: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLScriptElement) Text() string {
	var _arg0 *C.WebKitDOMHTMLScriptElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLScriptElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_script_element_get_text(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// TypeAttr: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLScriptElement) TypeAttr() string {
	var _arg0 *C.WebKitDOMHTMLScriptElement // out
	var _cret *C.gchar                      // in

	_arg0 = (*C.WebKitDOMHTMLScriptElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_script_element_get_type_attr(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SetCharset: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLScriptElement) SetCharset(value string) {
	var _arg0 *C.WebKitDOMHTMLScriptElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLScriptElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_script_element_set_charset(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetDefer: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gboolean.
//
func (self *DOMHTMLScriptElement) SetDefer(value bool) {
	var _arg0 *C.WebKitDOMHTMLScriptElement // out
	var _arg1 C.gboolean                    // out

	_arg0 = (*C.WebKitDOMHTMLScriptElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if value {
		_arg1 = C.TRUE
	}

	C.webkit_dom_html_script_element_set_defer(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetEvent: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLScriptElement) SetEvent(value string) {
	var _arg0 *C.WebKitDOMHTMLScriptElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLScriptElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_script_element_set_event(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetHtmlFor: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLScriptElement) SetHtmlFor(value string) {
	var _arg0 *C.WebKitDOMHTMLScriptElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLScriptElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_script_element_set_html_for(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetSrc: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLScriptElement) SetSrc(value string) {
	var _arg0 *C.WebKitDOMHTMLScriptElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLScriptElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_script_element_set_src(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetText: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLScriptElement) SetText(value string) {
	var _arg0 *C.WebKitDOMHTMLScriptElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLScriptElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_script_element_set_text(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetTypeAttr: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLScriptElement) SetTypeAttr(value string) {
	var _arg0 *C.WebKitDOMHTMLScriptElement // out
	var _arg1 *C.gchar                      // out

	_arg0 = (*C.WebKitDOMHTMLScriptElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_script_element_set_type_attr(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// DOMHTMLScriptElementClass: instance of this type is always passed by
// reference.
type DOMHTMLScriptElementClass struct {
	*domhtmlScriptElementClass
}

// domhtmlScriptElementClass is the struct that's finalized.
type domhtmlScriptElementClass struct {
	native *C.WebKitDOMHTMLScriptElementClass
}

func (d *DOMHTMLScriptElementClass) ParentClass() *DOMHTMLElementClass {
	valptr := &d.native.parent_class
	var _v *DOMHTMLElementClass // out
	_v = (*DOMHTMLElementClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
