// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4-webkitgtk/pkg/javascriptcore/v4"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeWebHitTestResult = coreglib.Type(C.webkit_web_hit_test_result_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeWebHitTestResult, F: marshalWebHitTestResult},
	})
}

// WebHitTestResultOverrides contains methods that are overridable.
type WebHitTestResultOverrides struct {
}

func defaultWebHitTestResultOverrides(v *WebHitTestResult) WebHitTestResultOverrides {
	return WebHitTestResultOverrides{}
}

// WebHitTestResult: result of a Hit Test (Web Process Extensions).
//
// WebKitWebHitTestResult extends KitHitTestResult to provide information about
// the KitDOMNode in the coordinates of the Hit Test.
type WebHitTestResult struct {
	_ [0]func() // equal guard
	HitTestResult
}

var (
	_ coreglib.Objector = (*WebHitTestResult)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*WebHitTestResult, *WebHitTestResultClass, WebHitTestResultOverrides](
		GTypeWebHitTestResult,
		initWebHitTestResultClass,
		wrapWebHitTestResult,
		defaultWebHitTestResultOverrides,
	)
}

func initWebHitTestResultClass(gclass unsafe.Pointer, overrides WebHitTestResultOverrides, classInitFunc func(*WebHitTestResultClass)) {
	if classInitFunc != nil {
		class := (*WebHitTestResultClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapWebHitTestResult(obj *coreglib.Object) *WebHitTestResult {
	return &WebHitTestResult{
		HitTestResult: HitTestResult{
			Object: obj,
		},
	}
}

func marshalWebHitTestResult(p uintptr) (interface{}, error) {
	return wrapWebHitTestResult(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// JsNode: get the CValue for the DOM node in world at the coordinates of the
// Hit Test.
//
// The function takes the following parameters:
//
//   - world (optional) or NULL to use the default.
//
// The function returns the following values:
//
//   - value (optional) for the DOM node, or NULL.
//
func (webHitTestResult *WebHitTestResult) JsNode(world *ScriptWorld) *javascriptcore.Value {
	var _arg0 *C.WebKitWebHitTestResult // out
	var _arg1 *C.WebKitScriptWorld      // out
	var _cret *C.JSCValue               // in

	_arg0 = (*C.WebKitWebHitTestResult)(unsafe.Pointer(coreglib.InternObject(webHitTestResult).Native()))
	if world != nil {
		_arg1 = (*C.WebKitScriptWorld)(unsafe.Pointer(coreglib.InternObject(world).Native()))
	}

	_cret = C.webkit_web_hit_test_result_get_js_node(_arg0, _arg1)
	runtime.KeepAlive(webHitTestResult)
	runtime.KeepAlive(world)

	var _value *javascriptcore.Value // out

	if _cret != nil {
		{
			obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
			_value = &javascriptcore.Value{
				Object: obj,
			}
		}
	}

	return _value
}

// Node: get the KitDOMNode in the coordinates of the Hit Test.
//
// Deprecated: Use webkit_web_hit_test_result_get_js_node() instead.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (hitTestResult *WebHitTestResult) Node() *DOMNode {
	var _arg0 *C.WebKitWebHitTestResult // out
	var _cret *C.WebKitDOMNode          // in

	_arg0 = (*C.WebKitWebHitTestResult)(unsafe.Pointer(coreglib.InternObject(hitTestResult).Native()))

	_cret = C.webkit_web_hit_test_result_get_node(_arg0)
	runtime.KeepAlive(hitTestResult)

	var _domNode *DOMNode // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))

	return _domNode
}
