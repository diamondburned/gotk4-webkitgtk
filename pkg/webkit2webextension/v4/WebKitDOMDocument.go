// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMDocument = coreglib.Type(C.webkit_dom_document_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMDocument, F: marshalDOMDocument},
	})
}

// DOMDocumentOverrides contains methods that are overridable.
type DOMDocumentOverrides struct {
}

func defaultDOMDocumentOverrides(v *DOMDocument) DOMDocumentOverrides {
	return DOMDocumentOverrides{}
}

type DOMDocument struct {
	_ [0]func() // equal guard
	DOMNode
}

var (
	_ coreglib.Objector = (*DOMDocument)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMDocument, *DOMDocumentClass, DOMDocumentOverrides](
		GTypeDOMDocument,
		initDOMDocumentClass,
		wrapDOMDocument,
		defaultDOMDocumentOverrides,
	)
}

func initDOMDocumentClass(gclass unsafe.Pointer, overrides DOMDocumentOverrides, classInitFunc func(*DOMDocumentClass)) {
	if classInitFunc != nil {
		class := (*DOMDocumentClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMDocument(obj *coreglib.Object) *DOMDocument {
	return &DOMDocument{
		DOMNode: DOMNode{
			DOMObject: DOMObject{
				Object: obj,
			},
			Object: obj,
			DOMEventTarget: DOMEventTarget{
				Object: obj,
			},
		},
	}
}

func marshalDOMDocument(p uintptr) (interface{}, error) {
	return wrapDOMDocument(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// AdoptNode: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - source: KitDOMNode.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMDocument) AdoptNode(source *DOMNode) (*DOMNode, error) {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.WebKitDOMNode     // out
	var _cret *C.WebKitDOMNode     // in
	var _cerr *C.GError            // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(source).Native()))

	_cret = C.webkit_dom_document_adopt_node(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(source)

	var _domNode *DOMNode // out
	var _goerr error      // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domNode, _goerr
}

// CaretRangeFromPoint: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - x: #glong.
//   - y: #glong.
//
// The function returns the following values:
//
//   - domRange: KitDOMRange.
//
func (self *DOMDocument) CaretRangeFromPoint(x, y int32) *DOMRange {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 C.glong              // out
	var _arg2 C.glong              // out
	var _cret *C.WebKitDOMRange    // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(x)
	_arg2 = C.glong(y)

	_cret = C.webkit_dom_document_caret_range_from_point(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _domRange *DOMRange // out

	_domRange = wrapDOMRange(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domRange
}

// CreateAttribute: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - name: #gchar.
//
// The function returns the following values:
//
//   - domAttr: KitDOMAttr.
//
func (self *DOMDocument) CreateAttribute(name string) (*DOMAttr, error) {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _cret *C.WebKitDOMAttr     // in
	var _cerr *C.GError            // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_create_attribute(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(name)

	var _domAttr *DOMAttr // out
	var _goerr error      // out

	_domAttr = wrapDOMAttr(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domAttr, _goerr
}

// CreateAttributeNs: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - namespaceURI (optional): #gchar.
//   - qualifiedName: #gchar.
//
// The function returns the following values:
//
//   - domAttr: KitDOMAttr.
//
func (self *DOMDocument) CreateAttributeNs(namespaceURI, qualifiedName string) (*DOMAttr, error) {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _arg2 *C.gchar             // out
	var _cret *C.WebKitDOMAttr     // in
	var _cerr *C.GError            // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if namespaceURI != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(namespaceURI)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(qualifiedName)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.webkit_dom_document_create_attribute_ns(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(namespaceURI)
	runtime.KeepAlive(qualifiedName)

	var _domAttr *DOMAttr // out
	var _goerr error      // out

	_domAttr = wrapDOMAttr(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domAttr, _goerr
}

// CreateCdataSection: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - data: #gchar.
//
// The function returns the following values:
//
//   - domcdataSection: KitDOMCDATASection.
//
func (self *DOMDocument) CreateCdataSection(data string) (*DOMCDATASection, error) {
	var _arg0 *C.WebKitDOMDocument     // out
	var _arg1 *C.gchar                 // out
	var _cret *C.WebKitDOMCDATASection // in
	var _cerr *C.GError                // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(data)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_create_cdata_section(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(data)

	var _domcdataSection *DOMCDATASection // out
	var _goerr error                      // out

	_domcdataSection = wrapDOMCDATASection(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domcdataSection, _goerr
}

// CreateComment: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - data: #gchar.
//
// The function returns the following values:
//
//   - domComment: KitDOMComment.
//
func (self *DOMDocument) CreateComment(data string) *DOMComment {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _cret *C.WebKitDOMComment  // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(data)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_create_comment(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(data)

	var _domComment *DOMComment // out

	_domComment = wrapDOMComment(coreglib.Take(unsafe.Pointer(_cret)))

	return _domComment
}

// CreateCSSStyleDeclaration: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domcssStyleDeclaration: KitDOMCSSStyleDeclaration.
//
func (self *DOMDocument) CreateCSSStyleDeclaration() *DOMCSSStyleDeclaration {
	var _arg0 *C.WebKitDOMDocument            // out
	var _cret *C.WebKitDOMCSSStyleDeclaration // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_create_css_style_declaration(_arg0)
	runtime.KeepAlive(self)

	var _domcssStyleDeclaration *DOMCSSStyleDeclaration // out

	_domcssStyleDeclaration = wrapDOMCSSStyleDeclaration(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domcssStyleDeclaration
}

// CreateDocumentFragment: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domDocumentFragment: KitDOMDocumentFragment.
//
func (self *DOMDocument) CreateDocumentFragment() *DOMDocumentFragment {
	var _arg0 *C.WebKitDOMDocument         // out
	var _cret *C.WebKitDOMDocumentFragment // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_create_document_fragment(_arg0)
	runtime.KeepAlive(self)

	var _domDocumentFragment *DOMDocumentFragment // out

	_domDocumentFragment = wrapDOMDocumentFragment(coreglib.Take(unsafe.Pointer(_cret)))

	return _domDocumentFragment
}

// CreateElement: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - tagName: #gchar.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMDocument) CreateElement(tagName string) (*DOMElement, error) {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _cret *C.WebKitDOMElement  // in
	var _cerr *C.GError            // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(tagName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_create_element(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(tagName)

	var _domElement *DOMElement // out
	var _goerr error            // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domElement, _goerr
}

// CreateElementNs: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - namespaceURI (optional): #gchar.
//   - qualifiedName: #gchar.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMDocument) CreateElementNs(namespaceURI, qualifiedName string) (*DOMElement, error) {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _arg2 *C.gchar             // out
	var _cret *C.WebKitDOMElement  // in
	var _cerr *C.GError            // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if namespaceURI != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(namespaceURI)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(qualifiedName)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.webkit_dom_document_create_element_ns(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(namespaceURI)
	runtime.KeepAlive(qualifiedName)

	var _domElement *DOMElement // out
	var _goerr error            // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domElement, _goerr
}

// CreateEntityReference: this function has been removed from the DOM spec and
// it just returns NULL.
//
// Deprecated: since version 2.12.
//
// The function takes the following parameters:
//
//   - name (optional): #gchar.
//
// The function returns the following values:
//
//   - domEntityReference: KitDOMEntityReference.
//
func (self *DOMDocument) CreateEntityReference(name string) (*DOMEntityReference, error) {
	var _arg0 *C.WebKitDOMDocument        // out
	var _arg1 *C.gchar                    // out
	var _cret *C.WebKitDOMEntityReference // in
	var _cerr *C.GError                   // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if name != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	_cret = C.webkit_dom_document_create_entity_reference(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(name)

	var _domEntityReference *DOMEntityReference // out
	var _goerr error                            // out

	_domEntityReference = wrapDOMEntityReference(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domEntityReference, _goerr
}

// CreateEvent: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - eventType: #gchar.
//
// The function returns the following values:
//
//   - domEvent: KitDOMEvent.
//
func (self *DOMDocument) CreateEvent(eventType string) (*DOMEvent, error) {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _cret *C.WebKitDOMEvent    // in
	var _cerr *C.GError            // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(eventType)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_create_event(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(eventType)

	var _domEvent *DOMEvent // out
	var _goerr error        // out

	_domEvent = wrapDOMEvent(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domEvent, _goerr
}

// CreateExpression: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - expression: #gchar.
//   - resolver: KitDOMXPathNSResolver.
//
// The function returns the following values:
//
//   - domxPathExpression: KitDOMXPathExpression.
//
func (self *DOMDocument) CreateExpression(expression string, resolver DOMXPathNSResolverer) (*DOMXPathExpression, error) {
	var _arg0 *C.WebKitDOMDocument        // out
	var _arg1 *C.gchar                    // out
	var _arg2 *C.WebKitDOMXPathNSResolver // out
	var _cret *C.WebKitDOMXPathExpression // in
	var _cerr *C.GError                   // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(expression)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.WebKitDOMXPathNSResolver)(unsafe.Pointer(coreglib.InternObject(resolver).Native()))

	_cret = C.webkit_dom_document_create_expression(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(expression)
	runtime.KeepAlive(resolver)

	var _domxPathExpression *DOMXPathExpression // out
	var _goerr error                            // out

	_domxPathExpression = wrapDOMXPathExpression(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domxPathExpression, _goerr
}

// CreateNodeIterator: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - root: KitDOMNode.
//   - whatToShow: #gulong.
//   - filter (optional): KitDOMNodeFilter.
//   - expandEntityReferences: #gboolean.
//
// The function returns the following values:
//
//   - domNodeIterator: KitDOMNodeIterator.
//
func (self *DOMDocument) CreateNodeIterator(root *DOMNode, whatToShow uint32, filter DOMNodeFilterer, expandEntityReferences bool) (*DOMNodeIterator, error) {
	var _arg0 *C.WebKitDOMDocument     // out
	var _arg1 *C.WebKitDOMNode         // out
	var _arg2 C.gulong                 // out
	var _arg3 *C.WebKitDOMNodeFilter   // out
	var _arg4 C.gboolean               // out
	var _cret *C.WebKitDOMNodeIterator // in
	var _cerr *C.GError                // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(root).Native()))
	_arg2 = C.gulong(whatToShow)
	if filter != nil {
		_arg3 = (*C.WebKitDOMNodeFilter)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	}
	if expandEntityReferences {
		_arg4 = C.TRUE
	}

	_cret = C.webkit_dom_document_create_node_iterator(_arg0, _arg1, _arg2, _arg3, _arg4, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(root)
	runtime.KeepAlive(whatToShow)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(expandEntityReferences)

	var _domNodeIterator *DOMNodeIterator // out
	var _goerr error                      // out

	_domNodeIterator = wrapDOMNodeIterator(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domNodeIterator, _goerr
}

// CreateNsResolver: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - nodeResolver: KitDOMNode.
//
// The function returns the following values:
//
//   - domxPathNSResolver: KitDOMXPathNSResolver.
//
func (self *DOMDocument) CreateNsResolver(nodeResolver *DOMNode) *DOMXPathNSResolver {
	var _arg0 *C.WebKitDOMDocument        // out
	var _arg1 *C.WebKitDOMNode            // out
	var _cret *C.WebKitDOMXPathNSResolver // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(nodeResolver).Native()))

	_cret = C.webkit_dom_document_create_ns_resolver(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(nodeResolver)

	var _domxPathNSResolver *DOMXPathNSResolver // out

	_domxPathNSResolver = wrapDOMXPathNSResolver(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domxPathNSResolver
}

// CreateProcessingInstruction: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - target: #gchar.
//   - data: #gchar.
//
// The function returns the following values:
//
//   - domProcessingInstruction: KitDOMProcessingInstruction.
//
func (self *DOMDocument) CreateProcessingInstruction(target, data string) (*DOMProcessingInstruction, error) {
	var _arg0 *C.WebKitDOMDocument              // out
	var _arg1 *C.gchar                          // out
	var _arg2 *C.gchar                          // out
	var _cret *C.WebKitDOMProcessingInstruction // in
	var _cerr *C.GError                         // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(target)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(data)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.webkit_dom_document_create_processing_instruction(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(target)
	runtime.KeepAlive(data)

	var _domProcessingInstruction *DOMProcessingInstruction // out
	var _goerr error                                        // out

	_domProcessingInstruction = wrapDOMProcessingInstruction(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domProcessingInstruction, _goerr
}

// CreateRange: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domRange: KitDOMRange.
//
func (self *DOMDocument) CreateRange() *DOMRange {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.WebKitDOMRange    // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_create_range(_arg0)
	runtime.KeepAlive(self)

	var _domRange *DOMRange // out

	_domRange = wrapDOMRange(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domRange
}

// CreateTextNode: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - data: #gchar.
//
// The function returns the following values:
//
//   - domText: KitDOMText.
//
func (self *DOMDocument) CreateTextNode(data string) *DOMText {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _cret *C.WebKitDOMText     // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(data)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_create_text_node(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(data)

	var _domText *DOMText // out

	_domText = wrapDOMText(coreglib.Take(unsafe.Pointer(_cret)))

	return _domText
}

// CreateTreeWalker: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - root: KitDOMNode.
//   - whatToShow: #gulong.
//   - filter (optional): KitDOMNodeFilter.
//   - expandEntityReferences: #gboolean.
//
// The function returns the following values:
//
//   - domTreeWalker: KitDOMTreeWalker.
//
func (self *DOMDocument) CreateTreeWalker(root *DOMNode, whatToShow uint32, filter DOMNodeFilterer, expandEntityReferences bool) (*DOMTreeWalker, error) {
	var _arg0 *C.WebKitDOMDocument   // out
	var _arg1 *C.WebKitDOMNode       // out
	var _arg2 C.gulong               // out
	var _arg3 *C.WebKitDOMNodeFilter // out
	var _arg4 C.gboolean             // out
	var _cret *C.WebKitDOMTreeWalker // in
	var _cerr *C.GError              // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(root).Native()))
	_arg2 = C.gulong(whatToShow)
	if filter != nil {
		_arg3 = (*C.WebKitDOMNodeFilter)(unsafe.Pointer(coreglib.InternObject(filter).Native()))
	}
	if expandEntityReferences {
		_arg4 = C.TRUE
	}

	_cret = C.webkit_dom_document_create_tree_walker(_arg0, _arg1, _arg2, _arg3, _arg4, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(root)
	runtime.KeepAlive(whatToShow)
	runtime.KeepAlive(filter)
	runtime.KeepAlive(expandEntityReferences)

	var _domTreeWalker *DOMTreeWalker // out
	var _goerr error                  // out

	_domTreeWalker = wrapDOMTreeWalker(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domTreeWalker, _goerr
}

// ElementFromPoint: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - x: #glong.
//   - y: #glong.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMDocument) ElementFromPoint(x, y int32) *DOMElement {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 C.glong              // out
	var _arg2 C.glong              // out
	var _cret *C.WebKitDOMElement  // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(x)
	_arg2 = C.glong(y)

	_cret = C.webkit_dom_document_element_from_point(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _domElement *DOMElement // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domElement
}

// Evaluate: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - expression: #gchar.
//   - contextNode: KitDOMNode.
//   - resolver (optional): KitDOMXPathNSResolver.
//   - typ: #gushort.
//   - inResult (optional): KitDOMXPathResult.
//
// The function returns the following values:
//
//   - domxPathResult: KitDOMXPathResult.
//
func (self *DOMDocument) Evaluate(expression string, contextNode *DOMNode, resolver DOMXPathNSResolverer, typ uint16, inResult *DOMXPathResult) (*DOMXPathResult, error) {
	var _arg0 *C.WebKitDOMDocument        // out
	var _arg1 *C.gchar                    // out
	var _arg2 *C.WebKitDOMNode            // out
	var _arg3 *C.WebKitDOMXPathNSResolver // out
	var _arg4 C.gushort                   // out
	var _arg5 *C.WebKitDOMXPathResult     // out
	var _cret *C.WebKitDOMXPathResult     // in
	var _cerr *C.GError                   // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(expression)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(contextNode).Native()))
	if resolver != nil {
		_arg3 = (*C.WebKitDOMXPathNSResolver)(unsafe.Pointer(coreglib.InternObject(resolver).Native()))
	}
	_arg4 = C.gushort(typ)
	if inResult != nil {
		_arg5 = (*C.WebKitDOMXPathResult)(unsafe.Pointer(coreglib.InternObject(inResult).Native()))
	}

	_cret = C.webkit_dom_document_evaluate(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(expression)
	runtime.KeepAlive(contextNode)
	runtime.KeepAlive(resolver)
	runtime.KeepAlive(typ)
	runtime.KeepAlive(inResult)

	var _domxPathResult *DOMXPathResult // out
	var _goerr error                    // out

	_domxPathResult = wrapDOMXPathResult(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domxPathResult, _goerr
}

// ExecCommand: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - command: #gchar.
//   - userInterface: #gboolean.
//   - value: #gchar.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMDocument) ExecCommand(command string, userInterface bool, value string) bool {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _arg2 C.gboolean           // out
	var _arg3 *C.gchar             // out
	var _cret C.gboolean           // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(command)))
	defer C.free(unsafe.Pointer(_arg1))
	if userInterface {
		_arg2 = C.TRUE
	}
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg3))

	_cret = C.webkit_dom_document_exec_command(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(self)
	runtime.KeepAlive(command)
	runtime.KeepAlive(userInterface)
	runtime.KeepAlive(value)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ExitPointerLock: deprecated: Use JavaScriptCore API instead.
func (self *DOMDocument) ExitPointerLock() {
	var _arg0 *C.WebKitDOMDocument // out

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_document_exit_pointer_lock(_arg0)
	runtime.KeepAlive(self)
}

// ActiveElement: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMDocument) ActiveElement() *DOMElement {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.WebKitDOMElement  // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_active_element(_arg0)
	runtime.KeepAlive(self)

	var _domElement *DOMElement // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domElement
}

// Anchors: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMDocument) Anchors() *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMDocument       // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_anchors(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// Applets: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMDocument) Applets() *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMDocument       // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_applets(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// Body: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlElement: KitDOMHTMLElement.
//
func (self *DOMDocument) Body() *DOMHTMLElement {
	var _arg0 *C.WebKitDOMDocument    // out
	var _cret *C.WebKitDOMHTMLElement // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_body(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlElement *DOMHTMLElement // out

	_domhtmlElement = wrapDOMHTMLElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domhtmlElement
}

// CharacterSet: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) CharacterSet() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_character_set(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Charset: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) Charset() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_charset(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ChildElementCount: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gulong: #gulong.
//
func (self *DOMDocument) ChildElementCount() uint32 {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret C.gulong             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_child_element_count(_arg0)
	runtime.KeepAlive(self)

	var _gulong uint32 // out

	_gulong = uint32(_cret)

	return _gulong
}

// Children: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMDocument) Children() *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMDocument       // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_children(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// CompatMode: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) CompatMode() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_compat_mode(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ContentType: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) ContentType() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_content_type(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Cookie: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) Cookie() (string, error) {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in
	var _cerr *C.GError            // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_cookie(_arg0, &_cerr)
	runtime.KeepAlive(self)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _utf8, _goerr
}

// CurrentScript: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlScriptElement: KitDOMHTMLScriptElement.
//
func (self *DOMDocument) CurrentScript() *DOMHTMLScriptElement {
	var _arg0 *C.WebKitDOMDocument          // out
	var _cret *C.WebKitDOMHTMLScriptElement // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_current_script(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlScriptElement *DOMHTMLScriptElement // out

	_domhtmlScriptElement = wrapDOMHTMLScriptElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domhtmlScriptElement
}

// DefaultCharset: deprecated: since version 2.14.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) DefaultCharset() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_default_charset(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// DefaultView: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domdomWindow: KitDOMDOMWindow.
//
func (self *DOMDocument) DefaultView() *DOMDOMWindow {
	var _arg0 *C.WebKitDOMDocument  // out
	var _cret *C.WebKitDOMDOMWindow // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_default_view(_arg0)
	runtime.KeepAlive(self)

	var _domdomWindow *DOMDOMWindow // out

	_domdomWindow = wrapDOMDOMWindow(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domdomWindow
}

// DesignMode: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) DesignMode() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_design_mode(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Dir: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) Dir() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_dir(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Doctype: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domDocumentType: KitDOMDocumentType.
//
func (self *DOMDocument) Doctype() *DOMDocumentType {
	var _arg0 *C.WebKitDOMDocument     // out
	var _cret *C.WebKitDOMDocumentType // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_doctype(_arg0)
	runtime.KeepAlive(self)

	var _domDocumentType *DOMDocumentType // out

	_domDocumentType = wrapDOMDocumentType(coreglib.Take(unsafe.Pointer(_cret)))

	return _domDocumentType
}

// DocumentElement: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMDocument) DocumentElement() *DOMElement {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.WebKitDOMElement  // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_document_element(_arg0)
	runtime.KeepAlive(self)

	var _domElement *DOMElement // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domElement
}

// DocumentURI: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) DocumentURI() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_document_uri(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Domain: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) Domain() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_domain(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ElementByID: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - elementId: #gchar.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMDocument) ElementByID(elementId string) *DOMElement {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _cret *C.WebKitDOMElement  // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(elementId)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_get_element_by_id(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(elementId)

	var _domElement *DOMElement // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domElement
}

// ElementsByClassName: deprecated: Use
// webkit_dom_document_get_elements_by_class_name_as_html_collection() instead.
//
// The function takes the following parameters:
//
//   - className with the tag name.
//
// The function returns the following values:
//
//   - domNodeList: KitDOMNodeList.
//
func (self *DOMDocument) ElementsByClassName(className string) *DOMNodeList {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _cret *C.WebKitDOMNodeList // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(className)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_get_elements_by_class_name(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(className)

	var _domNodeList *DOMNodeList // out

	_domNodeList = wrapDOMNodeList(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domNodeList
}

// ElementsByClassNameAsHtmlCollection: deprecated: Use JavaScriptCore API
// instead.
//
// The function takes the following parameters:
//
//   - classNames: #gchar.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMDocument) ElementsByClassNameAsHtmlCollection(classNames string) *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMDocument       // out
	var _arg1 *C.gchar                   // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(classNames)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_get_elements_by_class_name_as_html_collection(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(classNames)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// ElementsByName: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - elementName: #gchar.
//
// The function returns the following values:
//
//   - domNodeList: KitDOMNodeList.
//
func (self *DOMDocument) ElementsByName(elementName string) *DOMNodeList {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _cret *C.WebKitDOMNodeList // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(elementName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_get_elements_by_name(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(elementName)

	var _domNodeList *DOMNodeList // out

	_domNodeList = wrapDOMNodeList(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domNodeList
}

// ElementsByTagName: deprecated: Use
// webkit_dom_document_get_elements_by_tag_name_as_html_collection() instead.
//
// The function takes the following parameters:
//
//   - tagName with the tag name.
//
// The function returns the following values:
//
//   - domNodeList: KitDOMNodeList.
//
func (self *DOMDocument) ElementsByTagName(tagName string) *DOMNodeList {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _cret *C.WebKitDOMNodeList // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(tagName)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_get_elements_by_tag_name(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(tagName)

	var _domNodeList *DOMNodeList // out

	_domNodeList = wrapDOMNodeList(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domNodeList
}

// ElementsByTagNameAsHtmlCollection: deprecated: Use JavaScriptCore API
// instead.
//
// The function takes the following parameters:
//
//   - tagname: #gchar.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMDocument) ElementsByTagNameAsHtmlCollection(tagname string) *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMDocument       // out
	var _arg1 *C.gchar                   // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(tagname)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_get_elements_by_tag_name_as_html_collection(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(tagname)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// ElementsByTagNameNs: deprecated: Use
// webkit_dom_document_get_elements_by_tag_name_ns_as_html_collection() instead.
//
// The function takes the following parameters:
//
//   - namespaceUri with the namespace URI.
//   - tagName with the tag name.
//
// The function returns the following values:
//
//   - domNodeList: KitDOMNodeList.
//
func (self *DOMDocument) ElementsByTagNameNs(namespaceUri, tagName string) *DOMNodeList {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _arg2 *C.gchar             // out
	var _cret *C.WebKitDOMNodeList // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(namespaceUri)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(tagName)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.webkit_dom_document_get_elements_by_tag_name_ns(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(namespaceUri)
	runtime.KeepAlive(tagName)

	var _domNodeList *DOMNodeList // out

	_domNodeList = wrapDOMNodeList(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domNodeList
}

// ElementsByTagNameNsAsHtmlCollection: deprecated: Use JavaScriptCore API
// instead.
//
// The function takes the following parameters:
//
//   - namespaceURI: #gchar.
//   - localName: #gchar.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMDocument) ElementsByTagNameNsAsHtmlCollection(namespaceURI, localName string) *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMDocument       // out
	var _arg1 *C.gchar                   // out
	var _arg2 *C.gchar                   // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(namespaceURI)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(localName)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.webkit_dom_document_get_elements_by_tag_name_ns_as_html_collection(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(namespaceURI)
	runtime.KeepAlive(localName)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// Embeds: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMDocument) Embeds() *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMDocument       // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_embeds(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// FirstElementChild: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMDocument) FirstElementChild() *DOMElement {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.WebKitDOMElement  // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_first_element_child(_arg0)
	runtime.KeepAlive(self)

	var _domElement *DOMElement // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domElement
}

// Forms: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMDocument) Forms() *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMDocument       // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_forms(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// Head: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlHeadElement: KitDOMHTMLHeadElement.
//
func (self *DOMDocument) Head() *DOMHTMLHeadElement {
	var _arg0 *C.WebKitDOMDocument        // out
	var _cret *C.WebKitDOMHTMLHeadElement // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_head(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlHeadElement *DOMHTMLHeadElement // out

	_domhtmlHeadElement = wrapDOMHTMLHeadElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domhtmlHeadElement
}

// Hidden: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMDocument) Hidden() bool {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret C.gboolean           // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_hidden(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Images: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMDocument) Images() *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMDocument       // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_images(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// Implementation: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domdomImplementation: KitDOMDOMImplementation.
//
func (self *DOMDocument) Implementation() *DOMDOMImplementation {
	var _arg0 *C.WebKitDOMDocument          // out
	var _cret *C.WebKitDOMDOMImplementation // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_implementation(_arg0)
	runtime.KeepAlive(self)

	var _domdomImplementation *DOMDOMImplementation // out

	_domdomImplementation = wrapDOMDOMImplementation(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domdomImplementation
}

// InputEncoding: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) InputEncoding() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_input_encoding(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// LastElementChild: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMDocument) LastElementChild() *DOMElement {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.WebKitDOMElement  // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_last_element_child(_arg0)
	runtime.KeepAlive(self)

	var _domElement *DOMElement // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domElement
}

// LastModified: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) LastModified() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_last_modified(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Links: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMDocument) Links() *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMDocument       // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_links(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// Origin: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) Origin() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_origin(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// OverrideStyle: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - element: KitDOMElement.
//   - pseudoElement (optional): #gchar.
//
// The function returns the following values:
//
//   - domcssStyleDeclaration: KitDOMCSSStyleDeclaration.
//
func (self *DOMDocument) OverrideStyle(element *DOMElement, pseudoElement string) *DOMCSSStyleDeclaration {
	var _arg0 *C.WebKitDOMDocument            // out
	var _arg1 *C.WebKitDOMElement             // out
	var _arg2 *C.gchar                        // out
	var _cret *C.WebKitDOMCSSStyleDeclaration // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(element).Native()))
	if pseudoElement != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(pseudoElement)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	_cret = C.webkit_dom_document_get_override_style(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(element)
	runtime.KeepAlive(pseudoElement)

	var _domcssStyleDeclaration *DOMCSSStyleDeclaration // out

	_domcssStyleDeclaration = wrapDOMCSSStyleDeclaration(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domcssStyleDeclaration
}

// Plugins: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMDocument) Plugins() *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMDocument       // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_plugins(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// PointerLockElement: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMDocument) PointerLockElement() *DOMElement {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.WebKitDOMElement  // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_pointer_lock_element(_arg0)
	runtime.KeepAlive(self)

	var _domElement *DOMElement // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domElement
}

// PreferredStylesheetSet: this function has been removed and does nothing.
//
// Deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) PreferredStylesheetSet() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_preferred_stylesheet_set(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ReadyState: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) ReadyState() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_ready_state(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Referrer: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) Referrer() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_referrer(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Scripts: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMDocument) Scripts() *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMDocument       // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_scripts(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// ScrollingElement: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMDocument) ScrollingElement() *DOMElement {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.WebKitDOMElement  // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_scrolling_element(_arg0)
	runtime.KeepAlive(self)

	var _domElement *DOMElement // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domElement
}

// SelectedStylesheetSet: this function has been removed and does nothing.
//
// Deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) SelectedStylesheetSet() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_selected_stylesheet_set(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// StyleSheets: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domStyleSheetList: KitDOMStyleSheetList.
//
func (self *DOMDocument) StyleSheets() *DOMStyleSheetList {
	var _arg0 *C.WebKitDOMDocument       // out
	var _cret *C.WebKitDOMStyleSheetList // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_style_sheets(_arg0)
	runtime.KeepAlive(self)

	var _domStyleSheetList *DOMStyleSheetList // out

	_domStyleSheetList = wrapDOMStyleSheetList(coreglib.Take(unsafe.Pointer(_cret)))

	return _domStyleSheetList
}

// Title: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) Title() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_title(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// URL: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) URL() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_url(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// VisibilityState: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) VisibilityState() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_visibility_state(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// WebkitCurrentFullscreenElement: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMDocument) WebkitCurrentFullscreenElement() *DOMElement {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.WebKitDOMElement  // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_webkit_current_fullscreen_element(_arg0)
	runtime.KeepAlive(self)

	var _domElement *DOMElement // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domElement
}

// WebkitFullscreenElement: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMDocument) WebkitFullscreenElement() *DOMElement {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.WebKitDOMElement  // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_webkit_fullscreen_element(_arg0)
	runtime.KeepAlive(self)

	var _domElement *DOMElement // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domElement
}

// WebkitFullscreenEnabled: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMDocument) WebkitFullscreenEnabled() bool {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret C.gboolean           // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_webkit_fullscreen_enabled(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// WebkitFullscreenKeyboardInputAllowed: deprecated: Use JavaScriptCore API
// instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMDocument) WebkitFullscreenKeyboardInputAllowed() bool {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret C.gboolean           // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_webkit_fullscreen_keyboard_input_allowed(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// WebkitIsFullscreen: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMDocument) WebkitIsFullscreen() bool {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret C.gboolean           // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_webkit_is_fullscreen(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// XMLEncoding: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) XMLEncoding() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_xml_encoding(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// XMLStandalone: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMDocument) XMLStandalone() bool {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret C.gboolean           // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_xml_standalone(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// XMLVersion: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) XMLVersion() string {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_get_xml_version(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// HasFocus: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMDocument) HasFocus() bool {
	var _arg0 *C.WebKitDOMDocument // out
	var _cret C.gboolean           // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_document_has_focus(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ImportNode: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - importedNode: KitDOMNode.
//   - deep: #gboolean.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMDocument) ImportNode(importedNode *DOMNode, deep bool) (*DOMNode, error) {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.WebKitDOMNode     // out
	var _arg2 C.gboolean           // out
	var _cret *C.WebKitDOMNode     // in
	var _cerr *C.GError            // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(importedNode).Native()))
	if deep {
		_arg2 = C.TRUE
	}

	_cret = C.webkit_dom_document_import_node(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(importedNode)
	runtime.KeepAlive(deep)

	var _domNode *DOMNode // out
	var _goerr error      // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domNode, _goerr
}

// QueryCommandEnabled: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - command: #gchar.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMDocument) QueryCommandEnabled(command string) bool {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _cret C.gboolean           // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(command)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_query_command_enabled(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(command)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// QueryCommandIndeterm: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - command: #gchar.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMDocument) QueryCommandIndeterm(command string) bool {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _cret C.gboolean           // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(command)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_query_command_indeterm(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(command)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// QueryCommandState: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - command: #gchar.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMDocument) QueryCommandState(command string) bool {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _cret C.gboolean           // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(command)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_query_command_state(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(command)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// QueryCommandSupported: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - command: #gchar.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMDocument) QueryCommandSupported(command string) bool {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _cret C.gboolean           // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(command)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_query_command_supported(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(command)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// QueryCommandValue: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - command: #gchar.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDocument) QueryCommandValue(command string) string {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(command)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_query_command_value(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(command)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// QuerySelector: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - selectors: #gchar.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMDocument) QuerySelector(selectors string) (*DOMElement, error) {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _cret *C.WebKitDOMElement  // in
	var _cerr *C.GError            // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(selectors)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_query_selector(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(selectors)

	var _domElement *DOMElement // out
	var _goerr error            // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domElement, _goerr
}

// QuerySelectorAll: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - selectors: #gchar.
//
// The function returns the following values:
//
//   - domNodeList: KitDOMNodeList.
//
func (self *DOMDocument) QuerySelectorAll(selectors string) (*DOMNodeList, error) {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _cret *C.WebKitDOMNodeList // in
	var _cerr *C.GError            // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(selectors)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_document_query_selector_all(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(selectors)

	var _domNodeList *DOMNodeList // out
	var _goerr error              // out

	_domNodeList = wrapDOMNodeList(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domNodeList, _goerr
}

// SetBody: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: KitDOMHTMLElement.
//
func (self *DOMDocument) SetBody(value *DOMHTMLElement) error {
	var _arg0 *C.WebKitDOMDocument    // out
	var _arg1 *C.WebKitDOMHTMLElement // out
	var _cerr *C.GError               // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(value).Native()))

	C.webkit_dom_document_set_body(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetCharset: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMDocument) SetCharset(value string) {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_document_set_charset(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetCookie: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMDocument) SetCookie(value string) error {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _cerr *C.GError            // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_document_set_cookie(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetDesignMode: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMDocument) SetDesignMode(value string) {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_document_set_design_mode(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetDir: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMDocument) SetDir(value string) {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_document_set_dir(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetDocumentURI: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMDocument) SetDocumentURI(value string) {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_document_set_document_uri(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetSelectedStylesheetSet: this function has been removed and does nothing.
//
// Deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMDocument) SetSelectedStylesheetSet(value string) {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_document_set_selected_stylesheet_set(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetTitle: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMDocument) SetTitle(value string) {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_document_set_title(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetXMLStandalone: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gboolean.
//
func (self *DOMDocument) SetXMLStandalone(value bool) error {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 C.gboolean           // out
	var _cerr *C.GError            // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if value {
		_arg1 = C.TRUE
	}

	C.webkit_dom_document_set_xml_standalone(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetXMLVersion: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMDocument) SetXMLVersion(value string) error {
	var _arg0 *C.WebKitDOMDocument // out
	var _arg1 *C.gchar             // out
	var _cerr *C.GError            // in

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_document_set_xml_version(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// WebkitCancelFullscreen: deprecated: Use JavaScriptCore API instead.
func (self *DOMDocument) WebkitCancelFullscreen() {
	var _arg0 *C.WebKitDOMDocument // out

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_document_webkit_cancel_fullscreen(_arg0)
	runtime.KeepAlive(self)
}

// WebkitExitFullscreen: deprecated: Use JavaScriptCore API instead.
func (self *DOMDocument) WebkitExitFullscreen() {
	var _arg0 *C.WebKitDOMDocument // out

	_arg0 = (*C.WebKitDOMDocument)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_document_webkit_exit_fullscreen(_arg0)
	runtime.KeepAlive(self)
}

// DOMDocumentClass: instance of this type is always passed by reference.
type DOMDocumentClass struct {
	*domDocumentClass
}

// domDocumentClass is the struct that's finalized.
type domDocumentClass struct {
	native *C.WebKitDOMDocumentClass
}

func (d *DOMDocumentClass) ParentClass() *DOMNodeClass {
	valptr := &d.native.parent_class
	var _v *DOMNodeClass // out
	_v = (*DOMNodeClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
