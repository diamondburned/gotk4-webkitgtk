// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMHTMLBodyElement = coreglib.Type(C.webkit_dom_html_body_element_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMHTMLBodyElement, F: marshalDOMHTMLBodyElement},
	})
}

// DOMHTMLBodyElementOverrides contains methods that are overridable.
type DOMHTMLBodyElementOverrides struct {
}

func defaultDOMHTMLBodyElementOverrides(v *DOMHTMLBodyElement) DOMHTMLBodyElementOverrides {
	return DOMHTMLBodyElementOverrides{}
}

type DOMHTMLBodyElement struct {
	_ [0]func() // equal guard
	DOMHTMLElement
}

var (
	_ coreglib.Objector = (*DOMHTMLBodyElement)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMHTMLBodyElement, *DOMHTMLBodyElementClass, DOMHTMLBodyElementOverrides](
		GTypeDOMHTMLBodyElement,
		initDOMHTMLBodyElementClass,
		wrapDOMHTMLBodyElement,
		defaultDOMHTMLBodyElementOverrides,
	)
}

func initDOMHTMLBodyElementClass(gclass unsafe.Pointer, overrides DOMHTMLBodyElementOverrides, classInitFunc func(*DOMHTMLBodyElementClass)) {
	if classInitFunc != nil {
		class := (*DOMHTMLBodyElementClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMHTMLBodyElement(obj *coreglib.Object) *DOMHTMLBodyElement {
	return &DOMHTMLBodyElement{
		DOMHTMLElement: DOMHTMLElement{
			DOMElement: DOMElement{
				DOMNode: DOMNode{
					DOMObject: DOMObject{
						Object: obj,
					},
					Object: obj,
					DOMEventTarget: DOMEventTarget{
						Object: obj,
					},
				},
			},
		},
	}
}

func marshalDOMHTMLBodyElement(p uintptr) (interface{}, error) {
	return wrapDOMHTMLBodyElement(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ALink: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLBodyElement) ALink() string {
	var _arg0 *C.WebKitDOMHTMLBodyElement // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.WebKitDOMHTMLBodyElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_body_element_get_a_link(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Background: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLBodyElement) Background() string {
	var _arg0 *C.WebKitDOMHTMLBodyElement // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.WebKitDOMHTMLBodyElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_body_element_get_background(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// BgColor: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLBodyElement) BgColor() string {
	var _arg0 *C.WebKitDOMHTMLBodyElement // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.WebKitDOMHTMLBodyElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_body_element_get_bg_color(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Link: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLBodyElement) Link() string {
	var _arg0 *C.WebKitDOMHTMLBodyElement // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.WebKitDOMHTMLBodyElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_body_element_get_link(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Text: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLBodyElement) Text() string {
	var _arg0 *C.WebKitDOMHTMLBodyElement // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.WebKitDOMHTMLBodyElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_body_element_get_text(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// VLink: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLBodyElement) VLink() string {
	var _arg0 *C.WebKitDOMHTMLBodyElement // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.WebKitDOMHTMLBodyElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_body_element_get_v_link(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SetALink: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLBodyElement) SetALink(value string) {
	var _arg0 *C.WebKitDOMHTMLBodyElement // out
	var _arg1 *C.gchar                    // out

	_arg0 = (*C.WebKitDOMHTMLBodyElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_body_element_set_a_link(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetBackground: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLBodyElement) SetBackground(value string) {
	var _arg0 *C.WebKitDOMHTMLBodyElement // out
	var _arg1 *C.gchar                    // out

	_arg0 = (*C.WebKitDOMHTMLBodyElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_body_element_set_background(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetBgColor: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLBodyElement) SetBgColor(value string) {
	var _arg0 *C.WebKitDOMHTMLBodyElement // out
	var _arg1 *C.gchar                    // out

	_arg0 = (*C.WebKitDOMHTMLBodyElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_body_element_set_bg_color(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetLink: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLBodyElement) SetLink(value string) {
	var _arg0 *C.WebKitDOMHTMLBodyElement // out
	var _arg1 *C.gchar                    // out

	_arg0 = (*C.WebKitDOMHTMLBodyElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_body_element_set_link(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetText: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLBodyElement) SetText(value string) {
	var _arg0 *C.WebKitDOMHTMLBodyElement // out
	var _arg1 *C.gchar                    // out

	_arg0 = (*C.WebKitDOMHTMLBodyElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_body_element_set_text(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetVLink: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLBodyElement) SetVLink(value string) {
	var _arg0 *C.WebKitDOMHTMLBodyElement // out
	var _arg1 *C.gchar                    // out

	_arg0 = (*C.WebKitDOMHTMLBodyElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_body_element_set_v_link(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// DOMHTMLBodyElementClass: instance of this type is always passed by reference.
type DOMHTMLBodyElementClass struct {
	*domhtmlBodyElementClass
}

// domhtmlBodyElementClass is the struct that's finalized.
type domhtmlBodyElementClass struct {
	native *C.WebKitDOMHTMLBodyElementClass
}

func (d *DOMHTMLBodyElementClass) ParentClass() *DOMHTMLElementClass {
	valptr := &d.native.parent_class
	var _v *DOMHTMLElementClass // out
	_v = (*DOMHTMLElementClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
