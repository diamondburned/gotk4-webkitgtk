// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMNamedNodeMap = coreglib.Type(C.webkit_dom_named_node_map_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMNamedNodeMap, F: marshalDOMNamedNodeMap},
	})
}

// DOMNamedNodeMapOverrides contains methods that are overridable.
type DOMNamedNodeMapOverrides struct {
}

func defaultDOMNamedNodeMapOverrides(v *DOMNamedNodeMap) DOMNamedNodeMapOverrides {
	return DOMNamedNodeMapOverrides{}
}

type DOMNamedNodeMap struct {
	_ [0]func() // equal guard
	DOMObject
}

var (
	_ coreglib.Objector = (*DOMNamedNodeMap)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMNamedNodeMap, *DOMNamedNodeMapClass, DOMNamedNodeMapOverrides](
		GTypeDOMNamedNodeMap,
		initDOMNamedNodeMapClass,
		wrapDOMNamedNodeMap,
		defaultDOMNamedNodeMapOverrides,
	)
}

func initDOMNamedNodeMapClass(gclass unsafe.Pointer, overrides DOMNamedNodeMapOverrides, classInitFunc func(*DOMNamedNodeMapClass)) {
	if classInitFunc != nil {
		class := (*DOMNamedNodeMapClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMNamedNodeMap(obj *coreglib.Object) *DOMNamedNodeMap {
	return &DOMNamedNodeMap{
		DOMObject: DOMObject{
			Object: obj,
		},
	}
}

func marshalDOMNamedNodeMap(p uintptr) (interface{}, error) {
	return wrapDOMNamedNodeMap(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Length: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gulong: #gulong.
//
func (self *DOMNamedNodeMap) Length() uint32 {
	var _arg0 *C.WebKitDOMNamedNodeMap // out
	var _cret C.gulong                 // in

	_arg0 = (*C.WebKitDOMNamedNodeMap)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_named_node_map_get_length(_arg0)
	runtime.KeepAlive(self)

	var _gulong uint32 // out

	_gulong = uint32(_cret)

	return _gulong
}

// NamedItem: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - name: #gchar.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMNamedNodeMap) NamedItem(name string) *DOMNode {
	var _arg0 *C.WebKitDOMNamedNodeMap // out
	var _arg1 *C.gchar                 // out
	var _cret *C.WebKitDOMNode         // in

	_arg0 = (*C.WebKitDOMNamedNodeMap)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_named_node_map_get_named_item(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(name)

	var _domNode *DOMNode // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))

	return _domNode
}

// NamedItemNs: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - namespaceURI: #gchar.
//   - localName: #gchar.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMNamedNodeMap) NamedItemNs(namespaceURI, localName string) *DOMNode {
	var _arg0 *C.WebKitDOMNamedNodeMap // out
	var _arg1 *C.gchar                 // out
	var _arg2 *C.gchar                 // out
	var _cret *C.WebKitDOMNode         // in

	_arg0 = (*C.WebKitDOMNamedNodeMap)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(namespaceURI)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(localName)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.webkit_dom_named_node_map_get_named_item_ns(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(namespaceURI)
	runtime.KeepAlive(localName)

	var _domNode *DOMNode // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))

	return _domNode
}

// Item: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - index: #gulong.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMNamedNodeMap) Item(index uint32) *DOMNode {
	var _arg0 *C.WebKitDOMNamedNodeMap // out
	var _arg1 C.gulong                 // out
	var _cret *C.WebKitDOMNode         // in

	_arg0 = (*C.WebKitDOMNamedNodeMap)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gulong(index)

	_cret = C.webkit_dom_named_node_map_item(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(index)

	var _domNode *DOMNode // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))

	return _domNode
}

// RemoveNamedItem: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - name: #gchar.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMNamedNodeMap) RemoveNamedItem(name string) (*DOMNode, error) {
	var _arg0 *C.WebKitDOMNamedNodeMap // out
	var _arg1 *C.gchar                 // out
	var _cret *C.WebKitDOMNode         // in
	var _cerr *C.GError                // in

	_arg0 = (*C.WebKitDOMNamedNodeMap)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_named_node_map_remove_named_item(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(name)

	var _domNode *DOMNode // out
	var _goerr error      // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domNode, _goerr
}

// RemoveNamedItemNs: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - namespaceURI: #gchar.
//   - localName: #gchar.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMNamedNodeMap) RemoveNamedItemNs(namespaceURI, localName string) (*DOMNode, error) {
	var _arg0 *C.WebKitDOMNamedNodeMap // out
	var _arg1 *C.gchar                 // out
	var _arg2 *C.gchar                 // out
	var _cret *C.WebKitDOMNode         // in
	var _cerr *C.GError                // in

	_arg0 = (*C.WebKitDOMNamedNodeMap)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(namespaceURI)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(localName)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.webkit_dom_named_node_map_remove_named_item_ns(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(namespaceURI)
	runtime.KeepAlive(localName)

	var _domNode *DOMNode // out
	var _goerr error      // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domNode, _goerr
}

// SetNamedItem: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - node: KitDOMNode.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMNamedNodeMap) SetNamedItem(node *DOMNode) (*DOMNode, error) {
	var _arg0 *C.WebKitDOMNamedNodeMap // out
	var _arg1 *C.WebKitDOMNode         // out
	var _cret *C.WebKitDOMNode         // in
	var _cerr *C.GError                // in

	_arg0 = (*C.WebKitDOMNamedNodeMap)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(node).Native()))

	_cret = C.webkit_dom_named_node_map_set_named_item(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(node)

	var _domNode *DOMNode // out
	var _goerr error      // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domNode, _goerr
}

// SetNamedItemNs: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - node: KitDOMNode.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMNamedNodeMap) SetNamedItemNs(node *DOMNode) (*DOMNode, error) {
	var _arg0 *C.WebKitDOMNamedNodeMap // out
	var _arg1 *C.WebKitDOMNode         // out
	var _cret *C.WebKitDOMNode         // in
	var _cerr *C.GError                // in

	_arg0 = (*C.WebKitDOMNamedNodeMap)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(node).Native()))

	_cret = C.webkit_dom_named_node_map_set_named_item_ns(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(node)

	var _domNode *DOMNode // out
	var _goerr error      // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domNode, _goerr
}

// DOMNamedNodeMapClass: instance of this type is always passed by reference.
type DOMNamedNodeMapClass struct {
	*domNamedNodeMapClass
}

// domNamedNodeMapClass is the struct that's finalized.
type domNamedNodeMapClass struct {
	native *C.WebKitDOMNamedNodeMapClass
}

func (d *DOMNamedNodeMapClass) ParentClass() *DOMObjectClass {
	valptr := &d.native.parent_class
	var _v *DOMObjectClass // out
	_v = (*DOMObjectClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
