// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
// gchar* _gotk4_webkit2webextension4_DOMXPathNSResolver_virtual_lookup_namespace_uri(void* fnptr, WebKitDOMXPathNSResolver* arg0, gchar* arg1) {
//   return ((gchar* (*)(WebKitDOMXPathNSResolver*, gchar*))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeDOMXPathNSResolver = coreglib.Type(C.webkit_dom_xpath_ns_resolver_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMXPathNSResolver, F: marshalDOMXPathNSResolver},
	})
}

//
// DOMXPathNSResolver wraps an interface. This means the user can get the
// underlying type by calling Cast().
type DOMXPathNSResolver struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*DOMXPathNSResolver)(nil)
)

// DOMXPathNSResolverer describes DOMXPathNSResolver's interface methods.
type DOMXPathNSResolverer interface {
	coreglib.Objector

	// LookupNamespaceURI: deprecated: Use JavaScriptCore API instead.
	LookupNamespaceURI(prefix string) string
}

var _ DOMXPathNSResolverer = (*DOMXPathNSResolver)(nil)

func wrapDOMXPathNSResolver(obj *coreglib.Object) *DOMXPathNSResolver {
	return &DOMXPathNSResolver{
		Object: obj,
	}
}

func marshalDOMXPathNSResolver(p uintptr) (interface{}, error) {
	return wrapDOMXPathNSResolver(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// LookupNamespaceURI: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - prefix to lookup.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (resolver *DOMXPathNSResolver) LookupNamespaceURI(prefix string) string {
	var _arg0 *C.WebKitDOMXPathNSResolver // out
	var _arg1 *C.gchar                    // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.WebKitDOMXPathNSResolver)(unsafe.Pointer(coreglib.InternObject(resolver).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(prefix)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_xpath_ns_resolver_lookup_namespace_uri(_arg0, _arg1)
	runtime.KeepAlive(resolver)
	runtime.KeepAlive(prefix)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// lookupNamespaceURI: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - prefix to lookup.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (resolver *DOMXPathNSResolver) lookupNamespaceURI(prefix string) string {
	gclass := (*C.WebKitDOMXPathNSResolverIface)(coreglib.PeekParentClass(resolver))
	fnarg := gclass.lookup_namespace_uri

	var _arg0 *C.WebKitDOMXPathNSResolver // out
	var _arg1 *C.gchar                    // out
	var _cret *C.gchar                    // in

	_arg0 = (*C.WebKitDOMXPathNSResolver)(unsafe.Pointer(coreglib.InternObject(resolver).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(prefix)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C._gotk4_webkit2webextension4_DOMXPathNSResolver_virtual_lookup_namespace_uri(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(resolver)
	runtime.KeepAlive(prefix)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// DOMXPathNSResolverIface: instance of this type is always passed by reference.
type DOMXPathNSResolverIface struct {
	*domxPathNSResolverIface
}

// domxPathNSResolverIface is the struct that's finalized.
type domxPathNSResolverIface struct {
	native *C.WebKitDOMXPathNSResolverIface
}
