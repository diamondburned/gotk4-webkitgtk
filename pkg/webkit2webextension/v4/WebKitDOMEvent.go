// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMEvent = coreglib.Type(C.webkit_dom_event_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMEvent, F: marshalDOMEvent},
	})
}

// DOM_EVENT_AT_TARGET: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_AT_TARGET = 2

// DOM_EVENT_BLUR: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_BLUR = 8192

// DOM_EVENT_BUBBLING_PHASE: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_BUBBLING_PHASE = 3

// DOM_EVENT_CAPTURING_PHASE: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_CAPTURING_PHASE = 1

// DOM_EVENT_CHANGE: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_CHANGE = 32768

// DOM_EVENT_CLICK: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_CLICK = 64

// DOM_EVENT_DBLCLICK: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_DBLCLICK = 128

// DOM_EVENT_DRAGDROP: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_DRAGDROP = 2048

// DOM_EVENT_FOCUS: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_FOCUS = 4096

// DOM_EVENT_KEYDOWN: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_KEYDOWN = 256

// DOM_EVENT_KEYPRESS: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_KEYPRESS = 1024

// DOM_EVENT_KEYUP: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_KEYUP = 512

// DOM_EVENT_MOUSEDOWN: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_MOUSEDOWN = 1

// DOM_EVENT_MOUSEDRAG: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_MOUSEDRAG = 32

// DOM_EVENT_MOUSEMOVE: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_MOUSEMOVE = 16

// DOM_EVENT_MOUSEOUT: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_MOUSEOUT = 8

// DOM_EVENT_MOUSEOVER: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_MOUSEOVER = 4

// DOM_EVENT_MOUSEUP: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_MOUSEUP = 2

// DOM_EVENT_NONE: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_NONE = 0

// DOM_EVENT_SELECT: deprecated: Use JavaScriptCore API instead.
const DOM_EVENT_SELECT = 16384

// DOMEventOverrides contains methods that are overridable.
type DOMEventOverrides struct {
}

func defaultDOMEventOverrides(v *DOMEvent) DOMEventOverrides {
	return DOMEventOverrides{}
}

type DOMEvent struct {
	_ [0]func() // equal guard
	DOMObject
}

var (
	_ coreglib.Objector = (*DOMEvent)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMEvent, *DOMEventClass, DOMEventOverrides](
		GTypeDOMEvent,
		initDOMEventClass,
		wrapDOMEvent,
		defaultDOMEventOverrides,
	)
}

func initDOMEventClass(gclass unsafe.Pointer, overrides DOMEventOverrides, classInitFunc func(*DOMEventClass)) {
	if classInitFunc != nil {
		class := (*DOMEventClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMEvent(obj *coreglib.Object) *DOMEvent {
	return &DOMEvent{
		DOMObject: DOMObject{
			Object: obj,
		},
	}
}

func marshalDOMEvent(p uintptr) (interface{}, error) {
	return wrapDOMEvent(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Bubbles: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMEvent) Bubbles() bool {
	var _arg0 *C.WebKitDOMEvent // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitDOMEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_event_get_bubbles(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// CancelBubble: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMEvent) CancelBubble() bool {
	var _arg0 *C.WebKitDOMEvent // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitDOMEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_event_get_cancel_bubble(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Cancelable: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMEvent) Cancelable() bool {
	var _arg0 *C.WebKitDOMEvent // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitDOMEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_event_get_cancelable(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// CurrentTarget: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domEventTarget: KitDOMEventTarget.
//
func (self *DOMEvent) CurrentTarget() *DOMEventTarget {
	var _arg0 *C.WebKitDOMEvent       // out
	var _cret *C.WebKitDOMEventTarget // in

	_arg0 = (*C.WebKitDOMEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_event_get_current_target(_arg0)
	runtime.KeepAlive(self)

	var _domEventTarget *DOMEventTarget // out

	_domEventTarget = wrapDOMEventTarget(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domEventTarget
}

// EventPhase: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gushort: #gushort.
//
func (self *DOMEvent) EventPhase() uint16 {
	var _arg0 *C.WebKitDOMEvent // out
	var _cret C.gushort         // in

	_arg0 = (*C.WebKitDOMEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_event_get_event_phase(_arg0)
	runtime.KeepAlive(self)

	var _gushort uint16 // out

	_gushort = uint16(_cret)

	return _gushort
}

// EventType: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMEvent) EventType() string {
	var _arg0 *C.WebKitDOMEvent // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitDOMEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_event_get_event_type(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ReturnValue: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMEvent) ReturnValue() bool {
	var _arg0 *C.WebKitDOMEvent // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitDOMEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_event_get_return_value(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SrcElement: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domEventTarget: KitDOMEventTarget.
//
func (self *DOMEvent) SrcElement() *DOMEventTarget {
	var _arg0 *C.WebKitDOMEvent       // out
	var _cret *C.WebKitDOMEventTarget // in

	_arg0 = (*C.WebKitDOMEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_event_get_src_element(_arg0)
	runtime.KeepAlive(self)

	var _domEventTarget *DOMEventTarget // out

	_domEventTarget = wrapDOMEventTarget(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domEventTarget
}

// Target: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domEventTarget: KitDOMEventTarget.
//
func (self *DOMEvent) Target() *DOMEventTarget {
	var _arg0 *C.WebKitDOMEvent       // out
	var _cret *C.WebKitDOMEventTarget // in

	_arg0 = (*C.WebKitDOMEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_event_get_target(_arg0)
	runtime.KeepAlive(self)

	var _domEventTarget *DOMEventTarget // out

	_domEventTarget = wrapDOMEventTarget(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domEventTarget
}

// TimeStamp: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - guint32: #guint32.
//
func (self *DOMEvent) TimeStamp() uint32 {
	var _arg0 *C.WebKitDOMEvent // out
	var _cret C.guint32         // in

	_arg0 = (*C.WebKitDOMEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_event_get_time_stamp(_arg0)
	runtime.KeepAlive(self)

	var _guint32 uint32 // out

	_guint32 = uint32(_cret)

	return _guint32
}

// InitEvent: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - eventTypeArg: #gchar.
//   - canBubbleArg: #gboolean.
//   - cancelableArg: #gboolean.
//
func (self *DOMEvent) InitEvent(eventTypeArg string, canBubbleArg, cancelableArg bool) {
	var _arg0 *C.WebKitDOMEvent // out
	var _arg1 *C.gchar          // out
	var _arg2 C.gboolean        // out
	var _arg3 C.gboolean        // out

	_arg0 = (*C.WebKitDOMEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(eventTypeArg)))
	defer C.free(unsafe.Pointer(_arg1))
	if canBubbleArg {
		_arg2 = C.TRUE
	}
	if cancelableArg {
		_arg3 = C.TRUE
	}

	C.webkit_dom_event_init_event(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(self)
	runtime.KeepAlive(eventTypeArg)
	runtime.KeepAlive(canBubbleArg)
	runtime.KeepAlive(cancelableArg)
}

// PreventDefault: deprecated: Use JavaScriptCore API instead.
func (self *DOMEvent) PreventDefault() {
	var _arg0 *C.WebKitDOMEvent // out

	_arg0 = (*C.WebKitDOMEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_event_prevent_default(_arg0)
	runtime.KeepAlive(self)
}

// SetCancelBubble: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gboolean.
//
func (self *DOMEvent) SetCancelBubble(value bool) {
	var _arg0 *C.WebKitDOMEvent // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitDOMEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if value {
		_arg1 = C.TRUE
	}

	C.webkit_dom_event_set_cancel_bubble(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetReturnValue: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gboolean.
//
func (self *DOMEvent) SetReturnValue(value bool) {
	var _arg0 *C.WebKitDOMEvent // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitDOMEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if value {
		_arg1 = C.TRUE
	}

	C.webkit_dom_event_set_return_value(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// StopPropagation: deprecated: Use JavaScriptCore API instead.
func (self *DOMEvent) StopPropagation() {
	var _arg0 *C.WebKitDOMEvent // out

	_arg0 = (*C.WebKitDOMEvent)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_event_stop_propagation(_arg0)
	runtime.KeepAlive(self)
}

// DOMEventClass: instance of this type is always passed by reference.
type DOMEventClass struct {
	*domEventClass
}

// domEventClass is the struct that's finalized.
type domEventClass struct {
	native *C.WebKitDOMEventClass
}

func (d *DOMEventClass) ParentClass() *DOMObjectClass {
	valptr := &d.native.parent_class
	var _v *DOMObjectClass // out
	_v = (*DOMObjectClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
