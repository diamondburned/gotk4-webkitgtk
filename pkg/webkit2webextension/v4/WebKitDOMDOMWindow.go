// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMDOMWindow = coreglib.Type(C.webkit_dom_dom_window_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMDOMWindow, F: marshalDOMDOMWindow},
	})
}

// DOMDOMWindowOverrides contains methods that are overridable.
type DOMDOMWindowOverrides struct {
}

func defaultDOMDOMWindowOverrides(v *DOMDOMWindow) DOMDOMWindowOverrides {
	return DOMDOMWindowOverrides{}
}

type DOMDOMWindow struct {
	_ [0]func() // equal guard
	DOMObject

	*coreglib.Object
	DOMEventTarget
}

var (
	_ coreglib.Objector = (*DOMDOMWindow)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMDOMWindow, *DOMDOMWindowClass, DOMDOMWindowOverrides](
		GTypeDOMDOMWindow,
		initDOMDOMWindowClass,
		wrapDOMDOMWindow,
		defaultDOMDOMWindowOverrides,
	)
}

func initDOMDOMWindowClass(gclass unsafe.Pointer, overrides DOMDOMWindowOverrides, classInitFunc func(*DOMDOMWindowClass)) {
	if classInitFunc != nil {
		class := (*DOMDOMWindowClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMDOMWindow(obj *coreglib.Object) *DOMDOMWindow {
	return &DOMDOMWindow{
		DOMObject: DOMObject{
			Object: obj,
		},
		Object: obj,
		DOMEventTarget: DOMEventTarget{
			Object: obj,
		},
	}
}

func marshalDOMDOMWindow(p uintptr) (interface{}, error) {
	return wrapDOMDOMWindow(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Alert: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - message: #gchar.
//
func (self *DOMDOMWindow) Alert(message string) {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _arg1 *C.gchar              // out

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(message)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_dom_window_alert(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(message)
}

// Blur: deprecated: Use JavaScriptCore API instead.
func (self *DOMDOMWindow) Blur() {
	var _arg0 *C.WebKitDOMDOMWindow // out

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_dom_window_blur(_arg0)
	runtime.KeepAlive(self)
}

// CaptureEvents: deprecated: Use JavaScriptCore API instead.
func (self *DOMDOMWindow) CaptureEvents() {
	var _arg0 *C.WebKitDOMDOMWindow // out

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_dom_window_capture_events(_arg0)
	runtime.KeepAlive(self)
}

// Close: deprecated: Use JavaScriptCore API instead.
func (self *DOMDOMWindow) Close() {
	var _arg0 *C.WebKitDOMDOMWindow // out

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_dom_window_close(_arg0)
	runtime.KeepAlive(self)
}

// Confirm: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - message: #gchar.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMDOMWindow) Confirm(message string) bool {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _arg1 *C.gchar              // out
	var _cret C.gboolean            // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(message)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_dom_window_confirm(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(message)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Find: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - str: #gchar.
//   - caseSensitive: #gboolean.
//   - backwards: #gboolean.
//   - wrap: #gboolean.
//   - wholeWord: #gboolean.
//   - searchInFrames: #gboolean.
//   - showDialog: #gboolean.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMDOMWindow) Find(str string, caseSensitive, backwards, wrap, wholeWord, searchInFrames, showDialog bool) bool {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _arg1 *C.gchar              // out
	var _arg2 C.gboolean            // out
	var _arg3 C.gboolean            // out
	var _arg4 C.gboolean            // out
	var _arg5 C.gboolean            // out
	var _arg6 C.gboolean            // out
	var _arg7 C.gboolean            // out
	var _cret C.gboolean            // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(str)))
	defer C.free(unsafe.Pointer(_arg1))
	if caseSensitive {
		_arg2 = C.TRUE
	}
	if backwards {
		_arg3 = C.TRUE
	}
	if wrap {
		_arg4 = C.TRUE
	}
	if wholeWord {
		_arg5 = C.TRUE
	}
	if searchInFrames {
		_arg6 = C.TRUE
	}
	if showDialog {
		_arg7 = C.TRUE
	}

	_cret = C.webkit_dom_dom_window_find(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, _arg7)
	runtime.KeepAlive(self)
	runtime.KeepAlive(str)
	runtime.KeepAlive(caseSensitive)
	runtime.KeepAlive(backwards)
	runtime.KeepAlive(wrap)
	runtime.KeepAlive(wholeWord)
	runtime.KeepAlive(searchInFrames)
	runtime.KeepAlive(showDialog)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Focus: deprecated: Use JavaScriptCore API instead.
func (self *DOMDOMWindow) Focus() {
	var _arg0 *C.WebKitDOMDOMWindow // out

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_dom_window_focus(_arg0)
	runtime.KeepAlive(self)
}

// Closed: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMDOMWindow) Closed() bool {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret C.gboolean            // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_closed(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ComputedStyle: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - element: KitDOMElement.
//   - pseudoElement (optional): #gchar.
//
// The function returns the following values:
//
//   - domcssStyleDeclaration: KitDOMCSSStyleDeclaration.
//
func (self *DOMDOMWindow) ComputedStyle(element *DOMElement, pseudoElement string) *DOMCSSStyleDeclaration {
	var _arg0 *C.WebKitDOMDOMWindow           // out
	var _arg1 *C.WebKitDOMElement             // out
	var _arg2 *C.gchar                        // out
	var _cret *C.WebKitDOMCSSStyleDeclaration // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMElement)(unsafe.Pointer(coreglib.InternObject(element).Native()))
	if pseudoElement != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(pseudoElement)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	_cret = C.webkit_dom_dom_window_get_computed_style(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(element)
	runtime.KeepAlive(pseudoElement)

	var _domcssStyleDeclaration *DOMCSSStyleDeclaration // out

	_domcssStyleDeclaration = wrapDOMCSSStyleDeclaration(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domcssStyleDeclaration
}

// DefaultStatus: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDOMWindow) DefaultStatus() string {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret *C.gchar              // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_default_status(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// DevicePixelRatio: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gdouble: #gdouble.
//
func (self *DOMDOMWindow) DevicePixelRatio() float64 {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret C.gdouble             // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_device_pixel_ratio(_arg0)
	runtime.KeepAlive(self)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// Document: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domDocument: KitDOMDocument.
//
func (self *DOMDOMWindow) Document() *DOMDocument {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret *C.WebKitDOMDocument  // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_document(_arg0)
	runtime.KeepAlive(self)

	var _domDocument *DOMDocument // out

	_domDocument = wrapDOMDocument(coreglib.Take(unsafe.Pointer(_cret)))

	return _domDocument
}

// FrameElement: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMDOMWindow) FrameElement() *DOMElement {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret *C.WebKitDOMElement   // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_frame_element(_arg0)
	runtime.KeepAlive(self)

	var _domElement *DOMElement // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domElement
}

// Frames: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domdomWindow: KitDOMDOMWindow.
//
func (self *DOMDOMWindow) Frames() *DOMDOMWindow {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret *C.WebKitDOMDOMWindow // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_frames(_arg0)
	runtime.KeepAlive(self)

	var _domdomWindow *DOMDOMWindow // out

	_domdomWindow = wrapDOMDOMWindow(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domdomWindow
}

// InnerHeight: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMDOMWindow) InnerHeight() int32 {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret C.glong               // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_inner_height(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// InnerWidth: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMDOMWindow) InnerWidth() int32 {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret C.glong               // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_inner_width(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// Length: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - gulong: #gulong.
//
func (self *DOMDOMWindow) Length() uint32 {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret C.gulong              // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_length(_arg0)
	runtime.KeepAlive(self)

	var _gulong uint32 // out

	_gulong = uint32(_cret)

	return _gulong
}

// Name: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDOMWindow) Name() string {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret *C.gchar              // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// OffscreenBuffering: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMDOMWindow) OffscreenBuffering() bool {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret C.gboolean            // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_offscreen_buffering(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Opener: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domdomWindow: KitDOMDOMWindow.
//
func (self *DOMDOMWindow) Opener() *DOMDOMWindow {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret *C.WebKitDOMDOMWindow // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_opener(_arg0)
	runtime.KeepAlive(self)

	var _domdomWindow *DOMDOMWindow // out

	_domdomWindow = wrapDOMDOMWindow(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domdomWindow
}

// Orientation: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMDOMWindow) Orientation() int32 {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret C.glong               // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_orientation(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// OuterHeight: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMDOMWindow) OuterHeight() int32 {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret C.glong               // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_outer_height(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// OuterWidth: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMDOMWindow) OuterWidth() int32 {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret C.glong               // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_outer_width(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// PageXOffset: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMDOMWindow) PageXOffset() int32 {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret C.glong               // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_page_x_offset(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// PageYOffset: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMDOMWindow) PageYOffset() int32 {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret C.glong               // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_page_y_offset(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// Parent: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domdomWindow: KitDOMDOMWindow.
//
func (self *DOMDOMWindow) Parent() *DOMDOMWindow {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret *C.WebKitDOMDOMWindow // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_parent(_arg0)
	runtime.KeepAlive(self)

	var _domdomWindow *DOMDOMWindow // out

	_domdomWindow = wrapDOMDOMWindow(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domdomWindow
}

// ScreenLeft: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMDOMWindow) ScreenLeft() int32 {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret C.glong               // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_screen_left(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// ScreenTop: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMDOMWindow) ScreenTop() int32 {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret C.glong               // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_screen_top(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// ScreenX: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMDOMWindow) ScreenX() int32 {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret C.glong               // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_screen_x(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// ScreenY: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMDOMWindow) ScreenY() int32 {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret C.glong               // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_screen_y(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// ScrollX: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMDOMWindow) ScrollX() int32 {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret C.glong               // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_scroll_x(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// ScrollY: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMDOMWindow) ScrollY() int32 {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret C.glong               // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_scroll_y(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// Selection: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domdomSelection: KitDOMDOMSelection.
//
func (self *DOMDOMWindow) Selection() *DOMDOMSelection {
	var _arg0 *C.WebKitDOMDOMWindow    // out
	var _cret *C.WebKitDOMDOMSelection // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_selection(_arg0)
	runtime.KeepAlive(self)

	var _domdomSelection *DOMDOMSelection // out

	_domdomSelection = wrapDOMDOMSelection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domdomSelection
}

// Self: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domdomWindow: KitDOMDOMWindow.
//
func (self *DOMDOMWindow) Self() *DOMDOMWindow {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret *C.WebKitDOMDOMWindow // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_self(_arg0)
	runtime.KeepAlive(self)

	var _domdomWindow *DOMDOMWindow // out

	_domdomWindow = wrapDOMDOMWindow(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domdomWindow
}

// Status: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDOMWindow) Status() string {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret *C.gchar              // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_status(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Top: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domdomWindow: KitDOMDOMWindow.
//
func (self *DOMDOMWindow) Top() *DOMDOMWindow {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret *C.WebKitDOMDOMWindow // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_top(_arg0)
	runtime.KeepAlive(self)

	var _domdomWindow *DOMDOMWindow // out

	_domdomWindow = wrapDOMDOMWindow(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domdomWindow
}

// Window: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domdomWindow: KitDOMDOMWindow.
//
func (self *DOMDOMWindow) Window() *DOMDOMWindow {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _cret *C.WebKitDOMDOMWindow // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_dom_window_get_window(_arg0)
	runtime.KeepAlive(self)

	var _domdomWindow *DOMDOMWindow // out

	_domdomWindow = wrapDOMDOMWindow(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domdomWindow
}

// MoveBy: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - x: #gfloat.
//   - y: #gfloat.
//
func (self *DOMDOMWindow) MoveBy(x, y float32) {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _arg1 C.gfloat              // out
	var _arg2 C.gfloat              // out

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gfloat(x)
	_arg2 = C.gfloat(y)

	C.webkit_dom_dom_window_move_by(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// MoveTo: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - x: #gfloat.
//   - y: #gfloat.
//
func (self *DOMDOMWindow) MoveTo(x, y float32) {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _arg1 C.gfloat              // out
	var _arg2 C.gfloat              // out

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gfloat(x)
	_arg2 = C.gfloat(y)

	C.webkit_dom_dom_window_move_to(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// Print: deprecated: Use JavaScriptCore API instead.
func (self *DOMDOMWindow) Print() {
	var _arg0 *C.WebKitDOMDOMWindow // out

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_dom_window_print(_arg0)
	runtime.KeepAlive(self)
}

// Prompt: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - message: #gchar.
//   - defaultValue: #gchar.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMDOMWindow) Prompt(message, defaultValue string) string {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _arg1 *C.gchar              // out
	var _arg2 *C.gchar              // out
	var _cret *C.gchar              // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(message)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(defaultValue)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.webkit_dom_dom_window_prompt(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(message)
	runtime.KeepAlive(defaultValue)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// ReleaseEvents: deprecated: Use JavaScriptCore API instead.
func (self *DOMDOMWindow) ReleaseEvents() {
	var _arg0 *C.WebKitDOMDOMWindow // out

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_dom_window_release_events(_arg0)
	runtime.KeepAlive(self)
}

// ResizeBy: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - x: #gfloat.
//   - y: #gfloat.
//
func (self *DOMDOMWindow) ResizeBy(x, y float32) {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _arg1 C.gfloat              // out
	var _arg2 C.gfloat              // out

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gfloat(x)
	_arg2 = C.gfloat(y)

	C.webkit_dom_dom_window_resize_by(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// ResizeTo: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - width: #gfloat.
//   - height: #gfloat.
//
func (self *DOMDOMWindow) ResizeTo(width, height float32) {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _arg1 C.gfloat              // out
	var _arg2 C.gfloat              // out

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gfloat(width)
	_arg2 = C.gfloat(height)

	C.webkit_dom_dom_window_resize_to(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// ScrollBy: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - x: #gdouble.
//   - y: #gdouble.
//
func (self *DOMDOMWindow) ScrollBy(x, y float64) {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _arg1 C.gdouble             // out
	var _arg2 C.gdouble             // out

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gdouble(x)
	_arg2 = C.gdouble(y)

	C.webkit_dom_dom_window_scroll_by(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// ScrollTo: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - x: #gdouble.
//   - y: #gdouble.
//
func (self *DOMDOMWindow) ScrollTo(x, y float64) {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _arg1 C.gdouble             // out
	var _arg2 C.gdouble             // out

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gdouble(x)
	_arg2 = C.gdouble(y)

	C.webkit_dom_dom_window_scroll_to(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// SetDefaultStatus: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMDOMWindow) SetDefaultStatus(value string) {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _arg1 *C.gchar              // out

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_dom_window_set_default_status(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetName: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMDOMWindow) SetName(value string) {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _arg1 *C.gchar              // out

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_dom_window_set_name(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetStatus: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMDOMWindow) SetStatus(value string) {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _arg1 *C.gchar              // out

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_dom_window_set_status(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// Stop: deprecated: Use JavaScriptCore API instead.
func (self *DOMDOMWindow) Stop() {
	var _arg0 *C.WebKitDOMDOMWindow // out

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_dom_window_stop(_arg0)
	runtime.KeepAlive(self)
}

// The function takes the following parameters:
//
//   - handler
//   - message
//
// The function returns the following values:
//
func (window *DOMDOMWindow) WebkitMessageHandlersPostMessage(handler, message string) bool {
	var _arg0 *C.WebKitDOMDOMWindow // out
	var _arg1 *C.gchar              // out
	var _arg2 *C.gchar              // out
	var _cret C.gboolean            // in

	_arg0 = (*C.WebKitDOMDOMWindow)(unsafe.Pointer(coreglib.InternObject(window).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(handler)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(message)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.webkit_dom_dom_window_webkit_message_handlers_post_message(_arg0, _arg1, _arg2)
	runtime.KeepAlive(window)
	runtime.KeepAlive(handler)
	runtime.KeepAlive(message)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// DOMDOMWindowClass: instance of this type is always passed by reference.
type DOMDOMWindowClass struct {
	*domdomWindowClass
}

// domdomWindowClass is the struct that's finalized.
type domdomWindowClass struct {
	native *C.WebKitDOMDOMWindowClass
}

func (d *DOMDOMWindowClass) ParentClass() *DOMObjectClass {
	valptr := &d.native.parent_class
	var _v *DOMObjectClass // out
	_v = (*DOMObjectClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
