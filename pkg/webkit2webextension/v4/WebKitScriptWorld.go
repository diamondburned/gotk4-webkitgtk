// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
// extern void _gotk4_webkit2webextension4_ScriptWorld_ConnectWindowObjectCleared(gpointer, WebKitWebPage*, WebKitFrame*, guintptr);
import "C"

// GType values.
var (
	GTypeScriptWorld = coreglib.Type(C.webkit_script_world_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeScriptWorld, F: marshalScriptWorld},
	})
}

// ScriptWorldOverrides contains methods that are overridable.
type ScriptWorldOverrides struct {
}

func defaultScriptWorldOverrides(v *ScriptWorld) ScriptWorldOverrides {
	return ScriptWorldOverrides{}
}

type ScriptWorld struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*ScriptWorld)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ScriptWorld, *ScriptWorldClass, ScriptWorldOverrides](
		GTypeScriptWorld,
		initScriptWorldClass,
		wrapScriptWorld,
		defaultScriptWorldOverrides,
	)
}

func initScriptWorldClass(gclass unsafe.Pointer, overrides ScriptWorldOverrides, classInitFunc func(*ScriptWorldClass)) {
	if classInitFunc != nil {
		class := (*ScriptWorldClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapScriptWorld(obj *coreglib.Object) *ScriptWorld {
	return &ScriptWorld{
		Object: obj,
	}
}

func marshalScriptWorld(p uintptr) (interface{}, error) {
	return wrapScriptWorld(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectWindowObjectCleared is emitted when the JavaScript window object in a
// KitScriptWorld has been cleared. This is the preferred place to set custom
// properties on the window object using the JavaScriptCore API. You can get the
// window object of frame from the JavaScript execution context of world that is
// returned by webkit_frame_get_js_context_for_script_world().
func (world *ScriptWorld) ConnectWindowObjectCleared(f func(page *WebPage, frame *Frame)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(world, "window-object-cleared", false, unsafe.Pointer(C._gotk4_webkit2webextension4_ScriptWorld_ConnectWindowObjectCleared), f)
}

// NewScriptWorld creates a new isolated KitScriptWorld. Scripts executed
// in isolated worlds have access to the DOM but not to other variable
// or functions created by the page. The KitScriptWorld is created with
// a generated unique name. Use webkit_script_world_new_with_name() if
// you want to create it with a custom name. You can get the JavaScript
// execution context of a KitScriptWorld for a given KitFrame with
// webkit_frame_get_javascript_context_for_script_world().
//
// The function returns the following values:
//
//   - scriptWorld: new isolated KitScriptWorld.
//
func NewScriptWorld() *ScriptWorld {
	var _cret *C.WebKitScriptWorld // in

	_cret = C.webkit_script_world_new()

	var _scriptWorld *ScriptWorld // out

	_scriptWorld = wrapScriptWorld(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _scriptWorld
}

// NewScriptWorldWithName creates a new isolated KitScriptWorld with a name.
// Scripts executed in isolated worlds have access to the DOM but not
// to other variable or functions created by the page. You can get the
// JavaScript execution context of a KitScriptWorld for a given KitFrame with
// webkit_frame_get_javascript_context_for_script_world().
//
// The function takes the following parameters:
//
//   - name for the script world.
//
// The function returns the following values:
//
//   - scriptWorld: new isolated KitScriptWorld.
//
func NewScriptWorldWithName(name string) *ScriptWorld {
	var _arg1 *C.char              // out
	var _cret *C.WebKitScriptWorld // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_script_world_new_with_name(_arg1)
	runtime.KeepAlive(name)

	var _scriptWorld *ScriptWorld // out

	_scriptWorld = wrapScriptWorld(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _scriptWorld
}

// Name: get the name of a KitScriptWorld.
//
// The function returns the following values:
//
//   - utf8: name of world.
//
func (world *ScriptWorld) Name() string {
	var _arg0 *C.WebKitScriptWorld // out
	var _cret *C.char              // in

	_arg0 = (*C.WebKitScriptWorld)(unsafe.Pointer(coreglib.InternObject(world).Native()))

	_cret = C.webkit_script_world_get_name(_arg0)
	runtime.KeepAlive(world)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// ScriptWorldClass: instance of this type is always passed by reference.
type ScriptWorldClass struct {
	*scriptWorldClass
}

// scriptWorldClass is the struct that's finalized.
type scriptWorldClass struct {
	native *C.WebKitScriptWorldClass
}
