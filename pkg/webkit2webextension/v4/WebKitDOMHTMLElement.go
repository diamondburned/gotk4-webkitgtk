// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMHTMLElement = coreglib.Type(C.webkit_dom_html_element_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMHTMLElement, F: marshalDOMHTMLElement},
	})
}

// DOMHTMLElementOverrides contains methods that are overridable.
type DOMHTMLElementOverrides struct {
}

func defaultDOMHTMLElementOverrides(v *DOMHTMLElement) DOMHTMLElementOverrides {
	return DOMHTMLElementOverrides{}
}

type DOMHTMLElement struct {
	_ [0]func() // equal guard
	DOMElement
}

var (
	_ coreglib.Objector = (*DOMHTMLElement)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMHTMLElement, *DOMHTMLElementClass, DOMHTMLElementOverrides](
		GTypeDOMHTMLElement,
		initDOMHTMLElementClass,
		wrapDOMHTMLElement,
		defaultDOMHTMLElementOverrides,
	)
}

func initDOMHTMLElementClass(gclass unsafe.Pointer, overrides DOMHTMLElementOverrides, classInitFunc func(*DOMHTMLElementClass)) {
	if classInitFunc != nil {
		class := (*DOMHTMLElementClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMHTMLElement(obj *coreglib.Object) *DOMHTMLElement {
	return &DOMHTMLElement{
		DOMElement: DOMElement{
			DOMNode: DOMNode{
				DOMObject: DOMObject{
					Object: obj,
				},
				Object: obj,
				DOMEventTarget: DOMEventTarget{
					Object: obj,
				},
			},
		},
	}
}

func marshalDOMHTMLElement(p uintptr) (interface{}, error) {
	return wrapDOMHTMLElement(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Click: deprecated: Use JavaScriptCore API instead.
func (self *DOMHTMLElement) Click() {
	var _arg0 *C.WebKitDOMHTMLElement // out

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_html_element_click(_arg0)
	runtime.KeepAlive(self)
}

// AccessKey: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLElement) AccessKey() string {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _cret *C.gchar                // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_element_get_access_key(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Children: deprecated: Use webkit_dom_element_get_children() instead.
//
// The function returns the following values:
//
//   - domhtmlCollection: KitDOMHTMLCollection.
//
func (self *DOMHTMLElement) Children() *DOMHTMLCollection {
	var _arg0 *C.WebKitDOMHTMLElement    // out
	var _cret *C.WebKitDOMHTMLCollection // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_element_get_children(_arg0)
	runtime.KeepAlive(self)

	var _domhtmlCollection *DOMHTMLCollection // out

	_domhtmlCollection = wrapDOMHTMLCollection(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _domhtmlCollection
}

// ContentEditable: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLElement) ContentEditable() string {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _cret *C.gchar                // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_element_get_content_editable(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Dir: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLElement) Dir() string {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _cret *C.gchar                // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_element_get_dir(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Draggable: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMHTMLElement) Draggable() bool {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _cret C.gboolean              // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_element_get_draggable(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Hidden: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMHTMLElement) Hidden() bool {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _cret C.gboolean              // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_element_get_hidden(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// InnerHtml: deprecated: Use webkit_dom_element_get_inner_html() instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLElement) InnerHtml() string {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _cret *C.gchar                // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_element_get_inner_html(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// InnerText: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLElement) InnerText() string {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _cret *C.gchar                // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_element_get_inner_text(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// IsContentEditable: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMHTMLElement) IsContentEditable() bool {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _cret C.gboolean              // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_element_get_is_content_editable(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Lang: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLElement) Lang() string {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _cret *C.gchar                // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_element_get_lang(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// OuterHtml: deprecated: Use webkit_dom_element_get_outer_html() instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLElement) OuterHtml() string {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _cret *C.gchar                // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_element_get_outer_html(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// OuterText: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLElement) OuterText() string {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _cret *C.gchar                // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_element_get_outer_text(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Spellcheck: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMHTMLElement) Spellcheck() bool {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _cret C.gboolean              // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_element_get_spellcheck(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TabIndex: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMHTMLElement) TabIndex() int32 {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _cret C.glong                 // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_element_get_tab_index(_arg0)
	runtime.KeepAlive(self)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// Title: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLElement) Title() string {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _cret *C.gchar                // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_element_get_title(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Translate: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMHTMLElement) Translate() bool {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _cret C.gboolean              // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_element_get_translate(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Webkitdropzone: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMHTMLElement) Webkitdropzone() string {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _cret *C.gchar                // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_html_element_get_webkitdropzone(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SetAccessKey: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLElement) SetAccessKey(value string) {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _arg1 *C.gchar                // out

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_element_set_access_key(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetContentEditable: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLElement) SetContentEditable(value string) error {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _arg1 *C.gchar                // out
	var _cerr *C.GError               // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_element_set_content_editable(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetDir: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLElement) SetDir(value string) {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _arg1 *C.gchar                // out

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_element_set_dir(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetDraggable: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gboolean.
//
func (self *DOMHTMLElement) SetDraggable(value bool) {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _arg1 C.gboolean              // out

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if value {
		_arg1 = C.TRUE
	}

	C.webkit_dom_html_element_set_draggable(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetHidden: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gboolean.
//
func (self *DOMHTMLElement) SetHidden(value bool) {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _arg1 C.gboolean              // out

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if value {
		_arg1 = C.TRUE
	}

	C.webkit_dom_html_element_set_hidden(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetInnerHtml: deprecated: Use webkit_dom_element_set_inner_html() instead.
//
// The function takes the following parameters:
//
//   - contents with contents to set.
//
func (self *DOMHTMLElement) SetInnerHtml(contents string) error {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _arg1 *C.gchar                // out
	var _cerr *C.GError               // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(contents)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_element_set_inner_html(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(contents)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetInnerText: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLElement) SetInnerText(value string) error {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _arg1 *C.gchar                // out
	var _cerr *C.GError               // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_element_set_inner_text(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetLang: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLElement) SetLang(value string) {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _arg1 *C.gchar                // out

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_element_set_lang(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetOuterHtml: deprecated: Use webkit_dom_element_set_outer_html() instead.
//
// The function takes the following parameters:
//
//   - contents with contents to set.
//
func (self *DOMHTMLElement) SetOuterHtml(contents string) error {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _arg1 *C.gchar                // out
	var _cerr *C.GError               // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(contents)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_element_set_outer_html(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(contents)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetOuterText: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLElement) SetOuterText(value string) error {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _arg1 *C.gchar                // out
	var _cerr *C.GError               // in

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_element_set_outer_text(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetSpellcheck: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gboolean.
//
func (self *DOMHTMLElement) SetSpellcheck(value bool) {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _arg1 C.gboolean              // out

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if value {
		_arg1 = C.TRUE
	}

	C.webkit_dom_html_element_set_spellcheck(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetTabIndex: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #glong.
//
func (self *DOMHTMLElement) SetTabIndex(value int32) {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _arg1 C.glong                 // out

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.glong(value)

	C.webkit_dom_html_element_set_tab_index(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetTitle: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLElement) SetTitle(value string) {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _arg1 *C.gchar                // out

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_element_set_title(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetTranslate: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gboolean.
//
func (self *DOMHTMLElement) SetTranslate(value bool) {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _arg1 C.gboolean              // out

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if value {
		_arg1 = C.TRUE
	}

	C.webkit_dom_html_element_set_translate(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// SetWebkitdropzone: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMHTMLElement) SetWebkitdropzone(value string) {
	var _arg0 *C.WebKitDOMHTMLElement // out
	var _arg1 *C.gchar                // out

	_arg0 = (*C.WebKitDOMHTMLElement)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_html_element_set_webkitdropzone(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)
}

// DOMHTMLElementClass: instance of this type is always passed by reference.
type DOMHTMLElementClass struct {
	*domhtmlElementClass
}

// domhtmlElementClass is the struct that's finalized.
type domhtmlElementClass struct {
	native *C.WebKitDOMHTMLElementClass
}

func (d *DOMHTMLElementClass) ParentClass() *DOMElementClass {
	valptr := &d.native.parent_class
	var _v *DOMElementClass // out
	_v = (*DOMElementClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
