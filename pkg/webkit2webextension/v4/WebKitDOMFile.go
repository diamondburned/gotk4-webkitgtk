// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMFile = coreglib.Type(C.webkit_dom_file_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMFile, F: marshalDOMFile},
	})
}

// DOMFileOverrides contains methods that are overridable.
type DOMFileOverrides struct {
}

func defaultDOMFileOverrides(v *DOMFile) DOMFileOverrides {
	return DOMFileOverrides{}
}

type DOMFile struct {
	_ [0]func() // equal guard
	DOMBlob
}

var (
	_ coreglib.Objector = (*DOMFile)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMFile, *DOMFileClass, DOMFileOverrides](
		GTypeDOMFile,
		initDOMFileClass,
		wrapDOMFile,
		defaultDOMFileOverrides,
	)
}

func initDOMFileClass(gclass unsafe.Pointer, overrides DOMFileOverrides, classInitFunc func(*DOMFileClass)) {
	if classInitFunc != nil {
		class := (*DOMFileClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMFile(obj *coreglib.Object) *DOMFile {
	return &DOMFile{
		DOMBlob: DOMBlob{
			DOMObject: DOMObject{
				Object: obj,
			},
		},
	}
}

func marshalDOMFile(p uintptr) (interface{}, error) {
	return wrapDOMFile(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Name: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMFile) Name() string {
	var _arg0 *C.WebKitDOMFile // out
	var _cret *C.gchar         // in

	_arg0 = (*C.WebKitDOMFile)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_file_get_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// DOMFileClass: instance of this type is always passed by reference.
type DOMFileClass struct {
	*domFileClass
}

// domFileClass is the struct that's finalized.
type domFileClass struct {
	native *C.WebKitDOMFileClass
}

func (d *DOMFileClass) ParentClass() *DOMBlobClass {
	valptr := &d.native.parent_class
	var _v *DOMBlobClass // out
	_v = (*DOMBlobClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
