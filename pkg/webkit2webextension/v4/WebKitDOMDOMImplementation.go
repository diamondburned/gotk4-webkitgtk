// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMDOMImplementation = coreglib.Type(C.webkit_dom_dom_implementation_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMDOMImplementation, F: marshalDOMDOMImplementation},
	})
}

// DOMDOMImplementationOverrides contains methods that are overridable.
type DOMDOMImplementationOverrides struct {
}

func defaultDOMDOMImplementationOverrides(v *DOMDOMImplementation) DOMDOMImplementationOverrides {
	return DOMDOMImplementationOverrides{}
}

type DOMDOMImplementation struct {
	_ [0]func() // equal guard
	DOMObject
}

var (
	_ coreglib.Objector = (*DOMDOMImplementation)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMDOMImplementation, *DOMDOMImplementationClass, DOMDOMImplementationOverrides](
		GTypeDOMDOMImplementation,
		initDOMDOMImplementationClass,
		wrapDOMDOMImplementation,
		defaultDOMDOMImplementationOverrides,
	)
}

func initDOMDOMImplementationClass(gclass unsafe.Pointer, overrides DOMDOMImplementationOverrides, classInitFunc func(*DOMDOMImplementationClass)) {
	if classInitFunc != nil {
		class := (*DOMDOMImplementationClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMDOMImplementation(obj *coreglib.Object) *DOMDOMImplementation {
	return &DOMDOMImplementation{
		DOMObject: DOMObject{
			Object: obj,
		},
	}
}

func marshalDOMDOMImplementation(p uintptr) (interface{}, error) {
	return wrapDOMDOMImplementation(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// CreateCSSStyleSheet: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - title: #gchar.
//   - media: #gchar.
//
// The function returns the following values:
//
//   - domcssStyleSheet: KitDOMCSSStyleSheet.
//
func (self *DOMDOMImplementation) CreateCSSStyleSheet(title, media string) (*DOMCSSStyleSheet, error) {
	var _arg0 *C.WebKitDOMDOMImplementation // out
	var _arg1 *C.gchar                      // out
	var _arg2 *C.gchar                      // out
	var _cret *C.WebKitDOMCSSStyleSheet     // in
	var _cerr *C.GError                     // in

	_arg0 = (*C.WebKitDOMDOMImplementation)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(title)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(media)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.webkit_dom_dom_implementation_create_css_style_sheet(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(title)
	runtime.KeepAlive(media)

	var _domcssStyleSheet *DOMCSSStyleSheet // out
	var _goerr error                        // out

	_domcssStyleSheet = wrapDOMCSSStyleSheet(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domcssStyleSheet, _goerr
}

// CreateDocument: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - namespaceURI (optional): #gchar.
//   - qualifiedName: #gchar.
//   - doctype (optional): KitDOMDocumentType.
//
// The function returns the following values:
//
//   - domDocument: KitDOMDocument.
//
func (self *DOMDOMImplementation) CreateDocument(namespaceURI, qualifiedName string, doctype *DOMDocumentType) (*DOMDocument, error) {
	var _arg0 *C.WebKitDOMDOMImplementation // out
	var _arg1 *C.gchar                      // out
	var _arg2 *C.gchar                      // out
	var _arg3 *C.WebKitDOMDocumentType      // out
	var _cret *C.WebKitDOMDocument          // in
	var _cerr *C.GError                     // in

	_arg0 = (*C.WebKitDOMDOMImplementation)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if namespaceURI != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(namespaceURI)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(qualifiedName)))
	defer C.free(unsafe.Pointer(_arg2))
	if doctype != nil {
		_arg3 = (*C.WebKitDOMDocumentType)(unsafe.Pointer(coreglib.InternObject(doctype).Native()))
	}

	_cret = C.webkit_dom_dom_implementation_create_document(_arg0, _arg1, _arg2, _arg3, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(namespaceURI)
	runtime.KeepAlive(qualifiedName)
	runtime.KeepAlive(doctype)

	var _domDocument *DOMDocument // out
	var _goerr error              // out

	_domDocument = wrapDOMDocument(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domDocument, _goerr
}

// CreateDocumentType: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - qualifiedName: #gchar.
//   - publicId: #gchar.
//   - systemId: #gchar.
//
// The function returns the following values:
//
//   - domDocumentType: KitDOMDocumentType.
//
func (self *DOMDOMImplementation) CreateDocumentType(qualifiedName, publicId, systemId string) (*DOMDocumentType, error) {
	var _arg0 *C.WebKitDOMDOMImplementation // out
	var _arg1 *C.gchar                      // out
	var _arg2 *C.gchar                      // out
	var _arg3 *C.gchar                      // out
	var _cret *C.WebKitDOMDocumentType      // in
	var _cerr *C.GError                     // in

	_arg0 = (*C.WebKitDOMDOMImplementation)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(qualifiedName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(publicId)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = (*C.gchar)(unsafe.Pointer(C.CString(systemId)))
	defer C.free(unsafe.Pointer(_arg3))

	_cret = C.webkit_dom_dom_implementation_create_document_type(_arg0, _arg1, _arg2, _arg3, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(qualifiedName)
	runtime.KeepAlive(publicId)
	runtime.KeepAlive(systemId)

	var _domDocumentType *DOMDocumentType // out
	var _goerr error                      // out

	_domDocumentType = wrapDOMDocumentType(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domDocumentType, _goerr
}

// CreateHtmlDocument: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - title: #gchar.
//
// The function returns the following values:
//
//   - domhtmlDocument: KitDOMHTMLDocument.
//
func (self *DOMDOMImplementation) CreateHtmlDocument(title string) *DOMHTMLDocument {
	var _arg0 *C.WebKitDOMDOMImplementation // out
	var _arg1 *C.gchar                      // out
	var _cret *C.WebKitDOMHTMLDocument      // in

	_arg0 = (*C.WebKitDOMDOMImplementation)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(title)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_dom_implementation_create_html_document(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(title)

	var _domhtmlDocument *DOMHTMLDocument // out

	_domhtmlDocument = wrapDOMHTMLDocument(coreglib.Take(unsafe.Pointer(_cret)))

	return _domhtmlDocument
}

// HasFeature: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - feature: #gchar.
//   - version: #gchar.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMDOMImplementation) HasFeature(feature, version string) bool {
	var _arg0 *C.WebKitDOMDOMImplementation // out
	var _arg1 *C.gchar                      // out
	var _arg2 *C.gchar                      // out
	var _cret C.gboolean                    // in

	_arg0 = (*C.WebKitDOMDOMImplementation)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(feature)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(version)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.webkit_dom_dom_implementation_has_feature(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(version)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// DOMDOMImplementationClass: instance of this type is always passed by
// reference.
type DOMDOMImplementationClass struct {
	*domdomImplementationClass
}

// domdomImplementationClass is the struct that's finalized.
type domdomImplementationClass struct {
	native *C.WebKitDOMDOMImplementationClass
}

func (d *DOMDOMImplementationClass) ParentClass() *DOMObjectClass {
	valptr := &d.native.parent_class
	var _v *DOMObjectClass // out
	_v = (*DOMObjectClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
