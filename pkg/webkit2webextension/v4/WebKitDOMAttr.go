// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMAttr = coreglib.Type(C.webkit_dom_attr_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMAttr, F: marshalDOMAttr},
	})
}

// DOMAttrOverrides contains methods that are overridable.
type DOMAttrOverrides struct {
}

func defaultDOMAttrOverrides(v *DOMAttr) DOMAttrOverrides {
	return DOMAttrOverrides{}
}

type DOMAttr struct {
	_ [0]func() // equal guard
	DOMNode
}

var (
	_ coreglib.Objector = (*DOMAttr)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMAttr, *DOMAttrClass, DOMAttrOverrides](
		GTypeDOMAttr,
		initDOMAttrClass,
		wrapDOMAttr,
		defaultDOMAttrOverrides,
	)
}

func initDOMAttrClass(gclass unsafe.Pointer, overrides DOMAttrOverrides, classInitFunc func(*DOMAttrClass)) {
	if classInitFunc != nil {
		class := (*DOMAttrClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMAttr(obj *coreglib.Object) *DOMAttr {
	return &DOMAttr{
		DOMNode: DOMNode{
			DOMObject: DOMObject{
				Object: obj,
			},
			Object: obj,
			DOMEventTarget: DOMEventTarget{
				Object: obj,
			},
		},
	}
}

func marshalDOMAttr(p uintptr) (interface{}, error) {
	return wrapDOMAttr(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// LocalName: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMAttr) LocalName() string {
	var _arg0 *C.WebKitDOMAttr // out
	var _cret *C.gchar         // in

	_arg0 = (*C.WebKitDOMAttr)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_attr_get_local_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Name: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMAttr) Name() string {
	var _arg0 *C.WebKitDOMAttr // out
	var _cret *C.gchar         // in

	_arg0 = (*C.WebKitDOMAttr)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_attr_get_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// NamespaceURI: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMAttr) NamespaceURI() string {
	var _arg0 *C.WebKitDOMAttr // out
	var _cret *C.gchar         // in

	_arg0 = (*C.WebKitDOMAttr)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_attr_get_namespace_uri(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// OwnerElement: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domElement: KitDOMElement.
//
func (self *DOMAttr) OwnerElement() *DOMElement {
	var _arg0 *C.WebKitDOMAttr    // out
	var _cret *C.WebKitDOMElement // in

	_arg0 = (*C.WebKitDOMAttr)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_attr_get_owner_element(_arg0)
	runtime.KeepAlive(self)

	var _domElement *DOMElement // out

	_domElement = wrapDOMElement(coreglib.Take(unsafe.Pointer(_cret)))

	return _domElement
}

// Prefix: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMAttr) Prefix() string {
	var _arg0 *C.WebKitDOMAttr // out
	var _cret *C.gchar         // in

	_arg0 = (*C.WebKitDOMAttr)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_attr_get_prefix(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// Specified: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - ok: #gboolean.
//
func (self *DOMAttr) Specified() bool {
	var _arg0 *C.WebKitDOMAttr // out
	var _cret C.gboolean       // in

	_arg0 = (*C.WebKitDOMAttr)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_attr_get_specified(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Value: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMAttr) Value() string {
	var _arg0 *C.WebKitDOMAttr // out
	var _cret *C.gchar         // in

	_arg0 = (*C.WebKitDOMAttr)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_attr_get_value(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// SetValue: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - value: #gchar.
//
func (self *DOMAttr) SetValue(value string) error {
	var _arg0 *C.WebKitDOMAttr // out
	var _arg1 *C.gchar         // out
	var _cerr *C.GError        // in

	_arg0 = (*C.WebKitDOMAttr)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(value)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_attr_set_value(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(value)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// DOMAttrClass: instance of this type is always passed by reference.
type DOMAttrClass struct {
	*domAttrClass
}

// domAttrClass is the struct that's finalized.
type domAttrClass struct {
	native *C.WebKitDOMAttrClass
}

func (d *DOMAttrClass) ParentClass() *DOMNodeClass {
	valptr := &d.native.parent_class
	var _v *DOMNodeClass // out
	_v = (*DOMNodeClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
