// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMComment = coreglib.Type(C.webkit_dom_comment_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMComment, F: marshalDOMComment},
	})
}

// DOMCommentOverrides contains methods that are overridable.
type DOMCommentOverrides struct {
}

func defaultDOMCommentOverrides(v *DOMComment) DOMCommentOverrides {
	return DOMCommentOverrides{}
}

type DOMComment struct {
	_ [0]func() // equal guard
	DOMCharacterData
}

var (
	_ coreglib.Objector = (*DOMComment)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMComment, *DOMCommentClass, DOMCommentOverrides](
		GTypeDOMComment,
		initDOMCommentClass,
		wrapDOMComment,
		defaultDOMCommentOverrides,
	)
}

func initDOMCommentClass(gclass unsafe.Pointer, overrides DOMCommentOverrides, classInitFunc func(*DOMCommentClass)) {
	if classInitFunc != nil {
		class := (*DOMCommentClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMComment(obj *coreglib.Object) *DOMComment {
	return &DOMComment{
		DOMCharacterData: DOMCharacterData{
			DOMNode: DOMNode{
				DOMObject: DOMObject{
					Object: obj,
				},
				Object: obj,
				DOMEventTarget: DOMEventTarget{
					Object: obj,
				},
			},
		},
	}
}

func marshalDOMComment(p uintptr) (interface{}, error) {
	return wrapDOMComment(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// DOMCommentClass: instance of this type is always passed by reference.
type DOMCommentClass struct {
	*domCommentClass
}

// domCommentClass is the struct that's finalized.
type domCommentClass struct {
	native *C.WebKitDOMCommentClass
}

func (d *DOMCommentClass) ParentClass() *DOMCharacterDataClass {
	valptr := &d.native.parent_class
	var _v *DOMCharacterDataClass // out
	_v = (*DOMCharacterDataClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
