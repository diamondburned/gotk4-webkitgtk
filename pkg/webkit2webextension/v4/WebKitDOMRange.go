// Code generated by girgen. DO NOT EDIT.

package webkit2webextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit-web-extension.h>
import "C"

// GType values.
var (
	GTypeDOMRange = coreglib.Type(C.webkit_dom_range_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDOMRange, F: marshalDOMRange},
	})
}

// DOM_RANGE_END_TO_END: deprecated: Use JavaScriptCore API instead.
const DOM_RANGE_END_TO_END = 2

// DOM_RANGE_END_TO_START: deprecated: Use JavaScriptCore API instead.
const DOM_RANGE_END_TO_START = 3

// DOM_RANGE_NODE_AFTER: deprecated: Use JavaScriptCore API instead.
const DOM_RANGE_NODE_AFTER = 1

// DOM_RANGE_NODE_BEFORE: deprecated: Use JavaScriptCore API instead.
const DOM_RANGE_NODE_BEFORE = 0

// DOM_RANGE_NODE_BEFORE_AND_AFTER: deprecated: Use JavaScriptCore API instead.
const DOM_RANGE_NODE_BEFORE_AND_AFTER = 2

// DOM_RANGE_NODE_INSIDE: deprecated: Use JavaScriptCore API instead.
const DOM_RANGE_NODE_INSIDE = 3

// DOM_RANGE_START_TO_END: deprecated: Use JavaScriptCore API instead.
const DOM_RANGE_START_TO_END = 1

// DOM_RANGE_START_TO_START: deprecated: Use JavaScriptCore API instead.
const DOM_RANGE_START_TO_START = 0

// DOMRangeOverrides contains methods that are overridable.
type DOMRangeOverrides struct {
}

func defaultDOMRangeOverrides(v *DOMRange) DOMRangeOverrides {
	return DOMRangeOverrides{}
}

type DOMRange struct {
	_ [0]func() // equal guard
	DOMObject
}

var (
	_ coreglib.Objector = (*DOMRange)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*DOMRange, *DOMRangeClass, DOMRangeOverrides](
		GTypeDOMRange,
		initDOMRangeClass,
		wrapDOMRange,
		defaultDOMRangeOverrides,
	)
}

func initDOMRangeClass(gclass unsafe.Pointer, overrides DOMRangeOverrides, classInitFunc func(*DOMRangeClass)) {
	if classInitFunc != nil {
		class := (*DOMRangeClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapDOMRange(obj *coreglib.Object) *DOMRange {
	return &DOMRange{
		DOMObject: DOMObject{
			Object: obj,
		},
	}
}

func marshalDOMRange(p uintptr) (interface{}, error) {
	return wrapDOMRange(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// CloneContents: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domDocumentFragment: KitDOMDocumentFragment.
//
func (self *DOMRange) CloneContents() (*DOMDocumentFragment, error) {
	var _arg0 *C.WebKitDOMRange            // out
	var _cret *C.WebKitDOMDocumentFragment // in
	var _cerr *C.GError                    // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_range_clone_contents(_arg0, &_cerr)
	runtime.KeepAlive(self)

	var _domDocumentFragment *DOMDocumentFragment // out
	var _goerr error                              // out

	_domDocumentFragment = wrapDOMDocumentFragment(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domDocumentFragment, _goerr
}

// CloneRange: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domRange: KitDOMRange.
//
func (self *DOMRange) CloneRange() (*DOMRange, error) {
	var _arg0 *C.WebKitDOMRange // out
	var _cret *C.WebKitDOMRange // in
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_range_clone_range(_arg0, &_cerr)
	runtime.KeepAlive(self)

	var _domRange *DOMRange // out
	var _goerr error        // out

	_domRange = wrapDOMRange(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domRange, _goerr
}

// Collapse: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - toStart: #gboolean.
//
func (self *DOMRange) Collapse(toStart bool) error {
	var _arg0 *C.WebKitDOMRange // out
	var _arg1 C.gboolean        // out
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if toStart {
		_arg1 = C.TRUE
	}

	C.webkit_dom_range_collapse(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(toStart)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// CompareBoundaryPoints: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - how: #gushort.
//   - sourceRange: KitDOMRange.
//
// The function returns the following values:
//
//   - gshort: #gshort.
//
func (self *DOMRange) CompareBoundaryPoints(how uint16, sourceRange *DOMRange) (int16, error) {
	var _arg0 *C.WebKitDOMRange // out
	var _arg1 C.gushort         // out
	var _arg2 *C.WebKitDOMRange // out
	var _cret C.gshort          // in
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.gushort(how)
	_arg2 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(sourceRange).Native()))

	_cret = C.webkit_dom_range_compare_boundary_points(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(how)
	runtime.KeepAlive(sourceRange)

	var _gshort int16 // out
	var _goerr error  // out

	_gshort = int16(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _gshort, _goerr
}

// CompareNode: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - refNode: KitDOMNode.
//
// The function returns the following values:
//
//   - gshort: #gshort.
//
func (self *DOMRange) CompareNode(refNode *DOMNode) (int16, error) {
	var _arg0 *C.WebKitDOMRange // out
	var _arg1 *C.WebKitDOMNode  // out
	var _cret C.gshort          // in
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(refNode).Native()))

	_cret = C.webkit_dom_range_compare_node(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(refNode)

	var _gshort int16 // out
	var _goerr error  // out

	_gshort = int16(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _gshort, _goerr
}

// ComparePoint: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - refNode: KitDOMNode.
//   - offset: #glong.
//
// The function returns the following values:
//
//   - gshort: #gshort.
//
func (self *DOMRange) ComparePoint(refNode *DOMNode, offset int32) (int16, error) {
	var _arg0 *C.WebKitDOMRange // out
	var _arg1 *C.WebKitDOMNode  // out
	var _arg2 C.glong           // out
	var _cret C.gshort          // in
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(refNode).Native()))
	_arg2 = C.glong(offset)

	_cret = C.webkit_dom_range_compare_point(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(refNode)
	runtime.KeepAlive(offset)

	var _gshort int16 // out
	var _goerr error  // out

	_gshort = int16(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _gshort, _goerr
}

// CreateContextualFragment: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - html: #gchar.
//
// The function returns the following values:
//
//   - domDocumentFragment: KitDOMDocumentFragment.
//
func (self *DOMRange) CreateContextualFragment(html string) (*DOMDocumentFragment, error) {
	var _arg0 *C.WebKitDOMRange            // out
	var _arg1 *C.gchar                     // out
	var _cret *C.WebKitDOMDocumentFragment // in
	var _cerr *C.GError                    // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(html)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_dom_range_create_contextual_fragment(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(html)

	var _domDocumentFragment *DOMDocumentFragment // out
	var _goerr error                              // out

	_domDocumentFragment = wrapDOMDocumentFragment(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domDocumentFragment, _goerr
}

// DeleteContents: deprecated: Use JavaScriptCore API instead.
func (self *DOMRange) DeleteContents() error {
	var _arg0 *C.WebKitDOMRange // out
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_range_delete_contents(_arg0, &_cerr)
	runtime.KeepAlive(self)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Detach: deprecated: Use JavaScriptCore API instead.
func (self *DOMRange) Detach() error {
	var _arg0 *C.WebKitDOMRange // out
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_range_detach(_arg0, &_cerr)
	runtime.KeepAlive(self)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// Expand: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - unit: #gchar.
//
func (self *DOMRange) Expand(unit string) error {
	var _arg0 *C.WebKitDOMRange // out
	var _arg1 *C.gchar          // out
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(unit)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_dom_range_expand(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(unit)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// ExtractContents: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domDocumentFragment: KitDOMDocumentFragment.
//
func (self *DOMRange) ExtractContents() (*DOMDocumentFragment, error) {
	var _arg0 *C.WebKitDOMRange            // out
	var _cret *C.WebKitDOMDocumentFragment // in
	var _cerr *C.GError                    // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_range_extract_contents(_arg0, &_cerr)
	runtime.KeepAlive(self)

	var _domDocumentFragment *DOMDocumentFragment // out
	var _goerr error                              // out

	_domDocumentFragment = wrapDOMDocumentFragment(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domDocumentFragment, _goerr
}

// Collapsed: deprecated: Use JavaScriptCore API instead.
func (self *DOMRange) Collapsed() error {
	var _arg0 *C.WebKitDOMRange // out
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.webkit_dom_range_get_collapsed(_arg0, &_cerr)
	runtime.KeepAlive(self)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// CommonAncestorContainer: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMRange) CommonAncestorContainer() (*DOMNode, error) {
	var _arg0 *C.WebKitDOMRange // out
	var _cret *C.WebKitDOMNode  // in
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_range_get_common_ancestor_container(_arg0, &_cerr)
	runtime.KeepAlive(self)

	var _domNode *DOMNode // out
	var _goerr error      // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domNode, _goerr
}

// EndContainer: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMRange) EndContainer() (*DOMNode, error) {
	var _arg0 *C.WebKitDOMRange // out
	var _cret *C.WebKitDOMNode  // in
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_range_get_end_container(_arg0, &_cerr)
	runtime.KeepAlive(self)

	var _domNode *DOMNode // out
	var _goerr error      // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domNode, _goerr
}

// EndOffset: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMRange) EndOffset() (int32, error) {
	var _arg0 *C.WebKitDOMRange // out
	var _cret C.glong           // in
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_range_get_end_offset(_arg0, &_cerr)
	runtime.KeepAlive(self)

	var _glong int32 // out
	var _goerr error // out

	_glong = int32(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _glong, _goerr
}

// StartContainer: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - domNode: KitDOMNode.
//
func (self *DOMRange) StartContainer() (*DOMNode, error) {
	var _arg0 *C.WebKitDOMRange // out
	var _cret *C.WebKitDOMNode  // in
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_range_get_start_container(_arg0, &_cerr)
	runtime.KeepAlive(self)

	var _domNode *DOMNode // out
	var _goerr error      // out

	_domNode = wrapDOMNode(coreglib.Take(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _domNode, _goerr
}

// StartOffset: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - glong: #glong.
//
func (self *DOMRange) StartOffset() (int32, error) {
	var _arg0 *C.WebKitDOMRange // out
	var _cret C.glong           // in
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_range_get_start_offset(_arg0, &_cerr)
	runtime.KeepAlive(self)

	var _glong int32 // out
	var _goerr error // out

	_glong = int32(_cret)
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _glong, _goerr
}

// Text: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMRange) Text() string {
	var _arg0 *C.WebKitDOMRange // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_range_get_text(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// InsertNode: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - newNode: KitDOMNode.
//
func (self *DOMRange) InsertNode(newNode *DOMNode) error {
	var _arg0 *C.WebKitDOMRange // out
	var _arg1 *C.WebKitDOMNode  // out
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(newNode).Native()))

	C.webkit_dom_range_insert_node(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(newNode)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// IntersectsNode: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - refNode: KitDOMNode.
//
func (self *DOMRange) IntersectsNode(refNode *DOMNode) error {
	var _arg0 *C.WebKitDOMRange // out
	var _arg1 *C.WebKitDOMNode  // out
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(refNode).Native()))

	C.webkit_dom_range_intersects_node(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(refNode)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// IsPointInRange: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - refNode: KitDOMNode.
//   - offset: #glong.
//
func (self *DOMRange) IsPointInRange(refNode *DOMNode, offset int32) error {
	var _arg0 *C.WebKitDOMRange // out
	var _arg1 *C.WebKitDOMNode  // out
	var _arg2 C.glong           // out
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(refNode).Native()))
	_arg2 = C.glong(offset)

	C.webkit_dom_range_is_point_in_range(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(refNode)
	runtime.KeepAlive(offset)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SelectNode: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - refNode: KitDOMNode.
//
func (self *DOMRange) SelectNode(refNode *DOMNode) error {
	var _arg0 *C.WebKitDOMRange // out
	var _arg1 *C.WebKitDOMNode  // out
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(refNode).Native()))

	C.webkit_dom_range_select_node(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(refNode)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SelectNodeContents: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - refNode: KitDOMNode.
//
func (self *DOMRange) SelectNodeContents(refNode *DOMNode) error {
	var _arg0 *C.WebKitDOMRange // out
	var _arg1 *C.WebKitDOMNode  // out
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(refNode).Native()))

	C.webkit_dom_range_select_node_contents(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(refNode)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetEnd: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - refNode: KitDOMNode.
//   - offset: #glong.
//
func (self *DOMRange) SetEnd(refNode *DOMNode, offset int32) error {
	var _arg0 *C.WebKitDOMRange // out
	var _arg1 *C.WebKitDOMNode  // out
	var _arg2 C.glong           // out
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(refNode).Native()))
	_arg2 = C.glong(offset)

	C.webkit_dom_range_set_end(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(refNode)
	runtime.KeepAlive(offset)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetEndAfter: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - refNode: KitDOMNode.
//
func (self *DOMRange) SetEndAfter(refNode *DOMNode) error {
	var _arg0 *C.WebKitDOMRange // out
	var _arg1 *C.WebKitDOMNode  // out
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(refNode).Native()))

	C.webkit_dom_range_set_end_after(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(refNode)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetEndBefore: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - refNode: KitDOMNode.
//
func (self *DOMRange) SetEndBefore(refNode *DOMNode) error {
	var _arg0 *C.WebKitDOMRange // out
	var _arg1 *C.WebKitDOMNode  // out
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(refNode).Native()))

	C.webkit_dom_range_set_end_before(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(refNode)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetStart: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - refNode: KitDOMNode.
//   - offset: #glong.
//
func (self *DOMRange) SetStart(refNode *DOMNode, offset int32) error {
	var _arg0 *C.WebKitDOMRange // out
	var _arg1 *C.WebKitDOMNode  // out
	var _arg2 C.glong           // out
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(refNode).Native()))
	_arg2 = C.glong(offset)

	C.webkit_dom_range_set_start(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(refNode)
	runtime.KeepAlive(offset)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetStartAfter: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - refNode: KitDOMNode.
//
func (self *DOMRange) SetStartAfter(refNode *DOMNode) error {
	var _arg0 *C.WebKitDOMRange // out
	var _arg1 *C.WebKitDOMNode  // out
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(refNode).Native()))

	C.webkit_dom_range_set_start_after(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(refNode)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetStartBefore: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - refNode: KitDOMNode.
//
func (self *DOMRange) SetStartBefore(refNode *DOMNode) error {
	var _arg0 *C.WebKitDOMRange // out
	var _arg1 *C.WebKitDOMNode  // out
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(refNode).Native()))

	C.webkit_dom_range_set_start_before(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(refNode)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SurroundContents: deprecated: Use JavaScriptCore API instead.
//
// The function takes the following parameters:
//
//   - newParent: KitDOMNode.
//
func (self *DOMRange) SurroundContents(newParent *DOMNode) error {
	var _arg0 *C.WebKitDOMRange // out
	var _arg1 *C.WebKitDOMNode  // out
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.WebKitDOMNode)(unsafe.Pointer(coreglib.InternObject(newParent).Native()))

	C.webkit_dom_range_surround_contents(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(self)
	runtime.KeepAlive(newParent)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// String: deprecated: Use JavaScriptCore API instead.
//
// The function returns the following values:
//
//   - utf8: #gchar.
//
func (self *DOMRange) String() (string, error) {
	var _arg0 *C.WebKitDOMRange // out
	var _cret *C.gchar          // in
	var _cerr *C.GError         // in

	_arg0 = (*C.WebKitDOMRange)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.webkit_dom_range_to_string(_arg0, &_cerr)
	runtime.KeepAlive(self)

	var _utf8 string // out
	var _goerr error // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _utf8, _goerr
}

// DOMRangeClass: instance of this type is always passed by reference.
type DOMRangeClass struct {
	*domRangeClass
}

// domRangeClass is the struct that's finalized.
type domRangeClass struct {
	native *C.WebKitDOMRangeClass
}

func (d *DOMRangeClass) ParentClass() *DOMObjectClass {
	valptr := &d.native.parent_class
	var _v *DOMObjectClass // out
	_v = (*DOMObjectClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
