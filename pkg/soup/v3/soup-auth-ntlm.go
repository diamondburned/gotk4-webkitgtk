// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeAuthNTLM = coreglib.Type(C.soup_auth_ntlm_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAuthNTLM, F: marshalAuthNTLM},
	})
}

// AuthNTLM: HTTP-based NTLM authentication.
//
// sessions do not support this type by default; if you want to enable support
// for it, call session.AddFeatureByType, passing SOUP_TYPE_AUTH_NTLM.
type AuthNTLM struct {
	_ [0]func() // equal guard
	Auth
}

var (
	_ Auther = (*AuthNTLM)(nil)
)

func wrapAuthNTLM(obj *coreglib.Object) *AuthNTLM {
	return &AuthNTLM{
		Auth: Auth{
			Object: obj,
		},
	}
}

func marshalAuthNTLM(p uintptr) (interface{}, error) {
	return wrapAuthNTLM(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
