// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <libsoup/soup.h>
import "C"

//export _gotk4_soup3_Message_ConnectAcceptCertificate
func _gotk4_soup3_Message_ConnectAcceptCertificate(arg0 C.gpointer, arg1 *C.GTlsCertificate, arg2 C.GTlsCertificateFlags, arg3 C.guintptr) (cret C.gboolean) {
	var f func(tlsPeerCertificate gio.TLSCertificater, tlsPeerErrors gio.TLSCertificateFlags) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(tlsPeerCertificate gio.TLSCertificater, tlsPeerErrors gio.TLSCertificateFlags) (ok bool))
	}

	var _tlsPeerCertificate gio.TLSCertificater // out
	var _tlsPeerErrors gio.TLSCertificateFlags  // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.TLSCertificater is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gio.TLSCertificater)
			return ok
		})
		rv, ok := casted.(gio.TLSCertificater)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.TLSCertificater")
		}
		_tlsPeerCertificate = rv
	}
	_tlsPeerErrors = gio.TLSCertificateFlags(arg2)

	ok := f(_tlsPeerCertificate, _tlsPeerErrors)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_soup3_Message_ConnectAuthenticate
func _gotk4_soup3_Message_ConnectAuthenticate(arg0 C.gpointer, arg1 *C.SoupAuth, arg2 C.gboolean, arg3 C.guintptr) (cret C.gboolean) {
	var f func(auth Auther, retrying bool) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(auth Auther, retrying bool) (ok bool))
	}

	var _auth Auther   // out
	var _retrying bool // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type soup.Auther is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Auther)
			return ok
		})
		rv, ok := casted.(Auther)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching soup.Auther")
		}
		_auth = rv
	}
	if arg2 != 0 {
		_retrying = true
	}

	ok := f(_auth, _retrying)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_soup3_Message_ConnectContentSniffed
func _gotk4_soup3_Message_ConnectContentSniffed(arg0 C.gpointer, arg1 *C.gchar, arg2 *C.GHashTable, arg3 C.guintptr) {
	var f func(typ string, params map[string]string)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(typ string, params map[string]string))
	}

	var _typ string               // out
	var _params map[string]string // out

	_typ = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	_params = make(map[string]string, gextras.HashTableSize(unsafe.Pointer(arg2)))
	gextras.MoveHashTable(unsafe.Pointer(arg2), false, func(k, v unsafe.Pointer) {
		ksrc := *(**C.gchar)(k)
		vsrc := *(**C.gchar)(v)
		var kdst string // out
		var vdst string // out
		kdst = C.GoString((*C.gchar)(unsafe.Pointer(ksrc)))
		vdst = C.GoString((*C.gchar)(unsafe.Pointer(vsrc)))
		_params[kdst] = vdst
	})

	f(_typ, _params)
}

//export _gotk4_soup3_Message_ConnectFinished
func _gotk4_soup3_Message_ConnectFinished(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup3_Message_ConnectGotBody
func _gotk4_soup3_Message_ConnectGotBody(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup3_Message_ConnectGotBodyData
func _gotk4_soup3_Message_ConnectGotBodyData(arg0 C.gpointer, arg1 C.guint, arg2 C.guintptr) {
	var f func(chunkSize uint)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(chunkSize uint))
	}

	var _chunkSize uint // out

	_chunkSize = uint(arg1)

	f(_chunkSize)
}

//export _gotk4_soup3_Message_ConnectGotHeaders
func _gotk4_soup3_Message_ConnectGotHeaders(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup3_Message_ConnectGotInformational
func _gotk4_soup3_Message_ConnectGotInformational(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup3_Message_ConnectHstsEnforced
func _gotk4_soup3_Message_ConnectHstsEnforced(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup3_Message_ConnectNetworkEvent
func _gotk4_soup3_Message_ConnectNetworkEvent(arg0 C.gpointer, arg1 C.GSocketClientEvent, arg2 *C.GIOStream, arg3 C.guintptr) {
	var f func(event gio.SocketClientEvent, connection gio.IOStreamer)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event gio.SocketClientEvent, connection gio.IOStreamer))
	}

	var _event gio.SocketClientEvent // out
	var _connection gio.IOStreamer   // out

	_event = gio.SocketClientEvent(arg1)
	{
		objptr := unsafe.Pointer(arg2)
		if objptr == nil {
			panic("object of type gio.IOStreamer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gio.IOStreamer)
			return ok
		})
		rv, ok := casted.(gio.IOStreamer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.IOStreamer")
		}
		_connection = rv
	}

	f(_event, _connection)
}

//export _gotk4_soup3_Message_ConnectRequestCertificate
func _gotk4_soup3_Message_ConnectRequestCertificate(arg0 C.gpointer, arg1 *C.GTlsClientConnection, arg2 C.guintptr) (cret C.gboolean) {
	var f func(tlsConnection gio.TLSClientConnectioner) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(tlsConnection gio.TLSClientConnectioner) (ok bool))
	}

	var _tlsConnection gio.TLSClientConnectioner // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gio.TLSClientConnectioner is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gio.TLSClientConnectioner)
			return ok
		})
		rv, ok := casted.(gio.TLSClientConnectioner)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.TLSClientConnectioner")
		}
		_tlsConnection = rv
	}

	ok := f(_tlsConnection)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_soup3_Message_ConnectRequestCertificatePassword
func _gotk4_soup3_Message_ConnectRequestCertificatePassword(arg0 C.gpointer, arg1 *C.GTlsPassword, arg2 C.guintptr) (cret C.gboolean) {
	var f func(tlsPassword *gio.TLSPassword) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(tlsPassword *gio.TLSPassword) (ok bool))
	}

	var _tlsPassword *gio.TLSPassword // out

	{
		obj := coreglib.Take(unsafe.Pointer(arg1))
		_tlsPassword = &gio.TLSPassword{
			Object: obj,
		}
	}

	ok := f(_tlsPassword)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_soup3_Message_ConnectRestarted
func _gotk4_soup3_Message_ConnectRestarted(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup3_Message_ConnectStarting
func _gotk4_soup3_Message_ConnectStarting(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup3_Message_ConnectWroteBody
func _gotk4_soup3_Message_ConnectWroteBody(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup3_Message_ConnectWroteBodyData
func _gotk4_soup3_Message_ConnectWroteBodyData(arg0 C.gpointer, arg1 C.guint, arg2 C.guintptr) {
	var f func(chunkSize uint)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(chunkSize uint))
	}

	var _chunkSize uint // out

	_chunkSize = uint(arg1)

	f(_chunkSize)
}

//export _gotk4_soup3_Message_ConnectWroteHeaders
func _gotk4_soup3_Message_ConnectWroteHeaders(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}
