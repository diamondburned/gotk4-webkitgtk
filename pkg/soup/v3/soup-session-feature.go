// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeSessionFeature = coreglib.Type(C.soup_session_feature_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSessionFeature, F: marshalSessionFeature},
	})
}

// SessionFeature: interface for miscellaneous session features.
//
// SessionFeature is the interface used by classes that extend the functionality
// of a session. Some features like HTTP authentication handling are implemented
// internally via SoupSessionFeatures. Other features can be added to the
// session by the application. (Eg, logger, cookiejar.)
//
// See session.AddFeature, etc, to add a feature to a session.
//
// SessionFeature wraps an interface. This means the user can get the
// underlying type by calling Cast().
type SessionFeature struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*SessionFeature)(nil)
)

// SessionFeaturer describes SessionFeature's interface methods.
type SessionFeaturer interface {
	coreglib.Objector

	baseSessionFeature() *SessionFeature
}

var _ SessionFeaturer = (*SessionFeature)(nil)

func wrapSessionFeature(obj *coreglib.Object) *SessionFeature {
	return &SessionFeature{
		Object: obj,
	}
}

func marshalSessionFeature(p uintptr) (interface{}, error) {
	return wrapSessionFeature(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *SessionFeature) baseSessionFeature() *SessionFeature {
	return v
}

// BaseSessionFeature returns the underlying base object.
func BaseSessionFeature(obj SessionFeaturer) *SessionFeature {
	return obj.baseSessionFeature()
}
