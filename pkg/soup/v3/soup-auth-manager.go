// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeAuthManager = coreglib.Type(C.soup_auth_manager_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAuthManager, F: marshalAuthManager},
	})
}

// AuthManagerOverrides contains methods that are overridable.
type AuthManagerOverrides struct {
}

func defaultAuthManagerOverrides(v *AuthManager) AuthManagerOverrides {
	return AuthManagerOverrides{}
}

// AuthManager: HTTP client-side authentication handler.
//
// AuthManager is the sessionfeature that handles HTTP authentication for a
// session.
//
// A AuthManager is added to the session by default, and normally you
// don't need to worry about it at all. However, if you want to disable
// HTTP authentication, you can remove the feature from the session with
// session.RemoveFeatureByType or disable it on individual requests with
// message.DisableFeature.
//
// You can use this with session.RemoveFeatureByType or message.DisableFeature.
//
// (Although this type has only been publicly visible since libsoup 2.42,
// it has always existed in the background, and you can use g_type_from_name
// ("SoupAuthManager") to get its glib.Type in earlier releases.).
type AuthManager struct {
	_ [0]func() // equal guard
	*coreglib.Object

	SessionFeature
}

var (
	_ coreglib.Objector = (*AuthManager)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*AuthManager, *AuthManagerClass, AuthManagerOverrides](
		GTypeAuthManager,
		initAuthManagerClass,
		wrapAuthManager,
		defaultAuthManagerOverrides,
	)
}

func initAuthManagerClass(gclass unsafe.Pointer, overrides AuthManagerOverrides, classInitFunc func(*AuthManagerClass)) {
	if classInitFunc != nil {
		class := (*AuthManagerClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapAuthManager(obj *coreglib.Object) *AuthManager {
	return &AuthManager{
		Object: obj,
		SessionFeature: SessionFeature{
			Object: obj,
		},
	}
}

func marshalAuthManager(p uintptr) (interface{}, error) {
	return wrapAuthManager(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ClearCachedCredentials: clear all credentials cached by manager.
func (manager *AuthManager) ClearCachedCredentials() {
	var _arg0 *C.SoupAuthManager // out

	_arg0 = (*C.SoupAuthManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))

	C.soup_auth_manager_clear_cached_credentials(_arg0)
	runtime.KeepAlive(manager)
}

// UseAuth records that auth is to be used under uri, as though a
// WWW-Authenticate header had been received at that URI.
//
// This can be used to "preload" manager's auth cache, to avoid an extra HTTP
// round trip in the case where you know ahead of time that a 401 response will
// be returned.
//
// This is only useful for authentication types where the initial Authorization
// header does not depend on any additional information from the server. (Eg,
// Basic or NTLM, but not Digest.).
//
// The function takes the following parameters:
//
//   - uri under which auth is to be used.
//   - auth to use.
//
func (manager *AuthManager) UseAuth(uri *glib.URI, auth Auther) {
	var _arg0 *C.SoupAuthManager // out
	var _arg1 *C.GUri            // out
	var _arg2 *C.SoupAuth        // out

	_arg0 = (*C.SoupAuthManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	_arg1 = (*C.GUri)(gextras.StructNative(unsafe.Pointer(uri)))
	_arg2 = (*C.SoupAuth)(unsafe.Pointer(coreglib.InternObject(auth).Native()))

	C.soup_auth_manager_use_auth(_arg0, _arg1, _arg2)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(uri)
	runtime.KeepAlive(auth)
}

// AuthManagerClass: instance of this type is always passed by reference.
type AuthManagerClass struct {
	*authManagerClass
}

// authManagerClass is the struct that's finalized.
type authManagerClass struct {
	native *C.SoupAuthManagerClass
}
