// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeContentDecoder = coreglib.Type(C.soup_content_decoder_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeContentDecoder, F: marshalContentDecoder},
	})
}

// ContentDecoderOverrides contains methods that are overridable.
type ContentDecoderOverrides struct {
}

func defaultContentDecoderOverrides(v *ContentDecoder) ContentDecoderOverrides {
	return ContentDecoderOverrides{}
}

// ContentDecoder handles decoding of HTTP messages.
//
// ContentDecoder handles adding the "Accept-Encoding" header on outgoing
// messages, and processing the "Content-Encoding" header on incoming ones.
// Currently it supports the "gzip", "deflate", and "br" content codings.
//
// A ContentDecoder will automatically be added to the session by default.
// (You can use session.RemoveFeatureByType if you don't want this.)
//
// If ContentDecoder successfully decodes the Content-Encoding, the message body
// will contain the decoded data; however, the message headers will be unchanged
// (and so "Content-Encoding" will still be present, "Content-Length" will
// describe the original encoded length, etc).
//
// If "Content-Encoding" contains any encoding types that ContentDecoder doesn't
// recognize, then none of the encodings will be decoded.
//
// (Note that currently there is no way to (automatically) use Content-Encoding
// when sending a request body, or to pick specific encoding types to support.).
type ContentDecoder struct {
	_ [0]func() // equal guard
	*coreglib.Object

	SessionFeature
}

var (
	_ coreglib.Objector = (*ContentDecoder)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ContentDecoder, *ContentDecoderClass, ContentDecoderOverrides](
		GTypeContentDecoder,
		initContentDecoderClass,
		wrapContentDecoder,
		defaultContentDecoderOverrides,
	)
}

func initContentDecoderClass(gclass unsafe.Pointer, overrides ContentDecoderOverrides, classInitFunc func(*ContentDecoderClass)) {
	if classInitFunc != nil {
		class := (*ContentDecoderClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapContentDecoder(obj *coreglib.Object) *ContentDecoder {
	return &ContentDecoder{
		Object: obj,
		SessionFeature: SessionFeature{
			Object: obj,
		},
	}
}

func marshalContentDecoder(p uintptr) (interface{}, error) {
	return wrapContentDecoder(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ContentDecoderClass: instance of this type is always passed by reference.
type ContentDecoderClass struct {
	*contentDecoderClass
}

// contentDecoderClass is the struct that's finalized.
type contentDecoderClass struct {
	native *C.SoupContentDecoderClass
}
