// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeAuthBasic = coreglib.Type(C.soup_auth_basic_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAuthBasic, F: marshalAuthBasic},
	})
}

// AuthBasic: HTTP "Basic" authentication.
//
// sessions support this by default; if you want to disable support for it,
// call session.RemoveFeatureByType, passing SOUP_TYPE_AUTH_BASIC.
type AuthBasic struct {
	_ [0]func() // equal guard
	Auth
}

var (
	_ Auther = (*AuthBasic)(nil)
)

func wrapAuthBasic(obj *coreglib.Object) *AuthBasic {
	return &AuthBasic{
		Auth: Auth{
			Object: obj,
		},
	}
}

func marshalAuthBasic(p uintptr) (interface{}, error) {
	return wrapAuthBasic(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
