// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeHSTSEnforcerDB = coreglib.Type(C.soup_hsts_enforcer_db_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeHSTSEnforcerDB, F: marshalHSTSEnforcerDB},
	})
}

// HSTSEnforcerDBOverrides contains methods that are overridable.
type HSTSEnforcerDBOverrides struct {
}

func defaultHSTSEnforcerDBOverrides(v *HSTSEnforcerDB) HSTSEnforcerDBOverrides {
	return HSTSEnforcerDBOverrides{}
}

// HSTSEnforcerDB: persistent HTTP Strict Transport Security enforcer.
//
// HSTSEnforcerDB is a hstsenforcer that uses a SQLite database as a backend for
// persistency.
type HSTSEnforcerDB struct {
	_ [0]func() // equal guard
	HSTSEnforcer
}

var (
	_ coreglib.Objector = (*HSTSEnforcerDB)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*HSTSEnforcerDB, *HSTSEnforcerDBClass, HSTSEnforcerDBOverrides](
		GTypeHSTSEnforcerDB,
		initHSTSEnforcerDBClass,
		wrapHSTSEnforcerDB,
		defaultHSTSEnforcerDBOverrides,
	)
}

func initHSTSEnforcerDBClass(gclass unsafe.Pointer, overrides HSTSEnforcerDBOverrides, classInitFunc func(*HSTSEnforcerDBClass)) {
	if classInitFunc != nil {
		class := (*HSTSEnforcerDBClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapHSTSEnforcerDB(obj *coreglib.Object) *HSTSEnforcerDB {
	return &HSTSEnforcerDB{
		HSTSEnforcer: HSTSEnforcer{
			Object: obj,
			SessionFeature: SessionFeature{
				Object: obj,
			},
		},
	}
}

func marshalHSTSEnforcerDB(p uintptr) (interface{}, error) {
	return wrapHSTSEnforcerDB(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewHSTSEnforcerDB creates a HSTSEnforcerDB.
//
// filename will be read in during the initialization of a HSTSEnforcerDB, in
// order to create an initial set of HSTS policies. If the file doesn't exist,
// a new database will be created and initialized. Changes to the policies
// during the lifetime of a HSTSEnforcerDB will be written to filename when
// hstsenforcer::changed is emitted.
//
// The function takes the following parameters:
//
//   - filename of the database to read/write from.
//
// The function returns the following values:
//
//   - hstsEnforcerDB: new HSTSEnforcer.
//
func NewHSTSEnforcerDB(filename string) *HSTSEnforcerDB {
	var _arg1 *C.char             // out
	var _cret *C.SoupHSTSEnforcer // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.soup_hsts_enforcer_db_new(_arg1)
	runtime.KeepAlive(filename)

	var _hstsEnforcerDB *HSTSEnforcerDB // out

	_hstsEnforcerDB = wrapHSTSEnforcerDB(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _hstsEnforcerDB
}

// HSTSEnforcerDBClass: instance of this type is always passed by reference.
type HSTSEnforcerDBClass struct {
	*hstsEnforcerDBClass
}

// hstsEnforcerDBClass is the struct that's finalized.
type hstsEnforcerDBClass struct {
	native *C.SoupHSTSEnforcerDBClass
}

func (h *HSTSEnforcerDBClass) ParentClass() *HSTSEnforcerClass {
	valptr := &h.native.parent_class
	var _v *HSTSEnforcerClass // out
	_v = (*HSTSEnforcerClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
