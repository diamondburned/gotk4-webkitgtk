// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeMultipart = coreglib.Type(C.soup_multipart_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeMultipart, F: marshalMultipart},
	})
}

// Multipart represents a multipart HTTP message body, parsed according to the
// syntax of RFC 2046.
//
// Of particular interest to HTTP are multipart/byte-ranges and
// multipart/form-data,
//
// Although the headers of a Multipart body part will contain the full
// headers from that body part, libsoup does not interpret them according
// to MIME rules. For example, each body part is assumed to have "binary"
// Content-Transfer-Encoding, even if its headers explicitly state otherwise.
// In other words, don't try to use Multipart for handling real MIME multiparts.
//
// An instance of this type is always passed by reference.
type Multipart struct {
	*multipart
}

// multipart is the struct that's finalized.
type multipart struct {
	native *C.SoupMultipart
}

func marshalMultipart(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &Multipart{&multipart{(*C.SoupMultipart)(b)}}, nil
}

// NewMultipart constructs a struct Multipart.
func NewMultipart(mimeType string) *Multipart {
	var _arg1 *C.char          // out
	var _cret *C.SoupMultipart // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(mimeType)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.soup_multipart_new(_arg1)
	runtime.KeepAlive(mimeType)

	var _multipart *Multipart // out

	_multipart = (*Multipart)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_multipart)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.soup_multipart_free((*C.SoupMultipart)(intern.C))
		},
	)

	return _multipart
}

// NewMultipartFromMessage constructs a struct Multipart.
func NewMultipartFromMessage(headers *MessageHeaders, body *glib.Bytes) *Multipart {
	var _arg1 *C.SoupMessageHeaders // out
	var _arg2 *C.GBytes             // out
	var _cret *C.SoupMultipart      // in

	_arg1 = (*C.SoupMessageHeaders)(gextras.StructNative(unsafe.Pointer(headers)))
	_arg2 = (*C.GBytes)(gextras.StructNative(unsafe.Pointer(body)))

	_cret = C.soup_multipart_new_from_message(_arg1, _arg2)
	runtime.KeepAlive(headers)
	runtime.KeepAlive(body)

	var _multipart *Multipart // out

	if _cret != nil {
		_multipart = (*Multipart)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_multipart)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.soup_multipart_free((*C.SoupMultipart)(intern.C))
			},
		)
	}

	return _multipart
}

// AppendFormFile adds a new MIME part containing body to multipart
//
// Uses "Content-Disposition: form-data", as per the HTML forms specification.
//
// The function takes the following parameters:
//
//   - controlName: name of the control associated with this file.
//   - filename (optional): name of the file, or NULL if not known.
//   - contentType (optional): MIME type of the file, or NULL if not known.
//   - body: file data.
//
func (multipart *Multipart) AppendFormFile(controlName string, filename string, contentType string, body *glib.Bytes) {
	var _arg0 *C.SoupMultipart // out
	var _arg1 *C.char          // out
	var _arg2 *C.char          // out
	var _arg3 *C.char          // out
	var _arg4 *C.GBytes        // out

	_arg0 = (*C.SoupMultipart)(gextras.StructNative(unsafe.Pointer(multipart)))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(controlName)))
	defer C.free(unsafe.Pointer(_arg1))
	if filename != "" {
		_arg2 = (*C.char)(unsafe.Pointer(C.CString(filename)))
		defer C.free(unsafe.Pointer(_arg2))
	}
	if contentType != "" {
		_arg3 = (*C.char)(unsafe.Pointer(C.CString(contentType)))
		defer C.free(unsafe.Pointer(_arg3))
	}
	_arg4 = (*C.GBytes)(gextras.StructNative(unsafe.Pointer(body)))

	C.soup_multipart_append_form_file(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(multipart)
	runtime.KeepAlive(controlName)
	runtime.KeepAlive(filename)
	runtime.KeepAlive(contentType)
	runtime.KeepAlive(body)
}

// AppendFormString adds a new MIME part containing data to multipart.
//
// Uses "Content-Disposition: form-data", as per the HTML forms specification.
//
// The function takes the following parameters:
//
//   - controlName: name of the control associated with data.
//   - data: body data.
//
func (multipart *Multipart) AppendFormString(controlName string, data string) {
	var _arg0 *C.SoupMultipart // out
	var _arg1 *C.char          // out
	var _arg2 *C.char          // out

	_arg0 = (*C.SoupMultipart)(gextras.StructNative(unsafe.Pointer(multipart)))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(controlName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(data)))
	defer C.free(unsafe.Pointer(_arg2))

	C.soup_multipart_append_form_string(_arg0, _arg1, _arg2)
	runtime.KeepAlive(multipart)
	runtime.KeepAlive(controlName)
	runtime.KeepAlive(data)
}

// AppendPart adds a new MIME part to multipart with the given headers and body.
//
// (The multipart will make its own copies of headers and body, so you should
// free your copies if you are not using them for anything else.).
//
// The function takes the following parameters:
//
//   - headers: MIME part headers.
//   - body: MIME part body.
//
func (multipart *Multipart) AppendPart(headers *MessageHeaders, body *glib.Bytes) {
	var _arg0 *C.SoupMultipart      // out
	var _arg1 *C.SoupMessageHeaders // out
	var _arg2 *C.GBytes             // out

	_arg0 = (*C.SoupMultipart)(gextras.StructNative(unsafe.Pointer(multipart)))
	_arg1 = (*C.SoupMessageHeaders)(gextras.StructNative(unsafe.Pointer(headers)))
	_arg2 = (*C.GBytes)(gextras.StructNative(unsafe.Pointer(body)))

	C.soup_multipart_append_part(_arg0, _arg1, _arg2)
	runtime.KeepAlive(multipart)
	runtime.KeepAlive(headers)
	runtime.KeepAlive(body)
}

// Length gets the number of body parts in multipart.
//
// The function returns the following values:
//
//   - gint: number of body parts in multipart.
//
func (multipart *Multipart) Length() int {
	var _arg0 *C.SoupMultipart // out
	var _cret C.int            // in

	_arg0 = (*C.SoupMultipart)(gextras.StructNative(unsafe.Pointer(multipart)))

	_cret = C.soup_multipart_get_length(_arg0)
	runtime.KeepAlive(multipart)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// Part gets the indicated body part from multipart.
//
// The function takes the following parameters:
//
//   - part number to get (counting from 0).
//
// The function returns the following values:
//
//   - headers: return location for the MIME part headers.
//   - body: return location for the MIME part body.
//   - ok: TRUE on success, FALSE if part is out of range (in which case headers
//     and body won't be set).
//
func (multipart *Multipart) Part(part int) (*MessageHeaders, *glib.Bytes, bool) {
	var _arg0 *C.SoupMultipart      // out
	var _arg1 C.int                 // out
	var _arg2 *C.SoupMessageHeaders // in
	var _arg3 *C.GBytes             // in
	var _cret C.gboolean            // in

	_arg0 = (*C.SoupMultipart)(gextras.StructNative(unsafe.Pointer(multipart)))
	_arg1 = C.int(part)

	_cret = C.soup_multipart_get_part(_arg0, _arg1, &_arg2, &_arg3)
	runtime.KeepAlive(multipart)
	runtime.KeepAlive(part)

	var _headers *MessageHeaders // out
	var _body *glib.Bytes        // out
	var _ok bool                 // out

	_headers = (*MessageHeaders)(gextras.NewStructNative(unsafe.Pointer(_arg2)))
	C.soup_message_headers_ref(_arg2)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_headers)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.soup_message_headers_unref((*C.SoupMessageHeaders)(intern.C))
		},
	)
	_body = (*glib.Bytes)(gextras.NewStructNative(unsafe.Pointer(_arg3)))
	C.g_bytes_ref(_arg3)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_body)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_bytes_unref((*C.GBytes)(intern.C))
		},
	)
	if _cret != 0 {
		_ok = true
	}

	return _headers, _body, _ok
}

// ToMessage serializes multipart to dest_headers and dest_body.
//
// The function takes the following parameters:
//
//   - destHeaders headers of the HTTP message to serialize multipart to.
//
// The function returns the following values:
//
//   - destBody: body of the HTTP message to serialize multipart to.
//
func (multipart *Multipart) ToMessage(destHeaders *MessageHeaders) *glib.Bytes {
	var _arg0 *C.SoupMultipart      // out
	var _arg1 *C.SoupMessageHeaders // out
	var _arg2 *C.GBytes             // in

	_arg0 = (*C.SoupMultipart)(gextras.StructNative(unsafe.Pointer(multipart)))
	_arg1 = (*C.SoupMessageHeaders)(gextras.StructNative(unsafe.Pointer(destHeaders)))

	C.soup_multipart_to_message(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(multipart)
	runtime.KeepAlive(destHeaders)

	var _destBody *glib.Bytes // out

	_destBody = (*glib.Bytes)(gextras.NewStructNative(unsafe.Pointer(_arg2)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_destBody)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.g_bytes_unref((*C.GBytes)(intern.C))
		},
	)

	return _destBody
}
