// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeAuthNegotiate = coreglib.Type(C.soup_auth_negotiate_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAuthNegotiate, F: marshalAuthNegotiate},
	})
}

// AuthNegotiate: HTTP-based GSS-Negotiate authentication, as defined by RFC
// 4559 (https://datatracker.ietf.org/doc/html/rfc4559).
//
// sessions do not support this type by default; if you want to enable support
// for it, call session.AddFeatureByType, passing SOUP_TYPE_AUTH_NEGOTIATE.
//
// This auth type will only work if libsoup was compiled with GSSAPI support;
// you can check authnegotiate.Supported() to see if it was.
type AuthNegotiate struct {
	_ [0]func() // equal guard
	Auth
}

var (
	_ Auther = (*AuthNegotiate)(nil)
)

func wrapAuthNegotiate(obj *coreglib.Object) *AuthNegotiate {
	return &AuthNegotiate{
		Auth: Auth{
			Object: obj,
		},
	}
}

func marshalAuthNegotiate(p uintptr) (interface{}, error) {
	return wrapAuthNegotiate(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
