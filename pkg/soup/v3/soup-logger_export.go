// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <libsoup/soup.h>
import "C"

//export _gotk4_soup3_LoggerFilter
func _gotk4_soup3_LoggerFilter(arg1 *C.SoupLogger, arg2 *C.SoupMessage, arg3 C.gpointer) (cret C.SoupLoggerLogLevel) {
	var fn LoggerFilter
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(LoggerFilter)
	}

	var _logger *Logger // out
	var _msg *Message   // out

	_logger = wrapLogger(coreglib.Take(unsafe.Pointer(arg1)))
	_msg = wrapMessage(coreglib.Take(unsafe.Pointer(arg2)))

	loggerLogLevel := fn(_logger, _msg)

	var _ LoggerLogLevel

	cret = C.SoupLoggerLogLevel(loggerLogLevel)

	return cret
}

//export _gotk4_soup3_LoggerPrinter
func _gotk4_soup3_LoggerPrinter(arg1 *C.SoupLogger, arg2 C.SoupLoggerLogLevel, arg3 C.char, arg4 *C.char, arg5 C.gpointer) {
	var fn LoggerPrinter
	{
		v := gbox.Get(uintptr(arg5))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(LoggerPrinter)
	}

	var _logger *Logger       // out
	var _level LoggerLogLevel // out
	var _direction byte       // out
	var _data string          // out

	_logger = wrapLogger(coreglib.Take(unsafe.Pointer(arg1)))
	_level = LoggerLogLevel(arg2)
	_direction = byte(arg3)
	_data = C.GoString((*C.gchar)(unsafe.Pointer(arg4)))

	fn(_logger, _level, _direction, _data)
}
