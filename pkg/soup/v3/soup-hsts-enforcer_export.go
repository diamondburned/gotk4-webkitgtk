// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <libsoup/soup.h>
import "C"

//export _gotk4_soup3_HSTSEnforcer_ConnectChanged
func _gotk4_soup3_HSTSEnforcer_ConnectChanged(arg0 C.gpointer, arg1 *C.SoupHSTSPolicy, arg2 *C.SoupHSTSPolicy, arg3 C.guintptr) {
	var f func(oldPolicy, newPolicy *HSTSPolicy)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(oldPolicy, newPolicy *HSTSPolicy))
	}

	var _oldPolicy *HSTSPolicy // out
	var _newPolicy *HSTSPolicy // out

	_oldPolicy = (*HSTSPolicy)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	_newPolicy = (*HSTSPolicy)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	f(_oldPolicy, _newPolicy)
}
