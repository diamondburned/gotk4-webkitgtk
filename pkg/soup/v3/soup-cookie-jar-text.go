// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeCookieJarText = coreglib.Type(C.soup_cookie_jar_text_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCookieJarText, F: marshalCookieJarText},
	})
}

// CookieJarTextOverrides contains methods that are overridable.
type CookieJarTextOverrides struct {
}

func defaultCookieJarTextOverrides(v *CookieJarText) CookieJarTextOverrides {
	return CookieJarTextOverrides{}
}

// CookieJarText: text-file-based ("cookies.txt") Cookie Jar
//
// CookieJarText is a cookiejar that reads cookies from and writes them to a
// text file in format similar to Mozilla's "cookies.txt".
type CookieJarText struct {
	_ [0]func() // equal guard
	CookieJar
}

var (
	_ coreglib.Objector = (*CookieJarText)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*CookieJarText, *CookieJarTextClass, CookieJarTextOverrides](
		GTypeCookieJarText,
		initCookieJarTextClass,
		wrapCookieJarText,
		defaultCookieJarTextOverrides,
	)
}

func initCookieJarTextClass(gclass unsafe.Pointer, overrides CookieJarTextOverrides, classInitFunc func(*CookieJarTextClass)) {
	if classInitFunc != nil {
		class := (*CookieJarTextClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapCookieJarText(obj *coreglib.Object) *CookieJarText {
	return &CookieJarText{
		CookieJar: CookieJar{
			Object: obj,
			SessionFeature: SessionFeature{
				Object: obj,
			},
		},
	}
}

func marshalCookieJarText(p uintptr) (interface{}, error) {
	return wrapCookieJarText(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewCookieJarText creates a CookieJarText.
//
// filename will be read in at startup to create an initial set of cookies.
// If read_only is FALSE, then the non-session cookies will be written to
// filename when the cookiejar::changed signal is emitted from the jar. (If
// read_only is TRUE, then the cookie jar will only be used for this session,
// and changes made to it will be lost when the jar is destroyed.).
//
// The function takes the following parameters:
//
//   - filename to read to/write from.
//   - readOnly: TRUE if filename is read-only.
//
// The function returns the following values:
//
//   - cookieJarText: new CookieJar.
//
func NewCookieJarText(filename string, readOnly bool) *CookieJarText {
	var _arg1 *C.char          // out
	var _arg2 C.gboolean       // out
	var _cret *C.SoupCookieJar // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))
	if readOnly {
		_arg2 = C.TRUE
	}

	_cret = C.soup_cookie_jar_text_new(_arg1, _arg2)
	runtime.KeepAlive(filename)
	runtime.KeepAlive(readOnly)

	var _cookieJarText *CookieJarText // out

	_cookieJarText = wrapCookieJarText(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _cookieJarText
}

// CookieJarTextClass: instance of this type is always passed by reference.
type CookieJarTextClass struct {
	*cookieJarTextClass
}

// cookieJarTextClass is the struct that's finalized.
type cookieJarTextClass struct {
	native *C.SoupCookieJarTextClass
}

func (c *CookieJarTextClass) ParentClass() *CookieJarClass {
	valptr := &c.native.parent_class
	var _v *CookieJarClass // out
	_v = (*CookieJarClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
