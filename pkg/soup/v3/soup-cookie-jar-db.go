// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeCookieJarDB = coreglib.Type(C.soup_cookie_jar_db_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCookieJarDB, F: marshalCookieJarDB},
	})
}

// CookieJarDBOverrides contains methods that are overridable.
type CookieJarDBOverrides struct {
}

func defaultCookieJarDBOverrides(v *CookieJarDB) CookieJarDBOverrides {
	return CookieJarDBOverrides{}
}

// CookieJarDB: database-based Cookie Jar.
//
// CookieJarDB is a cookiejar that reads cookies from and writes them to a
// sqlite database in the new Mozilla format.
//
// (This is identical to SoupCookieJarSqlite in libsoup-gnome; it has just been
// moved into libsoup proper, and renamed to avoid conflicting.).
type CookieJarDB struct {
	_ [0]func() // equal guard
	CookieJar
}

var (
	_ coreglib.Objector = (*CookieJarDB)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*CookieJarDB, *CookieJarDBClass, CookieJarDBOverrides](
		GTypeCookieJarDB,
		initCookieJarDBClass,
		wrapCookieJarDB,
		defaultCookieJarDBOverrides,
	)
}

func initCookieJarDBClass(gclass unsafe.Pointer, overrides CookieJarDBOverrides, classInitFunc func(*CookieJarDBClass)) {
	if classInitFunc != nil {
		class := (*CookieJarDBClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapCookieJarDB(obj *coreglib.Object) *CookieJarDB {
	return &CookieJarDB{
		CookieJar: CookieJar{
			Object: obj,
			SessionFeature: SessionFeature{
				Object: obj,
			},
		},
	}
}

func marshalCookieJarDB(p uintptr) (interface{}, error) {
	return wrapCookieJarDB(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewCookieJarDB creates a CookieJarDB.
//
// filename will be read in at startup to create an initial set of cookies.
// If read_only is FALSE, then the non-session cookies will be written to
// filename when the cookiejar::changed signal is emitted from the jar. (If
// read_only is TRUE, then the cookie jar will only be used for this session,
// and changes made to it will be lost when the jar is destroyed.).
//
// The function takes the following parameters:
//
//   - filename to read to/write from, or NULL.
//   - readOnly: TRUE if filename is read-only.
//
// The function returns the following values:
//
//   - cookieJarDB: new CookieJar.
//
func NewCookieJarDB(filename string, readOnly bool) *CookieJarDB {
	var _arg1 *C.char          // out
	var _arg2 C.gboolean       // out
	var _cret *C.SoupCookieJar // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))
	if readOnly {
		_arg2 = C.TRUE
	}

	_cret = C.soup_cookie_jar_db_new(_arg1, _arg2)
	runtime.KeepAlive(filename)
	runtime.KeepAlive(readOnly)

	var _cookieJarDB *CookieJarDB // out

	_cookieJarDB = wrapCookieJarDB(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _cookieJarDB
}

// CookieJarDBClass: instance of this type is always passed by reference.
type CookieJarDBClass struct {
	*cookieJarDBClass
}

// cookieJarDBClass is the struct that's finalized.
type cookieJarDBClass struct {
	native *C.SoupCookieJarDBClass
}

func (c *CookieJarDBClass) ParentClass() *CookieJarClass {
	valptr := &c.native.parent_class
	var _v *CookieJarClass // out
	_v = (*CookieJarClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
