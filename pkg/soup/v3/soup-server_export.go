// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <libsoup/soup.h>
import "C"

//export _gotk4_soup3_ServerCallback
func _gotk4_soup3_ServerCallback(arg1 *C.SoupServer, arg2 *C.SoupServerMessage, arg3 *C.char, arg4 *C.GHashTable, arg5 C.gpointer) {
	var fn ServerCallback
	{
		v := gbox.Get(uintptr(arg5))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(ServerCallback)
	}

	var _server *Server          // out
	var _msg *ServerMessage      // out
	var _path string             // out
	var _query map[string]string // out

	_server = wrapServer(coreglib.Take(unsafe.Pointer(arg1)))
	_msg = wrapServerMessage(coreglib.Take(unsafe.Pointer(arg2)))
	_path = C.GoString((*C.gchar)(unsafe.Pointer(arg3)))
	if arg4 != nil {
		_query = make(map[string]string, gextras.HashTableSize(unsafe.Pointer(arg4)))
		gextras.MoveHashTable(unsafe.Pointer(arg4), false, func(k, v unsafe.Pointer) {
			ksrc := *(**C.gchar)(k)
			vsrc := *(**C.gchar)(v)
			var kdst string // out
			var vdst string // out
			kdst = C.GoString((*C.gchar)(unsafe.Pointer(ksrc)))
			vdst = C.GoString((*C.gchar)(unsafe.Pointer(vsrc)))
			_query[kdst] = vdst
		})
	}

	fn(_server, _msg, _path, _query)
}

//export _gotk4_soup3_ServerWebsocketCallback
func _gotk4_soup3_ServerWebsocketCallback(arg1 *C.SoupServer, arg2 *C.SoupServerMessage, arg3 *C.char, arg4 *C.SoupWebsocketConnection, arg5 C.gpointer) {
	var fn ServerWebsocketCallback
	{
		v := gbox.Get(uintptr(arg5))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(ServerWebsocketCallback)
	}

	var _server *Server                  // out
	var _msg *ServerMessage              // out
	var _path string                     // out
	var _connection *WebsocketConnection // out

	_server = wrapServer(coreglib.Take(unsafe.Pointer(arg1)))
	_msg = wrapServerMessage(coreglib.Take(unsafe.Pointer(arg2)))
	_path = C.GoString((*C.gchar)(unsafe.Pointer(arg3)))
	_connection = wrapWebsocketConnection(coreglib.Take(unsafe.Pointer(arg4)))

	fn(_server, _msg, _path, _connection)
}

//export _gotk4_soup3_Server_ConnectRequestAborted
func _gotk4_soup3_Server_ConnectRequestAborted(arg0 C.gpointer, arg1 *C.SoupServerMessage, arg2 C.guintptr) {
	var f func(message *ServerMessage)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(message *ServerMessage))
	}

	var _message *ServerMessage // out

	_message = wrapServerMessage(coreglib.Take(unsafe.Pointer(arg1)))

	f(_message)
}

//export _gotk4_soup3_Server_ConnectRequestFinished
func _gotk4_soup3_Server_ConnectRequestFinished(arg0 C.gpointer, arg1 *C.SoupServerMessage, arg2 C.guintptr) {
	var f func(message *ServerMessage)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(message *ServerMessage))
	}

	var _message *ServerMessage // out

	_message = wrapServerMessage(coreglib.Take(unsafe.Pointer(arg1)))

	f(_message)
}

//export _gotk4_soup3_Server_ConnectRequestRead
func _gotk4_soup3_Server_ConnectRequestRead(arg0 C.gpointer, arg1 *C.SoupServerMessage, arg2 C.guintptr) {
	var f func(message *ServerMessage)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(message *ServerMessage))
	}

	var _message *ServerMessage // out

	_message = wrapServerMessage(coreglib.Take(unsafe.Pointer(arg1)))

	f(_message)
}

//export _gotk4_soup3_Server_ConnectRequestStarted
func _gotk4_soup3_Server_ConnectRequestStarted(arg0 C.gpointer, arg1 *C.SoupServerMessage, arg2 C.guintptr) {
	var f func(message *ServerMessage)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(message *ServerMessage))
	}

	var _message *ServerMessage // out

	_message = wrapServerMessage(coreglib.Take(unsafe.Pointer(arg1)))

	f(_message)
}
