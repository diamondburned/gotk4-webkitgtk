// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
// gboolean _gotk4_soup2_SessionFeature_virtual_add_feature(void* fnptr, SoupSessionFeature* arg0, GType arg1) {
//   return ((gboolean (*)(SoupSessionFeature*, GType))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_soup2_SessionFeature_virtual_has_feature(void* fnptr, SoupSessionFeature* arg0, GType arg1) {
//   return ((gboolean (*)(SoupSessionFeature*, GType))(fnptr))(arg0, arg1);
// };
// gboolean _gotk4_soup2_SessionFeature_virtual_remove_feature(void* fnptr, SoupSessionFeature* arg0, GType arg1) {
//   return ((gboolean (*)(SoupSessionFeature*, GType))(fnptr))(arg0, arg1);
// };
// void _gotk4_soup2_SessionFeature_virtual_attach(void* fnptr, SoupSessionFeature* arg0, SoupSession* arg1) {
//   ((void (*)(SoupSessionFeature*, SoupSession*))(fnptr))(arg0, arg1);
// };
// void _gotk4_soup2_SessionFeature_virtual_detach(void* fnptr, SoupSessionFeature* arg0, SoupSession* arg1) {
//   ((void (*)(SoupSessionFeature*, SoupSession*))(fnptr))(arg0, arg1);
// };
// void _gotk4_soup2_SessionFeature_virtual_request_queued(void* fnptr, SoupSessionFeature* arg0, SoupSession* arg1, SoupMessage* arg2) {
//   ((void (*)(SoupSessionFeature*, SoupSession*, SoupMessage*))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_soup2_SessionFeature_virtual_request_started(void* fnptr, SoupSessionFeature* arg0, SoupSession* arg1, SoupMessage* arg2, SoupSocket* arg3) {
//   ((void (*)(SoupSessionFeature*, SoupSession*, SoupMessage*, SoupSocket*))(fnptr))(arg0, arg1, arg2, arg3);
// };
// void _gotk4_soup2_SessionFeature_virtual_request_unqueued(void* fnptr, SoupSessionFeature* arg0, SoupSession* arg1, SoupMessage* arg2) {
//   ((void (*)(SoupSessionFeature*, SoupSession*, SoupMessage*))(fnptr))(arg0, arg1, arg2);
// };
import "C"

// GType values.
var (
	GTypeSessionFeature = coreglib.Type(C.soup_session_feature_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSessionFeature, F: marshalSessionFeature},
	})
}

// SessionFeature: object that implement some sort of optional feature for
// Session.
//
// SessionFeature wraps an interface. This means the user can get the
// underlying type by calling Cast().
type SessionFeature struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*SessionFeature)(nil)
)

// SessionFeaturer describes SessionFeature's interface methods.
type SessionFeaturer interface {
	coreglib.Objector

	// AddFeature adds a "sub-feature" of type type to the base feature feature.
	AddFeature(typ coreglib.Type) bool
	Attach(session *Session)
	Detach(session *Session)
	// HasFeature tests if feature has a "sub-feature" of type type.
	HasFeature(typ coreglib.Type) bool
	// RemoveFeature removes the "sub-feature" of type type from the base
	// feature feature.
	RemoveFeature(typ coreglib.Type) bool
}

var _ SessionFeaturer = (*SessionFeature)(nil)

func wrapSessionFeature(obj *coreglib.Object) *SessionFeature {
	return &SessionFeature{
		Object: obj,
	}
}

func marshalSessionFeature(p uintptr) (interface{}, error) {
	return wrapSessionFeature(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// AddFeature adds a "sub-feature" of type type to the base feature feature.
// This is used for features that can be extended with multiple different types.
// Eg, the authentication manager can be extended with subtypes of Auth.
//
// The function takes the following parameters:
//
//   - typ of a "sub-feature".
//
// The function returns the following values:
//
//   - ok: TRUE if feature accepted type as a subfeature.
//
func (feature *SessionFeature) AddFeature(typ coreglib.Type) bool {
	var _arg0 *C.SoupSessionFeature // out
	var _arg1 C.GType               // out
	var _cret C.gboolean            // in

	_arg0 = (*C.SoupSessionFeature)(unsafe.Pointer(coreglib.InternObject(feature).Native()))
	_arg1 = C.GType(typ)

	_cret = C.soup_session_feature_add_feature(_arg0, _arg1)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(typ)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
func (feature *SessionFeature) Attach(session *Session) {
	var _arg0 *C.SoupSessionFeature // out
	var _arg1 *C.SoupSession        // out

	_arg0 = (*C.SoupSessionFeature)(unsafe.Pointer(coreglib.InternObject(feature).Native()))
	_arg1 = (*C.SoupSession)(unsafe.Pointer(coreglib.InternObject(session).Native()))

	C.soup_session_feature_attach(_arg0, _arg1)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(session)
}

// The function takes the following parameters:
//
func (feature *SessionFeature) Detach(session *Session) {
	var _arg0 *C.SoupSessionFeature // out
	var _arg1 *C.SoupSession        // out

	_arg0 = (*C.SoupSessionFeature)(unsafe.Pointer(coreglib.InternObject(feature).Native()))
	_arg1 = (*C.SoupSession)(unsafe.Pointer(coreglib.InternObject(session).Native()))

	C.soup_session_feature_detach(_arg0, _arg1)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(session)
}

// HasFeature tests if feature has a "sub-feature" of type type. See
// soup_session_feature_add_feature().
//
// The function takes the following parameters:
//
//   - typ of a "sub-feature".
//
// The function returns the following values:
//
//   - ok: TRUE if feature has a subfeature of type type.
//
func (feature *SessionFeature) HasFeature(typ coreglib.Type) bool {
	var _arg0 *C.SoupSessionFeature // out
	var _arg1 C.GType               // out
	var _cret C.gboolean            // in

	_arg0 = (*C.SoupSessionFeature)(unsafe.Pointer(coreglib.InternObject(feature).Native()))
	_arg1 = C.GType(typ)

	_cret = C.soup_session_feature_has_feature(_arg0, _arg1)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(typ)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// RemoveFeature removes the "sub-feature" of type type from the base feature
// feature. See soup_session_feature_add_feature().
//
// The function takes the following parameters:
//
//   - typ of a "sub-feature".
//
// The function returns the following values:
//
//   - ok: TRUE if type was removed from feature.
//
func (feature *SessionFeature) RemoveFeature(typ coreglib.Type) bool {
	var _arg0 *C.SoupSessionFeature // out
	var _arg1 C.GType               // out
	var _cret C.gboolean            // in

	_arg0 = (*C.SoupSessionFeature)(unsafe.Pointer(coreglib.InternObject(feature).Native()))
	_arg1 = C.GType(typ)

	_cret = C.soup_session_feature_remove_feature(_arg0, _arg1)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(typ)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// addFeature adds a "sub-feature" of type type to the base feature feature.
// This is used for features that can be extended with multiple different types.
// Eg, the authentication manager can be extended with subtypes of Auth.
//
// The function takes the following parameters:
//
//   - typ of a "sub-feature".
//
// The function returns the following values:
//
//   - ok: TRUE if feature accepted type as a subfeature.
//
func (feature *SessionFeature) addFeature(typ coreglib.Type) bool {
	gclass := (*C.SoupSessionFeatureInterface)(coreglib.PeekParentClass(feature))
	fnarg := gclass.add_feature

	var _arg0 *C.SoupSessionFeature // out
	var _arg1 C.GType               // out
	var _cret C.gboolean            // in

	_arg0 = (*C.SoupSessionFeature)(unsafe.Pointer(coreglib.InternObject(feature).Native()))
	_arg1 = C.GType(typ)

	_cret = C._gotk4_soup2_SessionFeature_virtual_add_feature(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(typ)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
func (feature *SessionFeature) attach(session *Session) {
	gclass := (*C.SoupSessionFeatureInterface)(coreglib.PeekParentClass(feature))
	fnarg := gclass.attach

	var _arg0 *C.SoupSessionFeature // out
	var _arg1 *C.SoupSession        // out

	_arg0 = (*C.SoupSessionFeature)(unsafe.Pointer(coreglib.InternObject(feature).Native()))
	_arg1 = (*C.SoupSession)(unsafe.Pointer(coreglib.InternObject(session).Native()))

	C._gotk4_soup2_SessionFeature_virtual_attach(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(session)
}

// The function takes the following parameters:
//
func (feature *SessionFeature) detach(session *Session) {
	gclass := (*C.SoupSessionFeatureInterface)(coreglib.PeekParentClass(feature))
	fnarg := gclass.detach

	var _arg0 *C.SoupSessionFeature // out
	var _arg1 *C.SoupSession        // out

	_arg0 = (*C.SoupSessionFeature)(unsafe.Pointer(coreglib.InternObject(feature).Native()))
	_arg1 = (*C.SoupSession)(unsafe.Pointer(coreglib.InternObject(session).Native()))

	C._gotk4_soup2_SessionFeature_virtual_detach(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(session)
}

// hasFeature tests if feature has a "sub-feature" of type type. See
// soup_session_feature_add_feature().
//
// The function takes the following parameters:
//
//   - typ of a "sub-feature".
//
// The function returns the following values:
//
//   - ok: TRUE if feature has a subfeature of type type.
//
func (feature *SessionFeature) hasFeature(typ coreglib.Type) bool {
	gclass := (*C.SoupSessionFeatureInterface)(coreglib.PeekParentClass(feature))
	fnarg := gclass.has_feature

	var _arg0 *C.SoupSessionFeature // out
	var _arg1 C.GType               // out
	var _cret C.gboolean            // in

	_arg0 = (*C.SoupSessionFeature)(unsafe.Pointer(coreglib.InternObject(feature).Native()))
	_arg1 = C.GType(typ)

	_cret = C._gotk4_soup2_SessionFeature_virtual_has_feature(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(typ)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// removeFeature removes the "sub-feature" of type type from the base feature
// feature. See soup_session_feature_add_feature().
//
// The function takes the following parameters:
//
//   - typ of a "sub-feature".
//
// The function returns the following values:
//
//   - ok: TRUE if type was removed from feature.
//
func (feature *SessionFeature) removeFeature(typ coreglib.Type) bool {
	gclass := (*C.SoupSessionFeatureInterface)(coreglib.PeekParentClass(feature))
	fnarg := gclass.remove_feature

	var _arg0 *C.SoupSessionFeature // out
	var _arg1 C.GType               // out
	var _cret C.gboolean            // in

	_arg0 = (*C.SoupSessionFeature)(unsafe.Pointer(coreglib.InternObject(feature).Native()))
	_arg1 = C.GType(typ)

	_cret = C._gotk4_soup2_SessionFeature_virtual_remove_feature(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(typ)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function takes the following parameters:
//
//   - session
//   - msg
//
func (feature *SessionFeature) requestQueued(session *Session, msg *Message) {
	gclass := (*C.SoupSessionFeatureInterface)(coreglib.PeekParentClass(feature))
	fnarg := gclass.request_queued

	var _arg0 *C.SoupSessionFeature // out
	var _arg1 *C.SoupSession        // out
	var _arg2 *C.SoupMessage        // out

	_arg0 = (*C.SoupSessionFeature)(unsafe.Pointer(coreglib.InternObject(feature).Native()))
	_arg1 = (*C.SoupSession)(unsafe.Pointer(coreglib.InternObject(session).Native()))
	_arg2 = (*C.SoupMessage)(unsafe.Pointer(coreglib.InternObject(msg).Native()))

	C._gotk4_soup2_SessionFeature_virtual_request_queued(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(session)
	runtime.KeepAlive(msg)
}

// The function takes the following parameters:
//
//   - session
//   - msg
//   - socket
//
func (feature *SessionFeature) requestStarted(session *Session, msg *Message, socket *Socket) {
	gclass := (*C.SoupSessionFeatureInterface)(coreglib.PeekParentClass(feature))
	fnarg := gclass.request_started

	var _arg0 *C.SoupSessionFeature // out
	var _arg1 *C.SoupSession        // out
	var _arg2 *C.SoupMessage        // out
	var _arg3 *C.SoupSocket         // out

	_arg0 = (*C.SoupSessionFeature)(unsafe.Pointer(coreglib.InternObject(feature).Native()))
	_arg1 = (*C.SoupSession)(unsafe.Pointer(coreglib.InternObject(session).Native()))
	_arg2 = (*C.SoupMessage)(unsafe.Pointer(coreglib.InternObject(msg).Native()))
	_arg3 = (*C.SoupSocket)(unsafe.Pointer(coreglib.InternObject(socket).Native()))

	C._gotk4_soup2_SessionFeature_virtual_request_started(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(session)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(socket)
}

// The function takes the following parameters:
//
//   - session
//   - msg
//
func (feature *SessionFeature) requestUnqueued(session *Session, msg *Message) {
	gclass := (*C.SoupSessionFeatureInterface)(coreglib.PeekParentClass(feature))
	fnarg := gclass.request_unqueued

	var _arg0 *C.SoupSessionFeature // out
	var _arg1 *C.SoupSession        // out
	var _arg2 *C.SoupMessage        // out

	_arg0 = (*C.SoupSessionFeature)(unsafe.Pointer(coreglib.InternObject(feature).Native()))
	_arg1 = (*C.SoupSession)(unsafe.Pointer(coreglib.InternObject(session).Native()))
	_arg2 = (*C.SoupMessage)(unsafe.Pointer(coreglib.InternObject(msg).Native()))

	C._gotk4_soup2_SessionFeature_virtual_request_unqueued(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(session)
	runtime.KeepAlive(msg)
}

// SessionFeatureInterface: interface implemented by SessionFeature<!-- -->s.
//
// An instance of this type is always passed by reference.
type SessionFeatureInterface struct {
	*sessionFeatureInterface
}

// sessionFeatureInterface is the struct that's finalized.
type sessionFeatureInterface struct {
	native *C.SoupSessionFeatureInterface
}
