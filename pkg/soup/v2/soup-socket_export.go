// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <libsoup/soup.h>
import "C"

//export _gotk4_soup2_SocketCallback
func _gotk4_soup2_SocketCallback(arg1 *C.SoupSocket, arg2 C.guint, arg3 C.gpointer) {
	var fn SocketCallback
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(SocketCallback)
	}

	var _sock *Socket // out
	var _status uint  // out

	_sock = wrapSocket(coreglib.Take(unsafe.Pointer(arg1)))
	_status = uint(arg2)

	fn(_sock, _status)
}

//export _gotk4_soup2_Socket_ConnectDisconnected
func _gotk4_soup2_Socket_ConnectDisconnected(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup2_Socket_ConnectEvent
func _gotk4_soup2_Socket_ConnectEvent(arg0 C.gpointer, arg1 C.GSocketClientEvent, arg2 *C.GIOStream, arg3 C.guintptr) {
	var f func(event gio.SocketClientEvent, connection gio.IOStreamer)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event gio.SocketClientEvent, connection gio.IOStreamer))
	}

	var _event gio.SocketClientEvent // out
	var _connection gio.IOStreamer   // out

	_event = gio.SocketClientEvent(arg1)
	{
		objptr := unsafe.Pointer(arg2)
		if objptr == nil {
			panic("object of type gio.IOStreamer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gio.IOStreamer)
			return ok
		})
		rv, ok := casted.(gio.IOStreamer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.IOStreamer")
		}
		_connection = rv
	}

	f(_event, _connection)
}

//export _gotk4_soup2_Socket_ConnectNewConnection
func _gotk4_soup2_Socket_ConnectNewConnection(arg0 C.gpointer, arg1 *C.SoupSocket, arg2 C.guintptr) {
	var f func(new *Socket)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(new *Socket))
	}

	var _new *Socket // out

	_new = wrapSocket(coreglib.Take(unsafe.Pointer(arg1)))

	f(_new)
}

//export _gotk4_soup2_Socket_ConnectReadable
func _gotk4_soup2_Socket_ConnectReadable(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup2_Socket_ConnectWritable
func _gotk4_soup2_Socket_ConnectWritable(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}
