// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeSessionAsync = coreglib.Type(C.soup_session_async_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSessionAsync, F: marshalSessionAsync},
	})
}

// SessionAsyncOverrides contains methods that are overridable.
type SessionAsyncOverrides struct {
}

func defaultSessionAsyncOverrides(v *SessionAsync) SessionAsyncOverrides {
	return SessionAsyncOverrides{}
}

type SessionAsync struct {
	_ [0]func() // equal guard
	Session
}

var (
	_ coreglib.Objector = (*SessionAsync)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*SessionAsync, *SessionAsyncClass, SessionAsyncOverrides](
		GTypeSessionAsync,
		initSessionAsyncClass,
		wrapSessionAsync,
		defaultSessionAsyncOverrides,
	)
}

func initSessionAsyncClass(gclass unsafe.Pointer, overrides SessionAsyncOverrides, classInitFunc func(*SessionAsyncClass)) {
	if classInitFunc != nil {
		class := (*SessionAsyncClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapSessionAsync(obj *coreglib.Object) *SessionAsync {
	return &SessionAsync{
		Session: Session{
			Object: obj,
		},
	}
}

func marshalSessionAsync(p uintptr) (interface{}, error) {
	return wrapSessionAsync(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewSessionAsync creates an asynchronous Session with the default options.
//
// Deprecated: SessionAsync is deprecated; use a plain Session, created with
// soup_session_new(). See the <link linkend="libsoup-session-porting">porting
// guide</link>.
//
// The function returns the following values:
//
//   - sessionAsync: new session.
//
func NewSessionAsync() *SessionAsync {
	var _cret *C.SoupSession // in

	_cret = C.soup_session_async_new()

	var _sessionAsync *SessionAsync // out

	_sessionAsync = wrapSessionAsync(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _sessionAsync
}

// SessionAsyncClass: instance of this type is always passed by reference.
type SessionAsyncClass struct {
	*sessionAsyncClass
}

// sessionAsyncClass is the struct that's finalized.
type sessionAsyncClass struct {
	native *C.SoupSessionAsyncClass
}

func (s *SessionAsyncClass) ParentClass() *SessionClass {
	valptr := &s.native.parent_class
	var _v *SessionClass // out
	_v = (*SessionClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
