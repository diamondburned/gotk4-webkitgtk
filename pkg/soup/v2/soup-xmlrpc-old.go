// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// XmlrpcBuildMethodCall: this creates an XML-RPC methodCall and returns it as a
// string. This is the low-level method that soup_xmlrpc_request_new() is built
// on.
//
// params is an array of #GValue representing the parameters to method.
// (It is *not* a Array, although if you have a Array, you can just pass its
// <literal>values</literal>f and <literal>n_values</literal> fields.)
//
// The correspondence between glib types and XML-RPC types is:
//
//    int: #int (G_TYPE_INT)
//    boolean: #gboolean (G_TYPE_BOOLEAN)
//    string: #char* (G_TYPE_STRING)
//    double: #double (G_TYPE_DOUBLE)
//    datetime.iso8601: Date (SOUP_TYPE_DATE)
//    base64: Array (SOUP_TYPE_BYTE_ARRAY)
//    struct: Table (G_TYPE_HASH_TABLE)
//    array: Array (G_TYPE_VALUE_ARRAY)
//
// For structs, use a Table that maps strings to #GValue; soup_value_hash_new()
// and related methods can help with this.
//
// Deprecated: Use soup_xmlrpc_build_request() instead.
//
// The function takes the following parameters:
//
//   - methodName: name of the XML-RPC method.
//   - params arguments to method.
//
// The function returns the following values:
//
//   - utf8 (optional): text of the methodCall, or NULL on error.
//
func XmlrpcBuildMethodCall(methodName string, params []coreglib.Value) string {
	var _arg1 *C.char   // out
	var _arg2 *C.GValue // out
	var _arg3 C.int
	var _cret *C.char // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(methodName)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg3 = (C.int)(len(params))
	_arg2 = (*C.GValue)(C.calloc(C.size_t(len(params)), C.size_t(C.sizeof_GValue)))
	defer C.free(unsafe.Pointer(_arg2))
	{
		out := unsafe.Slice((*C.GValue)(_arg2), len(params))
		for i := range params {
			out[i] = *(*C.GValue)(unsafe.Pointer((&params[i]).Native()))
		}
	}

	_cret = C.soup_xmlrpc_build_method_call(_arg1, _arg2, _arg3)
	runtime.KeepAlive(methodName)
	runtime.KeepAlive(params)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// XmlrpcBuildMethodResponse: this creates a (successful) XML-RPC
// methodResponse and returns it as a string. To create a fault response,
// use soup_xmlrpc_build_fault().
//
// The glib type to XML-RPC type mapping is as with
// soup_xmlrpc_build_method_call(), qv.
//
// Deprecated: Use soup_xmlrpc_build_response() instead.
//
// The function takes the following parameters:
//
//   - value: return value.
//
// The function returns the following values:
//
//   - utf8 (optional): text of the methodResponse, or NULL on error.
//
func XmlrpcBuildMethodResponse(value *coreglib.Value) string {
	var _arg1 *C.GValue // out
	var _cret *C.char   // in

	_arg1 = (*C.GValue)(unsafe.Pointer(value.Native()))

	_cret = C.soup_xmlrpc_build_method_response(_arg1)
	runtime.KeepAlive(value)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// XmlrpcParseMethodResponse parses method_response and returns the return
// value in value. If method_response is a fault, value will be unchanged,
// and error will be set to an error of type SOUP_XMLRPC_FAULT,
// with the error #code containing the fault code, and the error #message
// containing the fault string. (If method_response cannot be parsed at all,
// soup_xmlrpc_parse_method_response() will return FALSE, but error will be
// unset.)
//
// Deprecated: Use soup_xmlrpc_parse_response() instead.
//
// The function takes the following parameters:
//
//   - methodResponse: XML-RPC methodResponse string.
//   - length of method_response, or -1 if it is NUL-terminated.
//
// The function returns the following values:
//
//   - value: on return, the return value from method_call.
//
func XmlrpcParseMethodResponse(methodResponse string, length int) (coreglib.Value, error) {
	var _arg1 *C.char   // out
	var _arg2 C.int     // out
	var _arg3 C.GValue  // in
	var _cerr *C.GError // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(methodResponse)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(length)

	C.soup_xmlrpc_parse_method_response(_arg1, _arg2, &_arg3, &_cerr)
	runtime.KeepAlive(methodResponse)
	runtime.KeepAlive(length)

	var _value coreglib.Value // out
	var _goerr error          // out

	_value = *coreglib.ValueFromNative(unsafe.Pointer((&_arg3)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _value, _goerr
}
