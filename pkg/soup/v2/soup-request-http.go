// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeRequestHTTP = coreglib.Type(C.soup_request_http_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRequestHTTP, F: marshalRequestHTTP},
	})
}

// RequestHTTPOverrides contains methods that are overridable.
type RequestHTTPOverrides struct {
}

func defaultRequestHTTPOverrides(v *RequestHTTP) RequestHTTPOverrides {
	return RequestHTTPOverrides{}
}

type RequestHTTP struct {
	_ [0]func() // equal guard
	Request
}

var (
	_ coreglib.Objector = (*RequestHTTP)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*RequestHTTP, *RequestHTTPClass, RequestHTTPOverrides](
		GTypeRequestHTTP,
		initRequestHTTPClass,
		wrapRequestHTTP,
		defaultRequestHTTPOverrides,
	)
}

func initRequestHTTPClass(gclass unsafe.Pointer, overrides RequestHTTPOverrides, classInitFunc func(*RequestHTTPClass)) {
	if classInitFunc != nil {
		class := (*RequestHTTPClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapRequestHTTP(obj *coreglib.Object) *RequestHTTP {
	return &RequestHTTP{
		Request: Request{
			Object: obj,
			Initable: gio.Initable{
				Object: obj,
			},
		},
	}
}

func marshalRequestHTTP(p uintptr) (interface{}, error) {
	return wrapRequestHTTP(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Message gets a new reference to the Message associated to this SoupRequest.
//
// The function returns the following values:
//
//   - message: new reference to the Message.
//
func (http *RequestHTTP) Message() *Message {
	var _arg0 *C.SoupRequestHTTP // out
	var _cret *C.SoupMessage     // in

	_arg0 = (*C.SoupRequestHTTP)(unsafe.Pointer(coreglib.InternObject(http).Native()))

	_cret = C.soup_request_http_get_message(_arg0)
	runtime.KeepAlive(http)

	var _message *Message // out

	_message = wrapMessage(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _message
}

// RequestHTTPClass: instance of this type is always passed by reference.
type RequestHTTPClass struct {
	*requestHTTPClass
}

// requestHTTPClass is the struct that's finalized.
type requestHTTPClass struct {
	native *C.SoupRequestHTTPClass
}

func (r *RequestHTTPClass) Parent() *RequestClass {
	valptr := &r.native.parent
	var _v *RequestClass // out
	_v = (*RequestClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
