// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <libsoup/soup.h>
import "C"

// HeaderParseSemiParamList parses a header which is a semicolon-delimited
// list of something like: <literal>token [ "=" ( token | quoted-string )
// ]</literal>.
//
// Tokens that don't have an associated value will still be added to the
// resulting hash table, but with a NULL value.
//
// This also handles RFC5987 encoding (which in HTTP is mostly used for giving
// UTF8-encoded filenames in the Content-Disposition header).
//
// The function takes the following parameters:
//
//   - header value.
//
// The function returns the following values:
//
//   - hashTable: a Table of list elements, which can be freed with
//     soup_header_free_param_list().
//
func HeaderParseSemiParamList(header string) map[string]string {
	var _arg1 *C.char       // out
	var _cret *C.GHashTable // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(header)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.soup_header_parse_semi_param_list(_arg1)
	runtime.KeepAlive(header)

	var _hashTable map[string]string // out

	_hashTable = make(map[string]string, gextras.HashTableSize(unsafe.Pointer(_cret)))
	gextras.MoveHashTable(unsafe.Pointer(_cret), true, func(k, v unsafe.Pointer) {
		ksrc := *(**C.gchar)(k)
		vsrc := *(**C.gchar)(v)
		var kdst string // out
		var vdst string // out
		kdst = C.GoString((*C.gchar)(unsafe.Pointer(ksrc)))
		defer C.free(unsafe.Pointer(ksrc))
		vdst = C.GoString((*C.gchar)(unsafe.Pointer(vsrc)))
		defer C.free(unsafe.Pointer(vsrc))
		_hashTable[kdst] = vdst
	})

	return _hashTable
}
