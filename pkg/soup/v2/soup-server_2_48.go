// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"fmt"
	"strings"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeServerListenOptions = coreglib.Type(C.soup_server_listen_options_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeServerListenOptions, F: marshalServerListenOptions},
	})
}

// ServerListenOptions options to pass to soup_server_listen(), etc.
//
// SOUP_SERVER_LISTEN_IPV4_ONLY and SOUP_SERVER_LISTEN_IPV6_ONLY only make
// sense with soup_server_listen_all() and soup_server_listen_local(), not plain
// soup_server_listen() (which simply listens on whatever kind of socket you
// give it). And you cannot specify both of them in a single call.
type ServerListenOptions C.guint

const (
	// ServerListenHTTPS: listen for https connections rather than plain http.
	ServerListenHTTPS ServerListenOptions = 0b1
	// ServerListenIPv4Only: only listen on IPv4 interfaces.
	ServerListenIPv4Only ServerListenOptions = 0b10
	// ServerListenIPv6Only: only listen on IPv6 interfaces.
	ServerListenIPv6Only ServerListenOptions = 0b100
)

func marshalServerListenOptions(p uintptr) (interface{}, error) {
	return ServerListenOptions(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for ServerListenOptions.
func (s ServerListenOptions) String() string {
	if s == 0 {
		return "ServerListenOptions(0)"
	}

	var builder strings.Builder
	builder.Grow(59)

	for s != 0 {
		next := s & (s - 1)
		bit := s - next

		switch bit {
		case ServerListenHTTPS:
			builder.WriteString("HTTPS|")
		case ServerListenIPv4Only:
			builder.WriteString("IPv4Only|")
		case ServerListenIPv6Only:
			builder.WriteString("IPv6Only|")
		default:
			builder.WriteString(fmt.Sprintf("ServerListenOptions(0b%b)|", bit))
		}

		s = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if s contains other.
func (s ServerListenOptions) Has(other ServerListenOptions) bool {
	return (s & other) == other
}
