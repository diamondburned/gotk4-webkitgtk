// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeRequestError = coreglib.Type(C.soup_request_error_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRequestError, F: marshalRequestError},
	})
}

// SESSION_LOCAL_ADDRESS alias for the Session:local-address property, qv.
const SESSION_LOCAL_ADDRESS = "local-address"

// RequestError: Request error.
type RequestError C.gint

const (
	// RequestErrorBadURI: URI could not be parsed.
	RequestErrorBadURI RequestError = iota
	// RequestErrorUnsupportedURIScheme: URI scheme is not supported by this
	// Session.
	RequestErrorUnsupportedURIScheme
	// RequestErrorParsing server's response could not be parsed.
	RequestErrorParsing
	// RequestErrorEncoding server's response was in an unsupported format.
	RequestErrorEncoding
)

func marshalRequestError(p uintptr) (interface{}, error) {
	return RequestError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RequestError.
func (r RequestError) String() string {
	switch r {
	case RequestErrorBadURI:
		return "BadURI"
	case RequestErrorUnsupportedURIScheme:
		return "UnsupportedURIScheme"
	case RequestErrorParsing:
		return "Parsing"
	case RequestErrorEncoding:
		return "Encoding"
	default:
		return fmt.Sprintf("RequestError(%d)", r)
	}
}
