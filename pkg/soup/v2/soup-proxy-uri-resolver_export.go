// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <libsoup/soup.h>
import "C"

//export _gotk4_soup2_ProxyURIResolverCallback
func _gotk4_soup2_ProxyURIResolverCallback(arg1 *C.SoupProxyURIResolver, arg2 C.guint, arg3 *C.SoupURI, arg4 C.gpointer) {
	var fn ProxyURIResolverCallback
	{
		v := gbox.Get(uintptr(arg4))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(ProxyURIResolverCallback)
	}

	var _resolver ProxyURIResolverer // out
	var _status uint                 // out
	var _proxyUri *URI               // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type soup.ProxyURIResolverer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(ProxyURIResolverer)
			return ok
		})
		rv, ok := casted.(ProxyURIResolverer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching soup.ProxyURIResolverer")
		}
		_resolver = rv
	}
	_status = uint(arg2)
	_proxyUri = (*URI)(gextras.NewStructNative(unsafe.Pointer(arg3)))

	fn(_resolver, _status, _proxyUri)
}
