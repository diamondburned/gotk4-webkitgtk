// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
)

// #include <stdlib.h>
// #include <libsoup/soup.h>
import "C"

// MAJOR_VERSION: like soup_get_major_version(), but from the headers used at
// application compile time, rather than from the library linked against at
// application run time.
const MAJOR_VERSION = 2

// MICRO_VERSION: like soup_get_micro_version(), but from the headers used at
// application compile time, rather than from the library linked against at
// application run time.
const MICRO_VERSION = 3

// MINOR_VERSION: like soup_get_minor_version(), but from the headers used at
// application compile time, rather than from the library linked against at
// application run time.
const MINOR_VERSION = 74

// VERSION_MIN_REQUIRED: macro that should be defined by the user prior to
// including libsoup.h. The definition should be one of the predefined libsoup
// version macros: SOUP_VERSION_2_24, SOUP_VERSION_2_26, ...
//
// This macro defines the earliest version of libsoup that the package is
// required to be able to compile against.
//
// If the compiler is configured to warn about the use of deprecated
// functions, then using functions that were deprecated in version
// SOUP_VERSION_MIN_REQUIRED or earlier will cause warnings (but using functions
// deprecated in later releases will not).
const VERSION_MIN_REQUIRED = 2

// CheckVersion: like SOUP_CHECK_VERSION, but the check for soup_check_version
// is at runtime instead of compile time. This is useful for compiling against
// older versions of libsoup, but using features from newer versions.
//
// The function takes the following parameters:
//
//   - major version to check.
//   - minor version to check.
//   - micro version to check.
//
// The function returns the following values:
//
//   - ok: TRUE if the version of the libsoup currently loaded is the same as or
//     newer than the passed-in version.
//
func CheckVersion(major, minor, micro uint) bool {
	var _arg1 C.guint    // out
	var _arg2 C.guint    // out
	var _arg3 C.guint    // out
	var _cret C.gboolean // in

	_arg1 = C.guint(major)
	_arg2 = C.guint(minor)
	_arg3 = C.guint(micro)

	_cret = C.soup_check_version(_arg1, _arg2, _arg3)
	runtime.KeepAlive(major)
	runtime.KeepAlive(minor)
	runtime.KeepAlive(micro)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// GetMajorVersion returns the major version number of the libsoup library.
// (e.g. in libsoup version 2.42.0 this is 2.)
//
// This function is in the library, so it represents the libsoup library
// your code is running against. Contrast with the UP_MAJOR_VERSION macro,
// which represents the major version of the libsoup headers you have included
// when compiling your code.
//
// The function returns the following values:
//
//   - guint: major version number of the libsoup library.
//
func GetMajorVersion() uint {
	var _cret C.guint // in

	_cret = C.soup_get_major_version()

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// GetMicroVersion returns the micro version number of the libsoup library.
// (e.g. in libsoup version 2.42.0 this is 0.)
//
// This function is in the library, so it represents the libsoup library
// your code is running against. Contrast with the UP_MICRO_VERSION macro,
// which represents the micro version of the libsoup headers you have included
// when compiling your code.
//
// The function returns the following values:
//
//   - guint: micro version number of the libsoup library.
//
func GetMicroVersion() uint {
	var _cret C.guint // in

	_cret = C.soup_get_micro_version()

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// GetMinorVersion returns the minor version number of the libsoup library.
// (e.g. in libsoup version 2.42.0 this is 42.)
//
// This function is in the library, so it represents the libsoup library
// your code is running against. Contrast with the UP_MINOR_VERSION macro,
// which represents the minor version of the libsoup headers you have included
// when compiling your code.
//
// The function returns the following values:
//
//   - guint: minor version number of the libsoup library.
//
func GetMinorVersion() uint {
	var _cret C.guint // in

	_cret = C.soup_get_minor_version()

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}
