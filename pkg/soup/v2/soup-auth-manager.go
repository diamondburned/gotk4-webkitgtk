// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
// extern void _gotk4_soup2_AuthManager_ConnectAuthenticate(gpointer, SoupMessage*, SoupAuth*, gboolean, guintptr);
// extern void _gotk4_soup2_AuthManagerClass_authenticate(SoupAuthManager*, SoupMessage*, SoupAuth*, gboolean);
// void _gotk4_soup2_AuthManager_virtual_authenticate(void* fnptr, SoupAuthManager* arg0, SoupMessage* arg1, SoupAuth* arg2, gboolean arg3) {
//   ((void (*)(SoupAuthManager*, SoupMessage*, SoupAuth*, gboolean))(fnptr))(arg0, arg1, arg2, arg3);
// };
import "C"

// GType values.
var (
	GTypeAuthManager = coreglib.Type(C.soup_auth_manager_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAuthManager, F: marshalAuthManager},
	})
}

// AuthManagerOverrides contains methods that are overridable.
type AuthManagerOverrides struct {
	// The function takes the following parameters:
	//
	//   - msg
	//   - auth
	//   - retrying
	//
	Authenticate func(msg *Message, auth Auther, retrying bool)
}

func defaultAuthManagerOverrides(v *AuthManager) AuthManagerOverrides {
	return AuthManagerOverrides{
		Authenticate: v.authenticate,
	}
}

type AuthManager struct {
	_ [0]func() // equal guard
	*coreglib.Object

	SessionFeature
}

var (
	_ coreglib.Objector = (*AuthManager)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*AuthManager, *AuthManagerClass, AuthManagerOverrides](
		GTypeAuthManager,
		initAuthManagerClass,
		wrapAuthManager,
		defaultAuthManagerOverrides,
	)
}

func initAuthManagerClass(gclass unsafe.Pointer, overrides AuthManagerOverrides, classInitFunc func(*AuthManagerClass)) {
	pclass := (*C.SoupAuthManagerClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeAuthManager))))

	if overrides.Authenticate != nil {
		pclass.authenticate = (*[0]byte)(C._gotk4_soup2_AuthManagerClass_authenticate)
	}

	if classInitFunc != nil {
		class := (*AuthManagerClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapAuthManager(obj *coreglib.Object) *AuthManager {
	return &AuthManager{
		Object: obj,
		SessionFeature: SessionFeature{
			Object: obj,
		},
	}
}

func marshalAuthManager(p uintptr) (interface{}, error) {
	return wrapAuthManager(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectAuthenticate is emitted when the manager requires the application to
// provide authentication credentials.
//
// Session connects to this signal and emits its own Session::authenticate
// signal when it is emitted, so you shouldn't need to use this signal directly.
func (manager *AuthManager) ConnectAuthenticate(f func(msg *Message, auth Auther, retrying bool)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(manager, "authenticate", false, unsafe.Pointer(C._gotk4_soup2_AuthManager_ConnectAuthenticate), f)
}

// ClearCachedCredentials: clear all credentials cached by manager.
func (manager *AuthManager) ClearCachedCredentials() {
	var _arg0 *C.SoupAuthManager // out

	_arg0 = (*C.SoupAuthManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))

	C.soup_auth_manager_clear_cached_credentials(_arg0)
	runtime.KeepAlive(manager)
}

// UseAuth records that auth is to be used under uri, as though a
// WWW-Authenticate header had been received at that URI. This can be used to
// "preload" manager's auth cache, to avoid an extra HTTP round trip in the case
// where you know ahead of time that a 401 response will be returned.
//
// This is only useful for authentication types where the initial Authorization
// header does not depend on any additional information from the server. (Eg,
// Basic or NTLM, but not Digest.).
//
// The function takes the following parameters:
//
//   - uri under which auth is to be used.
//   - auth to use.
//
func (manager *AuthManager) UseAuth(uri *URI, auth Auther) {
	var _arg0 *C.SoupAuthManager // out
	var _arg1 *C.SoupURI         // out
	var _arg2 *C.SoupAuth        // out

	_arg0 = (*C.SoupAuthManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	_arg1 = (*C.SoupURI)(gextras.StructNative(unsafe.Pointer(uri)))
	_arg2 = (*C.SoupAuth)(unsafe.Pointer(coreglib.InternObject(auth).Native()))

	C.soup_auth_manager_use_auth(_arg0, _arg1, _arg2)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(uri)
	runtime.KeepAlive(auth)
}

// The function takes the following parameters:
//
//   - msg
//   - auth
//   - retrying
//
func (manager *AuthManager) authenticate(msg *Message, auth Auther, retrying bool) {
	gclass := (*C.SoupAuthManagerClass)(coreglib.PeekParentClass(manager))
	fnarg := gclass.authenticate

	var _arg0 *C.SoupAuthManager // out
	var _arg1 *C.SoupMessage     // out
	var _arg2 *C.SoupAuth        // out
	var _arg3 C.gboolean         // out

	_arg0 = (*C.SoupAuthManager)(unsafe.Pointer(coreglib.InternObject(manager).Native()))
	_arg1 = (*C.SoupMessage)(unsafe.Pointer(coreglib.InternObject(msg).Native()))
	_arg2 = (*C.SoupAuth)(unsafe.Pointer(coreglib.InternObject(auth).Native()))
	if retrying {
		_arg3 = C.TRUE
	}

	C._gotk4_soup2_AuthManager_virtual_authenticate(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(manager)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(auth)
	runtime.KeepAlive(retrying)
}

// AuthManagerClass: instance of this type is always passed by reference.
type AuthManagerClass struct {
	*authManagerClass
}

// authManagerClass is the struct that's finalized.
type authManagerClass struct {
	native *C.SoupAuthManagerClass
}
