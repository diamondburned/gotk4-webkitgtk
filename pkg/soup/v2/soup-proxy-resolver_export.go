// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <libsoup/soup.h>
import "C"

//export _gotk4_soup2_ProxyResolverCallback
func _gotk4_soup2_ProxyResolverCallback(arg1 *C.SoupProxyResolver, arg2 *C.SoupMessage, arg3 C.guint, arg4 *C.SoupAddress, arg5 C.gpointer) {
	var fn ProxyResolverCallback
	{
		v := gbox.Get(uintptr(arg5))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(ProxyResolverCallback)
	}

	var _proxyResolver ProxyResolverer // out
	var _msg *Message                  // out
	var _arg uint                      // out
	var _addr *Address                 // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type soup.ProxyResolverer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(ProxyResolverer)
			return ok
		})
		rv, ok := casted.(ProxyResolverer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching soup.ProxyResolverer")
		}
		_proxyResolver = rv
	}
	_msg = wrapMessage(coreglib.Take(unsafe.Pointer(arg2)))
	_arg = uint(arg3)
	_addr = wrapAddress(coreglib.Take(unsafe.Pointer(arg4)))

	fn(_proxyResolver, _msg, _arg, _addr)
}
