// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <libsoup/soup.h>
import "C"

//export _gotk4_soup2_SessionConnectProgressCallback
func _gotk4_soup2_SessionConnectProgressCallback(arg1 *C.SoupSession, arg2 C.GSocketClientEvent, arg3 *C.GIOStream, arg4 C.gpointer) {
	var fn SessionConnectProgressCallback
	{
		v := gbox.Get(uintptr(arg4))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(SessionConnectProgressCallback)
	}

	var _session *Session            // out
	var _event gio.SocketClientEvent // out
	var _connection gio.IOStreamer   // out

	_session = wrapSession(coreglib.Take(unsafe.Pointer(arg1)))
	_event = gio.SocketClientEvent(arg2)
	{
		objptr := unsafe.Pointer(arg3)
		if objptr == nil {
			panic("object of type gio.IOStreamer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gio.IOStreamer)
			return ok
		})
		rv, ok := casted.(gio.IOStreamer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.IOStreamer")
		}
		_connection = rv
	}

	fn(_session, _event, _connection)
}
