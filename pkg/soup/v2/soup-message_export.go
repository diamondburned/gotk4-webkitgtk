// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <libsoup/soup.h>
import "C"

//export _gotk4_soup2_ChunkAllocator
func _gotk4_soup2_ChunkAllocator(arg1 *C.SoupMessage, arg2 C.gsize, arg3 C.gpointer) (cret *C.SoupBuffer) {
	var fn ChunkAllocator
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(ChunkAllocator)
	}

	var _msg *Message // out
	var _maxLen uint  // out

	_msg = wrapMessage(coreglib.Take(unsafe.Pointer(arg1)))
	_maxLen = uint(arg2)

	buffer := fn(_msg, _maxLen)

	var _ *Buffer

	if buffer != nil {
		cret = (*C.SoupBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))
		runtime.SetFinalizer(gextras.StructIntern(unsafe.Pointer(buffer)), nil)
	}

	return cret
}

//export _gotk4_soup2_Message_ConnectContentSniffed
func _gotk4_soup2_Message_ConnectContentSniffed(arg0 C.gpointer, arg1 *C.gchar, arg2 *C.GHashTable, arg3 C.guintptr) {
	var f func(typ string, params map[string]string)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(typ string, params map[string]string))
	}

	var _typ string               // out
	var _params map[string]string // out

	_typ = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	_params = make(map[string]string, gextras.HashTableSize(unsafe.Pointer(arg2)))
	gextras.MoveHashTable(unsafe.Pointer(arg2), false, func(k, v unsafe.Pointer) {
		ksrc := *(**C.gchar)(k)
		vsrc := *(**C.gchar)(v)
		var kdst string // out
		var vdst string // out
		kdst = C.GoString((*C.gchar)(unsafe.Pointer(ksrc)))
		vdst = C.GoString((*C.gchar)(unsafe.Pointer(vsrc)))
		_params[kdst] = vdst
	})

	f(_typ, _params)
}

//export _gotk4_soup2_Message_ConnectFinished
func _gotk4_soup2_Message_ConnectFinished(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup2_Message_ConnectGotBody
func _gotk4_soup2_Message_ConnectGotBody(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup2_Message_ConnectGotChunk
func _gotk4_soup2_Message_ConnectGotChunk(arg0 C.gpointer, arg1 *C.SoupBuffer, arg2 C.guintptr) {
	var f func(chunk *Buffer)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(chunk *Buffer))
	}

	var _chunk *Buffer // out

	_chunk = (*Buffer)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	f(_chunk)
}

//export _gotk4_soup2_Message_ConnectGotHeaders
func _gotk4_soup2_Message_ConnectGotHeaders(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup2_Message_ConnectGotInformational
func _gotk4_soup2_Message_ConnectGotInformational(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup2_Message_ConnectNetworkEvent
func _gotk4_soup2_Message_ConnectNetworkEvent(arg0 C.gpointer, arg1 C.GSocketClientEvent, arg2 *C.GIOStream, arg3 C.guintptr) {
	var f func(event gio.SocketClientEvent, connection gio.IOStreamer)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(event gio.SocketClientEvent, connection gio.IOStreamer))
	}

	var _event gio.SocketClientEvent // out
	var _connection gio.IOStreamer   // out

	_event = gio.SocketClientEvent(arg1)
	{
		objptr := unsafe.Pointer(arg2)
		if objptr == nil {
			panic("object of type gio.IOStreamer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gio.IOStreamer)
			return ok
		})
		rv, ok := casted.(gio.IOStreamer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.IOStreamer")
		}
		_connection = rv
	}

	f(_event, _connection)
}

//export _gotk4_soup2_Message_ConnectRestarted
func _gotk4_soup2_Message_ConnectRestarted(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup2_Message_ConnectStarting
func _gotk4_soup2_Message_ConnectStarting(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup2_Message_ConnectWroteBody
func _gotk4_soup2_Message_ConnectWroteBody(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup2_Message_ConnectWroteBodyData
func _gotk4_soup2_Message_ConnectWroteBodyData(arg0 C.gpointer, arg1 *C.SoupBuffer, arg2 C.guintptr) {
	var f func(chunk *Buffer)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(chunk *Buffer))
	}

	var _chunk *Buffer // out

	_chunk = (*Buffer)(gextras.NewStructNative(unsafe.Pointer(arg1)))

	f(_chunk)
}

//export _gotk4_soup2_Message_ConnectWroteChunk
func _gotk4_soup2_Message_ConnectWroteChunk(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup2_Message_ConnectWroteHeaders
func _gotk4_soup2_Message_ConnectWroteHeaders(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_soup2_Message_ConnectWroteInformational
func _gotk4_soup2_Message_ConnectWroteInformational(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}
