// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <libsoup/soup.h>
import "C"

//export _gotk4_soup2_AuthManager_ConnectAuthenticate
func _gotk4_soup2_AuthManager_ConnectAuthenticate(arg0 C.gpointer, arg1 *C.SoupMessage, arg2 *C.SoupAuth, arg3 C.gboolean, arg4 C.guintptr) {
	var f func(msg *Message, auth Auther, retrying bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg4))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(msg *Message, auth Auther, retrying bool))
	}

	var _msg *Message  // out
	var _auth Auther   // out
	var _retrying bool // out

	_msg = wrapMessage(coreglib.Take(unsafe.Pointer(arg1)))
	{
		objptr := unsafe.Pointer(arg2)
		if objptr == nil {
			panic("object of type soup.Auther is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Auther)
			return ok
		})
		rv, ok := casted.(Auther)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching soup.Auther")
		}
		_auth = rv
	}
	if arg3 != 0 {
		_retrying = true
	}

	f(_msg, _auth, _retrying)
}
