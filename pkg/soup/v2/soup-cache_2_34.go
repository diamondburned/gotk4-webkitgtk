// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeCacheType = coreglib.Type(C.soup_cache_type_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCacheType, F: marshalCacheType},
	})
}

// CacheType: type of cache; this affects what kinds of responses will be saved.
type CacheType C.gint

const (
	// CacheSingleUser: single-user cache.
	CacheSingleUser CacheType = iota
	// CacheShared: shared cache.
	CacheShared
)

func marshalCacheType(p uintptr) (interface{}, error) {
	return CacheType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for CacheType.
func (c CacheType) String() string {
	switch c {
	case CacheSingleUser:
		return "SingleUser"
	case CacheShared:
		return "Shared"
	default:
		return fmt.Sprintf("CacheType(%d)", c)
	}
}
