// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
// extern void _gotk4_soup2_ProxyResolverCallback(SoupProxyResolver*, SoupMessage*, guint, SoupAddress*, gpointer);
// guint _gotk4_soup2_ProxyResolver_virtual_get_proxy_sync(void* fnptr, SoupProxyResolver* arg0, SoupMessage* arg1, GCancellable* arg2, SoupAddress** arg3) {
//   return ((guint (*)(SoupProxyResolver*, SoupMessage*, GCancellable*, SoupAddress**))(fnptr))(arg0, arg1, arg2, arg3);
// };
// void _gotk4_soup2_ProxyResolver_virtual_get_proxy_async(void* fnptr, SoupProxyResolver* arg0, SoupMessage* arg1, GMainContext* arg2, GCancellable* arg3, SoupProxyResolverCallback arg4, gpointer arg5) {
//   ((void (*)(SoupProxyResolver*, SoupMessage*, GMainContext*, GCancellable*, SoupProxyResolverCallback, gpointer))(fnptr))(arg0, arg1, arg2, arg3, arg4, arg5);
// };
import "C"

// GType values.
var (
	GTypeProxyResolver = coreglib.Type(C.soup_proxy_resolver_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeProxyResolver, F: marshalProxyResolver},
	})
}

// ProxyResolverCallback: deprecated: Use SoupProxyURIResolver instead.
type ProxyResolverCallback func(proxyResolver ProxyResolverer, msg *Message, arg uint, addr *Address)

//
// ProxyResolver wraps an interface. This means the user can get the
// underlying type by calling Cast().
type ProxyResolver struct {
	_ [0]func() // equal guard
	SessionFeature
}

var ()

// ProxyResolverer describes ProxyResolver's interface methods.
type ProxyResolverer interface {
	coreglib.Objector

	// ProxyAsync: deprecated: Use SoupProxyURIResolver.get_proxy_uri_async
	// instead.
	ProxyAsync(ctx context.Context, msg *Message, asyncContext *glib.MainContext, callback ProxyResolverCallback)
	// ProxySync: deprecated: Use SoupProxyURIResolver.get_proxy_uri_sync()
	// instead.
	ProxySync(ctx context.Context, msg *Message) (*Address, uint)
}

var _ ProxyResolverer = (*ProxyResolver)(nil)

func wrapProxyResolver(obj *coreglib.Object) *ProxyResolver {
	return &ProxyResolver{
		SessionFeature: SessionFeature{
			Object: obj,
		},
	}
}

func marshalProxyResolver(p uintptr) (interface{}, error) {
	return wrapProxyResolver(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ProxyAsync: deprecated: Use SoupProxyURIResolver.get_proxy_uri_async instead.
//
// The function takes the following parameters:
//
//   - ctx (optional)
//   - msg
//   - asyncContext
//   - callback
//
func (proxyResolver *ProxyResolver) ProxyAsync(ctx context.Context, msg *Message, asyncContext *glib.MainContext, callback ProxyResolverCallback) {
	var _arg0 *C.SoupProxyResolver        // out
	var _arg3 *C.GCancellable             // out
	var _arg1 *C.SoupMessage              // out
	var _arg2 *C.GMainContext             // out
	var _arg4 C.SoupProxyResolverCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.SoupProxyResolver)(unsafe.Pointer(coreglib.InternObject(proxyResolver).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.SoupMessage)(unsafe.Pointer(coreglib.InternObject(msg).Native()))
	_arg2 = (*C.GMainContext)(gextras.StructNative(unsafe.Pointer(asyncContext)))
	_arg4 = (*[0]byte)(C._gotk4_soup2_ProxyResolverCallback)
	_arg5 = C.gpointer(gbox.AssignOnce(callback))

	C.soup_proxy_resolver_get_proxy_async(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(proxyResolver)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(asyncContext)
	runtime.KeepAlive(callback)
}

// ProxySync: deprecated: Use SoupProxyURIResolver.get_proxy_uri_sync() instead.
//
// The function takes the following parameters:
//
//   - ctx (optional)
//   - msg
//
// The function returns the following values:
//
//   - addr
//   - guint
//
func (proxyResolver *ProxyResolver) ProxySync(ctx context.Context, msg *Message) (*Address, uint) {
	var _arg0 *C.SoupProxyResolver // out
	var _arg2 *C.GCancellable      // out
	var _arg1 *C.SoupMessage       // out
	var _arg3 *C.SoupAddress       // in
	var _cret C.guint              // in

	_arg0 = (*C.SoupProxyResolver)(unsafe.Pointer(coreglib.InternObject(proxyResolver).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.SoupMessage)(unsafe.Pointer(coreglib.InternObject(msg).Native()))

	_cret = C.soup_proxy_resolver_get_proxy_sync(_arg0, _arg1, _arg2, &_arg3)
	runtime.KeepAlive(proxyResolver)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(msg)

	var _addr *Address // out
	var _guint uint    // out

	_addr = wrapAddress(coreglib.Take(unsafe.Pointer(_arg3)))
	_guint = uint(_cret)

	return _addr, _guint
}

// proXYAsync: deprecated: Use SoupProxyURIResolver.get_proxy_uri_async instead.
//
// The function takes the following parameters:
//
//   - ctx (optional)
//   - msg
//   - asyncContext
//   - callback
//
func (proxyResolver *ProxyResolver) proxyAsync(ctx context.Context, msg *Message, asyncContext *glib.MainContext, callback ProxyResolverCallback) {
	gclass := (*C.SoupProxyResolverInterface)(coreglib.PeekParentClass(proxyResolver))
	fnarg := gclass.get_proxy_async

	var _arg0 *C.SoupProxyResolver        // out
	var _arg3 *C.GCancellable             // out
	var _arg1 *C.SoupMessage              // out
	var _arg2 *C.GMainContext             // out
	var _arg4 C.SoupProxyResolverCallback // out
	var _arg5 C.gpointer

	_arg0 = (*C.SoupProxyResolver)(unsafe.Pointer(coreglib.InternObject(proxyResolver).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.SoupMessage)(unsafe.Pointer(coreglib.InternObject(msg).Native()))
	_arg2 = (*C.GMainContext)(gextras.StructNative(unsafe.Pointer(asyncContext)))
	_arg4 = (*[0]byte)(C._gotk4_soup2_ProxyResolverCallback)
	_arg5 = C.gpointer(gbox.AssignOnce(callback))

	C._gotk4_soup2_ProxyResolver_virtual_get_proxy_async(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3, _arg4, _arg5)
	runtime.KeepAlive(proxyResolver)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(msg)
	runtime.KeepAlive(asyncContext)
	runtime.KeepAlive(callback)
}

// proXYSync: deprecated: Use SoupProxyURIResolver.get_proxy_uri_sync() instead.
//
// The function takes the following parameters:
//
//   - ctx (optional)
//   - msg
//
// The function returns the following values:
//
//   - addr
//   - guint
//
func (proxyResolver *ProxyResolver) proxySync(ctx context.Context, msg *Message) (*Address, uint) {
	gclass := (*C.SoupProxyResolverInterface)(coreglib.PeekParentClass(proxyResolver))
	fnarg := gclass.get_proxy_sync

	var _arg0 *C.SoupProxyResolver // out
	var _arg2 *C.GCancellable      // out
	var _arg1 *C.SoupMessage       // out
	var _arg3 *C.SoupAddress       // in
	var _cret C.guint              // in

	_arg0 = (*C.SoupProxyResolver)(unsafe.Pointer(coreglib.InternObject(proxyResolver).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.SoupMessage)(unsafe.Pointer(coreglib.InternObject(msg).Native()))

	_cret = C._gotk4_soup2_ProxyResolver_virtual_get_proxy_sync(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, &_arg3)
	runtime.KeepAlive(proxyResolver)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(msg)

	var _addr *Address // out
	var _guint uint    // out

	_addr = wrapAddress(coreglib.Take(unsafe.Pointer(_arg3)))
	_guint = uint(_cret)

	return _addr, _guint
}

// ProxyResolverInterface: instance of this type is always passed by reference.
type ProxyResolverInterface struct {
	*proxyResolverInterface
}

// proxyResolverInterface is the struct that's finalized.
type proxyResolverInterface struct {
	native *C.SoupProxyResolverInterface
}
