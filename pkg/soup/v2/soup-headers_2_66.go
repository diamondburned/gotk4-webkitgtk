// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
)

// #include <stdlib.h>
// #include <libsoup/soup.h>
import "C"

// HeaderParseParamListStrict: strict version of soup_header_parse_param_list()
// that bails out if there are duplicate parameters. Note that this function
// will treat RFC5987-encoded parameters as duplicated if an ASCII version
// is also present. For header fields that might contain RFC5987-encoded
// parameters, use soup_header_parse_param_list() instead.
//
// The function takes the following parameters:
//
//   - header value.
//
// The function returns the following values:
//
//   - hashTable (optional): a Table of list elements, which can be freed with
//     soup_header_free_param_list() or NULL if there are duplicate elements.
//
func HeaderParseParamListStrict(header string) map[string]string {
	var _arg1 *C.char       // out
	var _cret *C.GHashTable // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(header)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.soup_header_parse_param_list_strict(_arg1)
	runtime.KeepAlive(header)

	var _hashTable map[string]string // out

	if _cret != nil {
		_hashTable = make(map[string]string, gextras.HashTableSize(unsafe.Pointer(_cret)))
		gextras.MoveHashTable(unsafe.Pointer(_cret), true, func(k, v unsafe.Pointer) {
			ksrc := *(**C.gchar)(k)
			vsrc := *(**C.gchar)(v)
			var kdst string // out
			var vdst string // out
			kdst = C.GoString((*C.gchar)(unsafe.Pointer(ksrc)))
			defer C.free(unsafe.Pointer(ksrc))
			vdst = C.GoString((*C.gchar)(unsafe.Pointer(vsrc)))
			defer C.free(unsafe.Pointer(vsrc))
			_hashTable[kdst] = vdst
		})
	}

	return _hashTable
}

// HeaderParseSemiParamListStrict: strict version of
// soup_header_parse_semi_param_list() that bails out if there are duplicate
// parameters. Note that this function will treat RFC5987-encoded parameters as
// duplicated if an ASCII version is also present. For header fields that might
// contain RFC5987-encoded parameters, use soup_header_parse_semi_param_list()
// instead.
//
// The function takes the following parameters:
//
//   - header value.
//
// The function returns the following values:
//
//   - hashTable (optional): a Table of list elements, which can be freed with
//     soup_header_free_param_list() or NULL if there are duplicate elements.
//
func HeaderParseSemiParamListStrict(header string) map[string]string {
	var _arg1 *C.char       // out
	var _cret *C.GHashTable // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(header)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.soup_header_parse_semi_param_list_strict(_arg1)
	runtime.KeepAlive(header)

	var _hashTable map[string]string // out

	if _cret != nil {
		_hashTable = make(map[string]string, gextras.HashTableSize(unsafe.Pointer(_cret)))
		gextras.MoveHashTable(unsafe.Pointer(_cret), true, func(k, v unsafe.Pointer) {
			ksrc := *(**C.gchar)(k)
			vsrc := *(**C.gchar)(v)
			var kdst string // out
			var vdst string // out
			kdst = C.GoString((*C.gchar)(unsafe.Pointer(ksrc)))
			defer C.free(unsafe.Pointer(ksrc))
			vdst = C.GoString((*C.gchar)(unsafe.Pointer(vsrc)))
			defer C.free(unsafe.Pointer(vsrc))
			_hashTable[kdst] = vdst
		})
	}

	return _hashTable
}
