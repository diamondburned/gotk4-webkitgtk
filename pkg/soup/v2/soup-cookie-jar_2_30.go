// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeCookieJarAcceptPolicy = coreglib.Type(C.soup_cookie_jar_accept_policy_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCookieJarAcceptPolicy, F: marshalCookieJarAcceptPolicy},
	})
}

// COOKIE_JAR_ACCEPT_POLICY alias for the CookieJar:accept-policy property.
const COOKIE_JAR_ACCEPT_POLICY = "accept-policy"

// CookieJarAcceptPolicy: policy for accepting or rejecting cookies returned in
// responses.
type CookieJarAcceptPolicy C.gint

const (
	// CookieJarAcceptAlways: accept all cookies unconditionally.
	CookieJarAcceptAlways CookieJarAcceptPolicy = iota
	// CookieJarAcceptNever: reject all cookies unconditionally.
	CookieJarAcceptNever
	// CookieJarAcceptNoThirdParty: accept all cookies set by the main
	// document loaded in the application using libsoup. An example of the
	// most common case, web browsers, would be: If http://www.example.com
	// is the page loaded, accept all cookies set by example.com, but if a
	// resource from http://www.third-party.com is loaded from that page
	// reject any cookie that it could try to set. For libsoup to be able to
	// tell apart first party cookies from the rest, the application must call
	// soup_message_set_first_party() on each outgoing Message, setting the
	// URI of the main document. If no first party is set in a message when
	// this policy is in effect, cookies will be assumed to be third party by
	// default.
	CookieJarAcceptNoThirdParty
	// CookieJarAcceptGrandfatheredThirdParty: accept all cookies set by the
	// main document loaded in the application using libsoup, and from domains
	// that have previously set at least one cookie when loaded as the main
	// document. An example of the most common case, web browsers, would be:
	// if http://www.example.com is the page loaded, accept all cookies set
	// by example.com, but if a resource from http://www.third-party.com is
	// loaded from that page, reject any cookie that it could try to set unless
	// it already has a cookie in the cookie jar. For libsoup to be able to
	// tell apart first party cookies from the rest, the application must call
	// soup_message_set_first_party() on each outgoing Message, setting the
	// URI of the main document. If no first party is set in a message when
	// this policy is in effect, cookies will be assumed to be third party by
	// default. Since 2.72.
	CookieJarAcceptGrandfatheredThirdParty
)

func marshalCookieJarAcceptPolicy(p uintptr) (interface{}, error) {
	return CookieJarAcceptPolicy(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for CookieJarAcceptPolicy.
func (c CookieJarAcceptPolicy) String() string {
	switch c {
	case CookieJarAcceptAlways:
		return "Always"
	case CookieJarAcceptNever:
		return "Never"
	case CookieJarAcceptNoThirdParty:
		return "NoThirdParty"
	case CookieJarAcceptGrandfatheredThirdParty:
		return "GrandfatheredThirdParty"
	default:
		return fmt.Sprintf("CookieJarAcceptPolicy(%d)", c)
	}
}
