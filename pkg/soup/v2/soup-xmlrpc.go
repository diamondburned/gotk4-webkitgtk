// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeXMLRPCFault = coreglib.Type(C.soup_xmlrpc_fault_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeXMLRPCFault, F: marshalXMLRPCFault},
	})
}

// XMLRPCFault: pre-defined XML-RPC fault codes from <ulink
// url="http://xmlrpc-epi.sourceforge.net/specs/rfc.fault_codes.php">http://xmlrpc-epi.sourceforge.net/specs/rfc.fault_codes.php</ulink>.
// These are an extension, not part of the XML-RPC spec; you can't assume
// servers will use them.
type XMLRPCFault C.gint

const (
	// XmlrpcFaultParseErrorNotWellFormed: request was not well-formed.
	XmlrpcFaultParseErrorNotWellFormed XMLRPCFault = -32700
	// XmlrpcFaultParseErrorUnsupportedEncoding: request was in an unsupported
	// encoding.
	XmlrpcFaultParseErrorUnsupportedEncoding XMLRPCFault = -32701
	// XmlrpcFaultParseErrorInvalidCharacterForEncoding: request contained an
	// invalid character.
	XmlrpcFaultParseErrorInvalidCharacterForEncoding XMLRPCFault = -32702
	// XmlrpcFaultServerErrorInvalidXMLRpc: request was not valid XML-RPC.
	XmlrpcFaultServerErrorInvalidXMLRpc XMLRPCFault = -32600
	// XmlrpcFaultServerErrorRequestedMethodNotFound: method not found.
	XmlrpcFaultServerErrorRequestedMethodNotFound XMLRPCFault = -32601
	// XmlrpcFaultServerErrorInvalidMethodParameters: invalid parameters.
	XmlrpcFaultServerErrorInvalidMethodParameters XMLRPCFault = -32602
	// XmlrpcFaultServerErrorInternalXMLRpcError: internal error.
	XmlrpcFaultServerErrorInternalXMLRpcError XMLRPCFault = -32603
	// XmlrpcFaultApplicationError: start of reserved range for application
	// error codes.
	XmlrpcFaultApplicationError XMLRPCFault = -32500
	// XmlrpcFaultSystemError: start of reserved range for system error codes.
	XmlrpcFaultSystemError XMLRPCFault = -32400
	// XmlrpcFaultTransportError: start of reserved range for transport error
	// codes.
	XmlrpcFaultTransportError XMLRPCFault = -32300
)

func marshalXMLRPCFault(p uintptr) (interface{}, error) {
	return XMLRPCFault(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for XMLRPCFault.
func (x XMLRPCFault) String() string {
	switch x {
	case XmlrpcFaultParseErrorNotWellFormed:
		return "ParseErrorNotWellFormed"
	case XmlrpcFaultParseErrorUnsupportedEncoding:
		return "ParseErrorUnsupportedEncoding"
	case XmlrpcFaultParseErrorInvalidCharacterForEncoding:
		return "ParseErrorInvalidCharacterForEncoding"
	case XmlrpcFaultServerErrorInvalidXMLRpc:
		return "ServerErrorInvalidXMLRpc"
	case XmlrpcFaultServerErrorRequestedMethodNotFound:
		return "ServerErrorRequestedMethodNotFound"
	case XmlrpcFaultServerErrorInvalidMethodParameters:
		return "ServerErrorInvalidMethodParameters"
	case XmlrpcFaultServerErrorInternalXMLRpcError:
		return "ServerErrorInternalXMLRpcError"
	case XmlrpcFaultApplicationError:
		return "ApplicationError"
	case XmlrpcFaultSystemError:
		return "SystemError"
	case XmlrpcFaultTransportError:
		return "TransportError"
	default:
		return fmt.Sprintf("XMLRPCFault(%d)", x)
	}
}

// The function returns the following values:
//
func XMLRPCFaultQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.soup_xmlrpc_fault_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)
	type _ = glib.Quark
	type _ = uint32

	return _quark
}
