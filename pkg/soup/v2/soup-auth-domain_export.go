// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <libsoup/soup.h>
import "C"

//export _gotk4_soup2_AuthDomainFilter
func _gotk4_soup2_AuthDomainFilter(arg1 *C.SoupAuthDomain, arg2 *C.SoupMessage, arg3 C.gpointer) (cret C.gboolean) {
	var fn AuthDomainFilter
	{
		v := gbox.Get(uintptr(arg3))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(AuthDomainFilter)
	}

	var _domain AuthDomainer // out
	var _msg *Message        // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type soup.AuthDomainer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AuthDomainer)
			return ok
		})
		rv, ok := casted.(AuthDomainer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching soup.AuthDomainer")
		}
		_domain = rv
	}
	_msg = wrapMessage(coreglib.Take(unsafe.Pointer(arg2)))

	ok := fn(_domain, _msg)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_soup2_AuthDomainGenericAuthCallback
func _gotk4_soup2_AuthDomainGenericAuthCallback(arg1 *C.SoupAuthDomain, arg2 *C.SoupMessage, arg3 *C.char, arg4 C.gpointer) (cret C.gboolean) {
	var fn AuthDomainGenericAuthCallback
	{
		v := gbox.Get(uintptr(arg4))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(AuthDomainGenericAuthCallback)
	}

	var _domain AuthDomainer // out
	var _msg *Message        // out
	var _username string     // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type soup.AuthDomainer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(AuthDomainer)
			return ok
		})
		rv, ok := casted.(AuthDomainer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching soup.AuthDomainer")
		}
		_domain = rv
	}
	_msg = wrapMessage(coreglib.Take(unsafe.Pointer(arg2)))
	_username = C.GoString((*C.gchar)(unsafe.Pointer(arg3)))

	ok := fn(_domain, _msg, _username)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}
