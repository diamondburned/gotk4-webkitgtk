// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
// extern goffset _gotk4_soup2_RequestClass_get_content_length(SoupRequest*);
// extern gboolean _gotk4_soup2_RequestClass_check_uri(SoupRequest*, SoupURI*, GError**);
// extern char* _gotk4_soup2_RequestClass_get_content_type(SoupRequest*);
// extern GInputStream* _gotk4_soup2_RequestClass_send_finish(SoupRequest*, GAsyncResult*, GError**);
// extern GInputStream* _gotk4_soup2_RequestClass_send(SoupRequest*, GCancellable*, GError**);
// GInputStream* _gotk4_soup2_Request_virtual_send(void* fnptr, SoupRequest* arg0, GCancellable* arg1, GError** arg2) {
//   return ((GInputStream* (*)(SoupRequest*, GCancellable*, GError**))(fnptr))(arg0, arg1, arg2);
// };
// GInputStream* _gotk4_soup2_Request_virtual_send_finish(void* fnptr, SoupRequest* arg0, GAsyncResult* arg1, GError** arg2) {
//   return ((GInputStream* (*)(SoupRequest*, GAsyncResult*, GError**))(fnptr))(arg0, arg1, arg2);
// };
// char* _gotk4_soup2_Request_virtual_get_content_type(void* fnptr, SoupRequest* arg0) {
//   return ((char* (*)(SoupRequest*))(fnptr))(arg0);
// };
// gboolean _gotk4_soup2_Request_virtual_check_uri(void* fnptr, SoupRequest* arg0, SoupURI* arg1, GError** arg2) {
//   return ((gboolean (*)(SoupRequest*, SoupURI*, GError**))(fnptr))(arg0, arg1, arg2);
// };
// goffset _gotk4_soup2_Request_virtual_get_content_length(void* fnptr, SoupRequest* arg0) {
//   return ((goffset (*)(SoupRequest*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeRequest = coreglib.Type(C.soup_request_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRequest, F: marshalRequest},
	})
}

// REQUEST_SESSION alias for the Request:session property, qv.
const REQUEST_SESSION = "session"

// REQUEST_URI alias for the Request:uri property, qv.
const REQUEST_URI = "uri"

// RequestOverrides contains methods that are overridable.
type RequestOverrides struct {
	// The function takes the following parameters:
	//
	CheckURI func(uri *URI) error
	// ContentLength gets the length of the data represented by request.
	// For most request types, this will not be known until after you call
	// soup_request_send() or soup_request_send_finish().
	//
	// The function returns the following values:
	//
	//   - gint64: length of the data represented by request, or -1 if not
	//     known.
	//
	ContentLength func() int64
	// ContentType gets the type of the data represented by request.
	// For most request types, this will not be known until after you call
	// soup_request_send() or soup_request_send_finish().
	//
	// As in the HTTP Content-Type header, this may include parameters after the
	// MIME type.
	//
	// The function returns the following values:
	//
	//   - utf8 (optional): type of the data represented by request, or NULL if
	//     not known.
	//
	ContentType func() string
	// Send: synchronously requests the URI pointed to by request, and returns a
	// Stream that can be used to read its contents.
	//
	// Note that you cannot use this method with Requests attached to a
	// SessionAsync.
	//
	// The function takes the following parameters:
	//
	//   - ctx (optional) or NULL.
	//
	// The function returns the following values:
	//
	//   - inputStream that can be used to read from the URI pointed to by
	//     request.
	//
	Send func(ctx context.Context) (gio.InputStreamer, error)
	// SendFinish gets the result of a soup_request_send_async().
	//
	// The function takes the following parameters:
	//
	//   - result: Result.
	//
	// The function returns the following values:
	//
	//   - inputStream that can be used to read from the URI pointed to by
	//     request.
	//
	SendFinish func(result gio.AsyncResulter) (gio.InputStreamer, error)
}

func defaultRequestOverrides(v *Request) RequestOverrides {
	return RequestOverrides{
		CheckURI:      v.checkURI,
		ContentLength: v.contentLength,
		ContentType:   v.contentType,
		Send:          v.send,
		SendFinish:    v.sendFinish,
	}
}

// Request: request to retrieve a particular URI.
type Request struct {
	_ [0]func() // equal guard
	*coreglib.Object

	gio.Initable
}

var (
	_ coreglib.Objector = (*Request)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Request, *RequestClass, RequestOverrides](
		GTypeRequest,
		initRequestClass,
		wrapRequest,
		defaultRequestOverrides,
	)
}

func initRequestClass(gclass unsafe.Pointer, overrides RequestOverrides, classInitFunc func(*RequestClass)) {
	pclass := (*C.SoupRequestClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeRequest))))

	if overrides.CheckURI != nil {
		pclass.check_uri = (*[0]byte)(C._gotk4_soup2_RequestClass_check_uri)
	}

	if overrides.ContentLength != nil {
		pclass.get_content_length = (*[0]byte)(C._gotk4_soup2_RequestClass_get_content_length)
	}

	if overrides.ContentType != nil {
		pclass.get_content_type = (*[0]byte)(C._gotk4_soup2_RequestClass_get_content_type)
	}

	if overrides.Send != nil {
		pclass.send = (*[0]byte)(C._gotk4_soup2_RequestClass_send)
	}

	if overrides.SendFinish != nil {
		pclass.send_finish = (*[0]byte)(C._gotk4_soup2_RequestClass_send_finish)
	}

	if classInitFunc != nil {
		class := (*RequestClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapRequest(obj *coreglib.Object) *Request {
	return &Request{
		Object: obj,
		Initable: gio.Initable{
			Object: obj,
		},
	}
}

func marshalRequest(p uintptr) (interface{}, error) {
	return wrapRequest(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ContentLength gets the length of the data represented by request.
// For most request types, this will not be known until after you call
// soup_request_send() or soup_request_send_finish().
//
// The function returns the following values:
//
//   - gint64: length of the data represented by request, or -1 if not known.
//
func (request *Request) ContentLength() int64 {
	var _arg0 *C.SoupRequest // out
	var _cret C.goffset      // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(coreglib.InternObject(request).Native()))

	_cret = C.soup_request_get_content_length(_arg0)
	runtime.KeepAlive(request)

	var _gint64 int64 // out

	_gint64 = int64(_cret)

	return _gint64
}

// ContentType gets the type of the data represented by request.
// For most request types, this will not be known until after you call
// soup_request_send() or soup_request_send_finish().
//
// As in the HTTP Content-Type header, this may include parameters after the
// MIME type.
//
// The function returns the following values:
//
//   - utf8 (optional): type of the data represented by request, or NULL if not
//     known.
//
func (request *Request) ContentType() string {
	var _arg0 *C.SoupRequest // out
	var _cret *C.char        // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(coreglib.InternObject(request).Native()))

	_cret = C.soup_request_get_content_type(_arg0)
	runtime.KeepAlive(request)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// Session gets request's Session.
//
// The function returns the following values:
//
//   - session request's Session.
//
func (request *Request) Session() *Session {
	var _arg0 *C.SoupRequest // out
	var _cret *C.SoupSession // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(coreglib.InternObject(request).Native()))

	_cret = C.soup_request_get_session(_arg0)
	runtime.KeepAlive(request)

	var _session *Session // out

	_session = wrapSession(coreglib.Take(unsafe.Pointer(_cret)))

	return _session
}

// URI gets request's URI.
//
// The function returns the following values:
//
//   - urI request's URI.
//
func (request *Request) URI() *URI {
	var _arg0 *C.SoupRequest // out
	var _cret *C.SoupURI     // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(coreglib.InternObject(request).Native()))

	_cret = C.soup_request_get_uri(_arg0)
	runtime.KeepAlive(request)

	var _urI *URI // out

	_urI = (*URI)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _urI
}

// Send: synchronously requests the URI pointed to by request, and returns a
// Stream that can be used to read its contents.
//
// Note that you cannot use this method with Requests attached to a
// SessionAsync.
//
// The function takes the following parameters:
//
//   - ctx (optional) or NULL.
//
// The function returns the following values:
//
//   - inputStream that can be used to read from the URI pointed to by request.
//
func (request *Request) Send(ctx context.Context) (gio.InputStreamer, error) {
	var _arg0 *C.SoupRequest  // out
	var _arg1 *C.GCancellable // out
	var _cret *C.GInputStream // in
	var _cerr *C.GError       // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(coreglib.InternObject(request).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	_cret = C.soup_request_send(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(request)
	runtime.KeepAlive(ctx)

	var _inputStream gio.InputStreamer // out
	var _goerr error                   // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.InputStreamer is nil")
		}

		object := coreglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gio.InputStreamer)
			return ok
		})
		rv, ok := casted.(gio.InputStreamer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.InputStreamer")
		}
		_inputStream = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _inputStream, _goerr
}

// SendFinish gets the result of a soup_request_send_async().
//
// The function takes the following parameters:
//
//   - result: Result.
//
// The function returns the following values:
//
//   - inputStream that can be used to read from the URI pointed to by request.
//
func (request *Request) SendFinish(result gio.AsyncResulter) (gio.InputStreamer, error) {
	var _arg0 *C.SoupRequest  // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GInputStream // in
	var _cerr *C.GError       // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(coreglib.InternObject(request).Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	_cret = C.soup_request_send_finish(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(request)
	runtime.KeepAlive(result)

	var _inputStream gio.InputStreamer // out
	var _goerr error                   // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.InputStreamer is nil")
		}

		object := coreglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gio.InputStreamer)
			return ok
		})
		rv, ok := casted.(gio.InputStreamer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.InputStreamer")
		}
		_inputStream = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _inputStream, _goerr
}

// The function takes the following parameters:
//
func (reqBase *Request) checkURI(uri *URI) error {
	gclass := (*C.SoupRequestClass)(coreglib.PeekParentClass(reqBase))
	fnarg := gclass.check_uri

	var _arg0 *C.SoupRequest // out
	var _arg1 *C.SoupURI     // out
	var _cerr *C.GError      // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(coreglib.InternObject(reqBase).Native()))
	_arg1 = (*C.SoupURI)(gextras.StructNative(unsafe.Pointer(uri)))

	C._gotk4_soup2_Request_virtual_check_uri(unsafe.Pointer(fnarg), _arg0, _arg1, &_cerr)
	runtime.KeepAlive(reqBase)
	runtime.KeepAlive(uri)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// contentLength gets the length of the data represented by request.
// For most request types, this will not be known until after you call
// soup_request_send() or soup_request_send_finish().
//
// The function returns the following values:
//
//   - gint64: length of the data represented by request, or -1 if not known.
//
func (request *Request) contentLength() int64 {
	gclass := (*C.SoupRequestClass)(coreglib.PeekParentClass(request))
	fnarg := gclass.get_content_length

	var _arg0 *C.SoupRequest // out
	var _cret C.goffset      // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(coreglib.InternObject(request).Native()))

	_cret = C._gotk4_soup2_Request_virtual_get_content_length(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(request)

	var _gint64 int64 // out

	_gint64 = int64(_cret)

	return _gint64
}

// contentType gets the type of the data represented by request.
// For most request types, this will not be known until after you call
// soup_request_send() or soup_request_send_finish().
//
// As in the HTTP Content-Type header, this may include parameters after the
// MIME type.
//
// The function returns the following values:
//
//   - utf8 (optional): type of the data represented by request, or NULL if not
//     known.
//
func (request *Request) contentType() string {
	gclass := (*C.SoupRequestClass)(coreglib.PeekParentClass(request))
	fnarg := gclass.get_content_type

	var _arg0 *C.SoupRequest // out
	var _cret *C.char        // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(coreglib.InternObject(request).Native()))

	_cret = C._gotk4_soup2_Request_virtual_get_content_type(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(request)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// Send: synchronously requests the URI pointed to by request, and returns a
// Stream that can be used to read its contents.
//
// Note that you cannot use this method with Requests attached to a
// SessionAsync.
//
// The function takes the following parameters:
//
//   - ctx (optional) or NULL.
//
// The function returns the following values:
//
//   - inputStream that can be used to read from the URI pointed to by request.
//
func (request *Request) send(ctx context.Context) (gio.InputStreamer, error) {
	gclass := (*C.SoupRequestClass)(coreglib.PeekParentClass(request))
	fnarg := gclass.send

	var _arg0 *C.SoupRequest  // out
	var _arg1 *C.GCancellable // out
	var _cret *C.GInputStream // in
	var _cerr *C.GError       // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(coreglib.InternObject(request).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg1 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}

	_cret = C._gotk4_soup2_Request_virtual_send(unsafe.Pointer(fnarg), _arg0, _arg1, &_cerr)
	runtime.KeepAlive(request)
	runtime.KeepAlive(ctx)

	var _inputStream gio.InputStreamer // out
	var _goerr error                   // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.InputStreamer is nil")
		}

		object := coreglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gio.InputStreamer)
			return ok
		})
		rv, ok := casted.(gio.InputStreamer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.InputStreamer")
		}
		_inputStream = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _inputStream, _goerr
}

// sendFinish gets the result of a soup_request_send_async().
//
// The function takes the following parameters:
//
//   - result: Result.
//
// The function returns the following values:
//
//   - inputStream that can be used to read from the URI pointed to by request.
//
func (request *Request) sendFinish(result gio.AsyncResulter) (gio.InputStreamer, error) {
	gclass := (*C.SoupRequestClass)(coreglib.PeekParentClass(request))
	fnarg := gclass.send_finish

	var _arg0 *C.SoupRequest  // out
	var _arg1 *C.GAsyncResult // out
	var _cret *C.GInputStream // in
	var _cerr *C.GError       // in

	_arg0 = (*C.SoupRequest)(unsafe.Pointer(coreglib.InternObject(request).Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	_cret = C._gotk4_soup2_Request_virtual_send_finish(unsafe.Pointer(fnarg), _arg0, _arg1, &_cerr)
	runtime.KeepAlive(request)
	runtime.KeepAlive(result)

	var _inputStream gio.InputStreamer // out
	var _goerr error                   // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.InputStreamer is nil")
		}

		object := coreglib.AssumeOwnership(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gio.InputStreamer)
			return ok
		})
		rv, ok := casted.(gio.InputStreamer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.InputStreamer")
		}
		_inputStream = rv
	}
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _inputStream, _goerr
}
