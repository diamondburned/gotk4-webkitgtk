// Code generated by girgen. DO NOT EDIT.

package soup

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup.h>
import "C"

// GType values.
var (
	GTypeRequestData = coreglib.Type(C.soup_request_data_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRequestData, F: marshalRequestData},
	})
}

// RequestDataOverrides contains methods that are overridable.
type RequestDataOverrides struct {
}

func defaultRequestDataOverrides(v *RequestData) RequestDataOverrides {
	return RequestDataOverrides{}
}

type RequestData struct {
	_ [0]func() // equal guard
	Request
}

var (
	_ coreglib.Objector = (*RequestData)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*RequestData, *RequestDataClass, RequestDataOverrides](
		GTypeRequestData,
		initRequestDataClass,
		wrapRequestData,
		defaultRequestDataOverrides,
	)
}

func initRequestDataClass(gclass unsafe.Pointer, overrides RequestDataOverrides, classInitFunc func(*RequestDataClass)) {
	if classInitFunc != nil {
		class := (*RequestDataClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapRequestData(obj *coreglib.Object) *RequestData {
	return &RequestData{
		Request: Request{
			Object: obj,
			Initable: gio.Initable{
				Object: obj,
			},
		},
	}
}

func marshalRequestData(p uintptr) (interface{}, error) {
	return wrapRequestData(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// RequestDataClass: instance of this type is always passed by reference.
type RequestDataClass struct {
	*requestDataClass
}

// requestDataClass is the struct that's finalized.
type requestDataClass struct {
	native *C.SoupRequestDataClass
}

func (r *RequestDataClass) Parent() *RequestClass {
	valptr := &r.native.parent
	var _v *RequestClass // out
	_v = (*RequestClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
