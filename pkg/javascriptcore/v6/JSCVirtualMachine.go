// Code generated by girgen. DO NOT EDIT.

package javascriptcore

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <jsc/jsc.h>
import "C"

// GType values.
var (
	GTypeVirtualMachine = coreglib.Type(C.jsc_virtual_machine_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeVirtualMachine, F: marshalVirtualMachine},
	})
}

// VirtualMachineOverrides contains methods that are overridable.
type VirtualMachineOverrides struct {
}

func defaultVirtualMachineOverrides(v *VirtualMachine) VirtualMachineOverrides {
	return VirtualMachineOverrides{}
}

// VirtualMachine represents a group of JSCContext<!-- -->s. It allows
// concurrent JavaScript execution by creating a different instance of
// JSCVirtualMachine in each thread.
//
// To create a group of JSCContext<!-- -->s pass the same JSCVirtualMachine
// instance to every JSCContext constructor.
type VirtualMachine struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*VirtualMachine)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*VirtualMachine, *VirtualMachineClass, VirtualMachineOverrides](
		GTypeVirtualMachine,
		initVirtualMachineClass,
		wrapVirtualMachine,
		defaultVirtualMachineOverrides,
	)
}

func initVirtualMachineClass(gclass unsafe.Pointer, overrides VirtualMachineOverrides, classInitFunc func(*VirtualMachineClass)) {
	if classInitFunc != nil {
		class := (*VirtualMachineClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapVirtualMachine(obj *coreglib.Object) *VirtualMachine {
	return &VirtualMachine{
		Object: obj,
	}
}

func marshalVirtualMachine(p uintptr) (interface{}, error) {
	return wrapVirtualMachine(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewVirtualMachine: create a new CVirtualMachine.
//
// The function returns the following values:
//
//   - virtualMachine: newly created CVirtualMachine.
//
func NewVirtualMachine() *VirtualMachine {
	var _cret *C.JSCVirtualMachine // in

	_cret = C.jsc_virtual_machine_new()

	var _virtualMachine *VirtualMachine // out

	_virtualMachine = wrapVirtualMachine(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _virtualMachine
}

// VirtualMachineClass: instance of this type is always passed by reference.
type VirtualMachineClass struct {
	*virtualMachineClass
}

// virtualMachineClass is the struct that's finalized.
type virtualMachineClass struct {
	native *C.JSCVirtualMachineClass
}
