// Code generated by girgen. DO NOT EDIT.

package webkit

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit/webkit.h>
import "C"

// GType values.
var (
	GTypeResponsePolicyDecision = coreglib.Type(C.webkit_response_policy_decision_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeResponsePolicyDecision, F: marshalResponsePolicyDecision},
	})
}

// ResponsePolicyDecisionOverrides contains methods that are overridable.
type ResponsePolicyDecisionOverrides struct {
}

func defaultResponsePolicyDecisionOverrides(v *ResponsePolicyDecision) ResponsePolicyDecisionOverrides {
	return ResponsePolicyDecisionOverrides{}
}

// ResponsePolicyDecision: policy decision for resource responses.
//
// WebKitResponsePolicyDecision represents a policy decision for a resource
// response, whether from the network or the local system. A very common use
// case for these types of decision is deciding whether or not to download a
// particular resource or to load it normally.
type ResponsePolicyDecision struct {
	_ [0]func() // equal guard
	PolicyDecision
}

var (
	_ PolicyDecisioner = (*ResponsePolicyDecision)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ResponsePolicyDecision, *ResponsePolicyDecisionClass, ResponsePolicyDecisionOverrides](
		GTypeResponsePolicyDecision,
		initResponsePolicyDecisionClass,
		wrapResponsePolicyDecision,
		defaultResponsePolicyDecisionOverrides,
	)
}

func initResponsePolicyDecisionClass(gclass unsafe.Pointer, overrides ResponsePolicyDecisionOverrides, classInitFunc func(*ResponsePolicyDecisionClass)) {
	if classInitFunc != nil {
		class := (*ResponsePolicyDecisionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapResponsePolicyDecision(obj *coreglib.Object) *ResponsePolicyDecision {
	return &ResponsePolicyDecision{
		PolicyDecision: PolicyDecision{
			Object: obj,
		},
	}
}

func marshalResponsePolicyDecision(p uintptr) (interface{}, error) {
	return wrapResponsePolicyDecision(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Request: return the KitURIRequest associated with the response decision.
//
// Modifications to the returned object are <emphasis>not</emphasis> taken
// into account when the request is sent over the network, and is intended
// only to aid in evaluating whether a response decision should be taken
// or not. To modify requests before they are sent over the network the
// KitPage::send-request signal can be used instead.
//
// The function returns the following values:
//
//   - uriRequest: URI request that is associated with this policy decision.
//
func (decision *ResponsePolicyDecision) Request() *URIRequest {
	var _arg0 *C.WebKitResponsePolicyDecision // out
	var _cret *C.WebKitURIRequest             // in

	_arg0 = (*C.WebKitResponsePolicyDecision)(unsafe.Pointer(coreglib.InternObject(decision).Native()))

	_cret = C.webkit_response_policy_decision_get_request(_arg0)
	runtime.KeepAlive(decision)

	var _uriRequest *URIRequest // out

	_uriRequest = wrapURIRequest(coreglib.Take(unsafe.Pointer(_cret)))

	return _uriRequest
}

// Response gets the value of the KitResponsePolicyDecision:response property.
//
// The function returns the following values:
//
//   - uriResponse: URI response that is associated with this policy decision.
//
func (decision *ResponsePolicyDecision) Response() *URIResponse {
	var _arg0 *C.WebKitResponsePolicyDecision // out
	var _cret *C.WebKitURIResponse            // in

	_arg0 = (*C.WebKitResponsePolicyDecision)(unsafe.Pointer(coreglib.InternObject(decision).Native()))

	_cret = C.webkit_response_policy_decision_get_response(_arg0)
	runtime.KeepAlive(decision)

	var _uriResponse *URIResponse // out

	_uriResponse = wrapURIResponse(coreglib.Take(unsafe.Pointer(_cret)))

	return _uriResponse
}

// IsMainFrameMainResource gets whether the request is the main frame main
// resource.
//
// The function returns the following values:
//
//   - ok: TRUE if the request is the main frame main resouce or FALSE
//     otherwise.
//
func (decision *ResponsePolicyDecision) IsMainFrameMainResource() bool {
	var _arg0 *C.WebKitResponsePolicyDecision // out
	var _cret C.gboolean                      // in

	_arg0 = (*C.WebKitResponsePolicyDecision)(unsafe.Pointer(coreglib.InternObject(decision).Native()))

	_cret = C.webkit_response_policy_decision_is_main_frame_main_resource(_arg0)
	runtime.KeepAlive(decision)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IsMIMETypeSupported gets whether the MIME type of the response can be
// displayed in the KitWebView.
//
// Gets whether the MIME type of the response can be displayed in the
// KitWebView that triggered this policy decision request. See also
// webkit_web_view_can_show_mime_type().
//
// The function returns the following values:
//
//   - ok: TRUE if the MIME type of the response is supported or FALSE
//     otherwise.
//
func (decision *ResponsePolicyDecision) IsMIMETypeSupported() bool {
	var _arg0 *C.WebKitResponsePolicyDecision // out
	var _cret C.gboolean                      // in

	_arg0 = (*C.WebKitResponsePolicyDecision)(unsafe.Pointer(coreglib.InternObject(decision).Native()))

	_cret = C.webkit_response_policy_decision_is_mime_type_supported(_arg0)
	runtime.KeepAlive(decision)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ResponsePolicyDecisionClass: instance of this type is always passed by
// reference.
type ResponsePolicyDecisionClass struct {
	*responsePolicyDecisionClass
}

// responsePolicyDecisionClass is the struct that's finalized.
type responsePolicyDecisionClass struct {
	native *C.WebKitResponsePolicyDecisionClass
}

func (r *ResponsePolicyDecisionClass) ParentClass() *PolicyDecisionClass {
	valptr := &r.native.parent_class
	var _v *PolicyDecisionClass // out
	_v = (*PolicyDecisionClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
