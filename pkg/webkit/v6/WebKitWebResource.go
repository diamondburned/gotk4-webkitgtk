// Code generated by girgen. DO NOT EDIT.

package webkit

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit/webkit.h>
// extern void _gotk4_webkit6_WebResource_ConnectSentRequest(gpointer, WebKitURIRequest*, WebKitURIResponse*, guintptr);
// extern void _gotk4_webkit6_WebResource_ConnectFinished(gpointer, guintptr);
// extern void _gotk4_webkit6_WebResource_ConnectFailedWithTLSErrors(gpointer, GTlsCertificate*, GTlsCertificateFlags, guintptr);
// extern void _gotk4_webkit6_WebResource_ConnectFailed(gpointer, GError*, guintptr);
import "C"

// GType values.
var (
	GTypeWebResource = coreglib.Type(C.webkit_web_resource_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeWebResource, F: marshalWebResource},
	})
}

// WebResourceOverrides contains methods that are overridable.
type WebResourceOverrides struct {
}

func defaultWebResourceOverrides(v *WebResource) WebResourceOverrides {
	return WebResourceOverrides{}
}

// WebResource represents a resource at the end of a URI.
//
// A KitWebResource encapsulates content for each resource at the end of a
// particular URI. For example, one KitWebResource will be created for each
// separate image and stylesheet when a page is loaded.
//
// You can access the response and the URI for a given KitWebResource,
// using webkit_web_resource_get_uri() and webkit_web_resource_get_response(),
// as well as the raw data, using webkit_web_resource_get_data().
type WebResource struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*WebResource)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*WebResource, *WebResourceClass, WebResourceOverrides](
		GTypeWebResource,
		initWebResourceClass,
		wrapWebResource,
		defaultWebResourceOverrides,
	)
}

func initWebResourceClass(gclass unsafe.Pointer, overrides WebResourceOverrides, classInitFunc func(*WebResourceClass)) {
	if classInitFunc != nil {
		class := (*WebResourceClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapWebResource(obj *coreglib.Object) *WebResource {
	return &WebResource{
		Object: obj,
	}
}

func marshalWebResource(p uintptr) (interface{}, error) {
	return wrapWebResource(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectFailed: this signal is emitted when an error occurs during the
// resource load operation.
func (resource *WebResource) ConnectFailed(f func(err error)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(resource, "failed", false, unsafe.Pointer(C._gotk4_webkit6_WebResource_ConnectFailed), f)
}

// ConnectFailedWithTLSErrors: this signal is emitted when a TLS error occurs
// during the resource load operation.
func (resource *WebResource) ConnectFailedWithTLSErrors(f func(certificate gio.TLSCertificater, errors gio.TLSCertificateFlags)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(resource, "failed-with-tls-errors", false, unsafe.Pointer(C._gotk4_webkit6_WebResource_ConnectFailedWithTLSErrors), f)
}

// ConnectFinished: this signal is emitted when the resource load finishes
// successfully or due to an error. In case of errors KitWebResource::failed
// signal is emitted before this one.
func (resource *WebResource) ConnectFinished(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(resource, "finished", false, unsafe.Pointer(C._gotk4_webkit6_WebResource_ConnectFinished), f)
}

// ConnectSentRequest: this signal is emitted when request has been sent to the
// server. In case of a server redirection this signal is emitted again with
// the request argument containing the new request sent to the server due to the
// redirection and the redirected_response parameter containing the response
// received by the server for the initial request.
func (resource *WebResource) ConnectSentRequest(f func(request *URIRequest, redirectedResponse *URIResponse)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(resource, "sent-request", false, unsafe.Pointer(C._gotk4_webkit6_WebResource_ConnectSentRequest), f)
}

// DataFinish: finish an asynchronous operation started with
// webkit_web_resource_get_data().
//
// The function takes the following parameters:
//
//   - result: Result.
//
// The function returns the following values:
//
//   - guint8s: a string with the data of resource, or NULL in case of error.
//     if length is not NULL, the size of the data will be assigned to it.
//
func (resource *WebResource) DataFinish(result gio.AsyncResulter) ([]byte, error) {
	var _arg0 *C.WebKitWebResource // out
	var _arg1 *C.GAsyncResult      // out
	var _cret *C.guchar            // in
	var _arg2 C.gsize              // in
	var _cerr *C.GError            // in

	_arg0 = (*C.WebKitWebResource)(unsafe.Pointer(coreglib.InternObject(resource).Native()))
	_arg1 = (*C.GAsyncResult)(unsafe.Pointer(coreglib.InternObject(result).Native()))

	_cret = C.webkit_web_resource_get_data_finish(_arg0, _arg1, &_arg2, &_cerr)
	runtime.KeepAlive(resource)
	runtime.KeepAlive(result)

	var _guint8s []byte // out
	var _goerr error    // out

	defer C.free(unsafe.Pointer(_cret))
	_guint8s = make([]byte, _arg2)
	copy(_guint8s, unsafe.Slice((*byte)(unsafe.Pointer(_cret)), _arg2))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _guint8s, _goerr
}

// Response retrieves the KitURIResponse of the resource load operation.
//
// This method returns NULL if called before the response is received from the
// server. You can connect to notify::response signal to be notified when the
// response is received.
//
// The function returns the following values:
//
//   - uriResponse or NULL if the response hasn't been received yet.
//
func (resource *WebResource) Response() *URIResponse {
	var _arg0 *C.WebKitWebResource // out
	var _cret *C.WebKitURIResponse // in

	_arg0 = (*C.WebKitWebResource)(unsafe.Pointer(coreglib.InternObject(resource).Native()))

	_cret = C.webkit_web_resource_get_response(_arg0)
	runtime.KeepAlive(resource)

	var _uriResponse *URIResponse // out

	_uriResponse = wrapURIResponse(coreglib.Take(unsafe.Pointer(_cret)))

	return _uriResponse
}

// URI returns the current active URI of resource.
//
// The active URI might change during a load operation:
//
// <orderedlist> <listitem><para> When the resource load starts, the active URI
// is the requested URI </para></listitem> <listitem><para> When the initial
// request is sent to the server, KitWebResource::sent-request signal is emitted
// without a redirected response, the active URI is the URI of the request
// sent to the server. </para></listitem> <listitem><para> In case of a server
// redirection, KitWebResource::sent-request signal is emitted again with a
// redirected response, the active URI is the URI the request was redirected to.
// </para></listitem> <listitem><para> When the response is received from
// the server, the active URI is the final one and it will not change again.
// </para></listitem> </orderedlist>
//
// You can monitor the active URI by connecting to the notify::uri signal of
// resource.
//
// The function returns the following values:
//
//   - utf8: current active URI of resource.
//
func (resource *WebResource) URI() string {
	var _arg0 *C.WebKitWebResource // out
	var _cret *C.gchar             // in

	_arg0 = (*C.WebKitWebResource)(unsafe.Pointer(coreglib.InternObject(resource).Native()))

	_cret = C.webkit_web_resource_get_uri(_arg0)
	runtime.KeepAlive(resource)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// WebResourceClass: instance of this type is always passed by reference.
type WebResourceClass struct {
	*webResourceClass
}

// webResourceClass is the struct that's finalized.
type webResourceClass struct {
	native *C.WebKitWebResourceClass
}
