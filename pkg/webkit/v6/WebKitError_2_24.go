// Code generated by girgen. DO NOT EDIT.

package webkit

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit/webkit.h>
import "C"

// GType values.
var (
	GTypeUserContentFilterError = coreglib.Type(C.webkit_user_content_filter_error_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeUserContentFilterError, F: marshalUserContentFilterError},
	})
}

// UserContentFilterError errors that can occur while compiling content filters.
type UserContentFilterError C.gint

const (
	// UserContentFilterErrorInvalidSource: JSON source for a content filter is
	// invalid.
	UserContentFilterErrorInvalidSource UserContentFilterError = iota
	// UserContentFilterErrorNotFound: requested content filter could not be
	// found.
	UserContentFilterErrorNotFound
)

func marshalUserContentFilterError(p uintptr) (interface{}, error) {
	return UserContentFilterError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for UserContentFilterError.
func (u UserContentFilterError) String() string {
	switch u {
	case UserContentFilterErrorInvalidSource:
		return "InvalidSource"
	case UserContentFilterErrorNotFound:
		return "NotFound"
	default:
		return fmt.Sprintf("UserContentFilterError(%d)", u)
	}
}
