// Code generated by girgen. DO NOT EDIT.

package webkit

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit/webkit.h>
import "C"

// GType values.
var (
	GTypeAutoplayPolicy  = coreglib.Type(C.webkit_autoplay_policy_get_type())
	GTypeWebsitePolicies = coreglib.Type(C.webkit_website_policies_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAutoplayPolicy, F: marshalAutoplayPolicy},
		coreglib.TypeMarshaler{T: GTypeWebsitePolicies, F: marshalWebsitePolicies},
	})
}

// AutoplayPolicy: enum values used to specify autoplay policies.
type AutoplayPolicy C.gint

const (
	// AutoplayAllow: do not restrict autoplay.
	AutoplayAllow AutoplayPolicy = iota
	// AutoplayAllowWithoutSound: allow videos to autoplay if they have no audio
	// track, or if their audio track is muted.
	AutoplayAllowWithoutSound
	// AutoplayDeny: never allow autoplay.
	AutoplayDeny
)

func marshalAutoplayPolicy(p uintptr) (interface{}, error) {
	return AutoplayPolicy(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for AutoplayPolicy.
func (a AutoplayPolicy) String() string {
	switch a {
	case AutoplayAllow:
		return "Allow"
	case AutoplayAllowWithoutSound:
		return "AllowWithoutSound"
	case AutoplayDeny:
		return "Deny"
	default:
		return fmt.Sprintf("AutoplayPolicy(%d)", a)
	}
}

// WebsitePoliciesOverrides contains methods that are overridable.
type WebsitePoliciesOverrides struct {
}

func defaultWebsitePoliciesOverrides(v *WebsitePolicies) WebsitePoliciesOverrides {
	return WebsitePoliciesOverrides{}
}

// WebsitePolicies: view specific website policies.
//
// WebKitWebsitePolicies allows you to configure per-page policies, currently
// only autoplay policies are supported.
type WebsitePolicies struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*WebsitePolicies)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*WebsitePolicies, *WebsitePoliciesClass, WebsitePoliciesOverrides](
		GTypeWebsitePolicies,
		initWebsitePoliciesClass,
		wrapWebsitePolicies,
		defaultWebsitePoliciesOverrides,
	)
}

func initWebsitePoliciesClass(gclass unsafe.Pointer, overrides WebsitePoliciesOverrides, classInitFunc func(*WebsitePoliciesClass)) {
	if classInitFunc != nil {
		class := (*WebsitePoliciesClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapWebsitePolicies(obj *coreglib.Object) *WebsitePolicies {
	return &WebsitePolicies{
		Object: obj,
	}
}

func marshalWebsitePolicies(p uintptr) (interface{}, error) {
	return wrapWebsitePolicies(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewWebsitePolicies: create a new KitWebsitePolicies.
//
// The function returns the following values:
//
//   - websitePolicies: newly created KitWebsitePolicies.
//
func NewWebsitePolicies() *WebsitePolicies {
	var _cret *C.WebKitWebsitePolicies // in

	_cret = C.webkit_website_policies_new()

	var _websitePolicies *WebsitePolicies // out

	_websitePolicies = wrapWebsitePolicies(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _websitePolicies
}

// AutoplayPolicy: get the KitWebsitePolicies:autoplay property.
//
// The function returns the following values:
//
//   - autoplayPolicy: KitAutoplayPolicy.
//
func (policies *WebsitePolicies) AutoplayPolicy() AutoplayPolicy {
	var _arg0 *C.WebKitWebsitePolicies // out
	var _cret C.WebKitAutoplayPolicy   // in

	_arg0 = (*C.WebKitWebsitePolicies)(unsafe.Pointer(coreglib.InternObject(policies).Native()))

	_cret = C.webkit_website_policies_get_autoplay_policy(_arg0)
	runtime.KeepAlive(policies)

	var _autoplayPolicy AutoplayPolicy // out

	_autoplayPolicy = AutoplayPolicy(_cret)

	return _autoplayPolicy
}
