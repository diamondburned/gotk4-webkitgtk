// Code generated by girgen. DO NOT EDIT.

package webkit

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit/webkit.h>
import "C"

// GType values.
var (
	GTypeWebsiteData = coreglib.Type(C.webkit_website_data_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeWebsiteData, F: marshalWebsiteData},
	})
}

// WebsiteData: data stored locally by a web site.
//
// WebKitWebsiteData represents data stored in the client by a particular
// website. A website is normally a set of URLs grouped by domain name.
// You can get the website name, which is usually the domain, with
// webkit_website_data_get_name(). Documents loaded from the file system,
// like file:// URIs, are all grouped in the same WebKitWebsiteData with the
// name "Local files".
//
// A website can store different types of data in the client side.
// KitWebsiteDataTypes is an enum containing all the possible data types;
// use webkit_website_data_get_types() to get the bitmask of data types.
// It's also possible to know the size of the data stored for some of the
// KitWebsiteDataTypes by using webkit_website_data_get_size().
//
// A list of WebKitWebsiteData can be retrieved with
// webkit_website_data_manager_fetch(). See KitWebsiteDataManager for more
// information.
//
// An instance of this type is always passed by reference.
type WebsiteData struct {
	*websiteData
}

// websiteData is the struct that's finalized.
type websiteData struct {
	native *C.WebKitWebsiteData
}

func marshalWebsiteData(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &WebsiteData{&websiteData{(*C.WebKitWebsiteData)(b)}}, nil
}

// Name gets the name of KitWebsiteData.
//
// This is the website name, normally represented by a domain or host name.
// All local documents are grouped in the same KitWebsiteData using the name
// "Local files".
//
// The function returns the following values:
//
//   - utf8: website name of website_data.
//
func (websiteData *WebsiteData) Name() string {
	var _arg0 *C.WebKitWebsiteData // out
	var _cret *C.char              // in

	_arg0 = (*C.WebKitWebsiteData)(gextras.StructNative(unsafe.Pointer(websiteData)))

	_cret = C.webkit_website_data_get_name(_arg0)
	runtime.KeepAlive(websiteData)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Size gets the size of the data of types types in a KitWebsiteData.
//
// Note that currently the data size is only known for
// WEBKIT_WEBSITE_DATA_DISK_CACHE data type so for all other types 0 will be
// returned.
//
// The function takes the following parameters:
//
//   - types: bitmask of KitWebsiteDataTypes.
//
// The function returns the following values:
//
//   - guint64: size of website_data for the given types.
//
func (websiteData *WebsiteData) Size(types WebsiteDataTypes) uint64 {
	var _arg0 *C.WebKitWebsiteData     // out
	var _arg1 C.WebKitWebsiteDataTypes // out
	var _cret C.guint64                // in

	_arg0 = (*C.WebKitWebsiteData)(gextras.StructNative(unsafe.Pointer(websiteData)))
	_arg1 = C.WebKitWebsiteDataTypes(types)

	_cret = C.webkit_website_data_get_size(_arg0, _arg1)
	runtime.KeepAlive(websiteData)
	runtime.KeepAlive(types)

	var _guint64 uint64 // out

	_guint64 = uint64(_cret)

	return _guint64
}

// Types gets the types of data stored in the client for a KitWebsiteData.
//
// These are the types actually present, not the types queried with
// webkit_website_data_manager_fetch().
//
// The function returns the following values:
//
//   - websiteDataTypes: bitmask of KitWebsiteDataTypes in website_data.
//
func (websiteData *WebsiteData) Types() WebsiteDataTypes {
	var _arg0 *C.WebKitWebsiteData     // out
	var _cret C.WebKitWebsiteDataTypes // in

	_arg0 = (*C.WebKitWebsiteData)(gextras.StructNative(unsafe.Pointer(websiteData)))

	_cret = C.webkit_website_data_get_types(_arg0)
	runtime.KeepAlive(websiteData)

	var _websiteDataTypes WebsiteDataTypes // out

	_websiteDataTypes = WebsiteDataTypes(_cret)

	return _websiteDataTypes
}
