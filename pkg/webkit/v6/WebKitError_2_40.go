// Code generated by girgen. DO NOT EDIT.

package webkit

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit/webkit.h>
import "C"

// GType values.
var (
	GTypeMediaError = coreglib.Type(C.webkit_media_error_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeMediaError, F: marshalMediaError},
	})
}

// MediaError: enum values used to denote the various media errors.
type MediaError C.gint

const (
	// MediaErrorWillHandleLoad: preliminary load failure for media content
	// types. A new load will be started to perform the media load. Since: 2.40.
	MediaErrorWillHandleLoad MediaError = 204
)

func marshalMediaError(p uintptr) (interface{}, error) {
	return MediaError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for MediaError.
func (m MediaError) String() string {
	switch m {
	case MediaErrorWillHandleLoad:
		return "Load"
	default:
		return fmt.Sprintf("MediaError(%d)", m)
	}
}

// MediaErrorQuark gets the quark for the domain of media errors.
//
// The function returns the following values:
//
//   - quark: media error domin.
//
func MediaErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_media_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)
	type _ = glib.Quark
	type _ = uint32

	return _quark
}
