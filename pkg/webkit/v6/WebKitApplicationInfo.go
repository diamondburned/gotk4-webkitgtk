// Code generated by girgen. DO NOT EDIT.

package webkit

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit/webkit.h>
import "C"

// GType values.
var (
	GTypeApplicationInfo = coreglib.Type(C.webkit_application_info_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeApplicationInfo, F: marshalApplicationInfo},
	})
}

// ApplicationInfo: information about an application running in automation mode.
//
// An instance of this type is always passed by reference.
type ApplicationInfo struct {
	*applicationInfo
}

// applicationInfo is the struct that's finalized.
type applicationInfo struct {
	native *C.WebKitApplicationInfo
}

func marshalApplicationInfo(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &ApplicationInfo{&applicationInfo{(*C.WebKitApplicationInfo)(b)}}, nil
}

// NewApplicationInfo constructs a struct ApplicationInfo.
func NewApplicationInfo() *ApplicationInfo {
	var _cret *C.WebKitApplicationInfo // in

	_cret = C.webkit_application_info_new()

	var _applicationInfo *ApplicationInfo // out

	_applicationInfo = (*ApplicationInfo)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_applicationInfo)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.webkit_application_info_unref((*C.WebKitApplicationInfo)(intern.C))
		},
	)

	return _applicationInfo
}

// Name: get the name of the application.
//
// If webkit_application_info_set_name() hasn't been called with a valid name,
// this returns g_get_prgname().
//
// The function returns the following values:
//
//   - utf8: application name.
//
func (info *ApplicationInfo) Name() string {
	var _arg0 *C.WebKitApplicationInfo // out
	var _cret *C.gchar                 // in

	_arg0 = (*C.WebKitApplicationInfo)(gextras.StructNative(unsafe.Pointer(info)))

	_cret = C.webkit_application_info_get_name(_arg0)
	runtime.KeepAlive(info)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Version: get the application version previously set with
// webkit_application_info_set_version().
//
// The function returns the following values:
//
//   - major: return location for the major version number.
//   - minor (optional): return location for the minor version number.
//   - micro (optional): return location for the micro version number.
//
func (info *ApplicationInfo) Version() (major uint64, minor uint64, micro uint64) {
	var _arg0 *C.WebKitApplicationInfo // out
	var _arg1 C.guint64                // in
	var _arg2 C.guint64                // in
	var _arg3 C.guint64                // in

	_arg0 = (*C.WebKitApplicationInfo)(gextras.StructNative(unsafe.Pointer(info)))

	C.webkit_application_info_get_version(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(info)

	var _major uint64 // out
	var _minor uint64 // out
	var _micro uint64 // out

	_major = uint64(_arg1)
	_minor = uint64(_arg2)
	_micro = uint64(_arg3)

	return _major, _minor, _micro
}

// SetName: set the name of the application.
//
// If not provided, or NULL is passed, g_get_prgname() will be used.
//
// The function takes the following parameters:
//
//   - name: application name.
//
func (info *ApplicationInfo) SetName(name string) {
	var _arg0 *C.WebKitApplicationInfo // out
	var _arg1 *C.gchar                 // out

	_arg0 = (*C.WebKitApplicationInfo)(gextras.StructNative(unsafe.Pointer(info)))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_application_info_set_name(_arg0, _arg1)
	runtime.KeepAlive(info)
	runtime.KeepAlive(name)
}

// SetVersion: set the application version.
//
// If the application doesn't use the format major.minor.micro you can pass 0 as
// the micro to use major.minor, or pass 0 as both micro and minor to use only
// major number. Any other format must be converted to major.minor.micro so that
// it can be used in version comparisons.
//
// The function takes the following parameters:
//
//   - major version number.
//   - minor version number.
//   - micro version number.
//
func (info *ApplicationInfo) SetVersion(major uint64, minor uint64, micro uint64) {
	var _arg0 *C.WebKitApplicationInfo // out
	var _arg1 C.guint64                // out
	var _arg2 C.guint64                // out
	var _arg3 C.guint64                // out

	_arg0 = (*C.WebKitApplicationInfo)(gextras.StructNative(unsafe.Pointer(info)))
	_arg1 = C.guint64(major)
	_arg2 = C.guint64(minor)
	_arg3 = C.guint64(micro)

	C.webkit_application_info_set_version(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(info)
	runtime.KeepAlive(major)
	runtime.KeepAlive(minor)
	runtime.KeepAlive(micro)
}
