// Code generated by girgen. DO NOT EDIT.

package webkit

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit/webkit.h>
import "C"

// GType values.
var (
	GTypeNotificationPermissionRequest = coreglib.Type(C.webkit_notification_permission_request_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeNotificationPermissionRequest, F: marshalNotificationPermissionRequest},
	})
}

// NotificationPermissionRequestOverrides contains methods that are overridable.
type NotificationPermissionRequestOverrides struct {
}

func defaultNotificationPermissionRequestOverrides(v *NotificationPermissionRequest) NotificationPermissionRequestOverrides {
	return NotificationPermissionRequestOverrides{}
}

// NotificationPermissionRequest: permission request for displaying web
// notifications.
//
// WebKitNotificationPermissionRequest represents a request for permission to
// decide whether WebKit should provide the user with notifications through the
// Web Notification API.
//
// When a WebKitNotificationPermissionRequest is not handled by the user,
// it is denied by default.
type NotificationPermissionRequest struct {
	_ [0]func() // equal guard
	*coreglib.Object

	PermissionRequest
}

var (
	_ coreglib.Objector = (*NotificationPermissionRequest)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*NotificationPermissionRequest, *NotificationPermissionRequestClass, NotificationPermissionRequestOverrides](
		GTypeNotificationPermissionRequest,
		initNotificationPermissionRequestClass,
		wrapNotificationPermissionRequest,
		defaultNotificationPermissionRequestOverrides,
	)
}

func initNotificationPermissionRequestClass(gclass unsafe.Pointer, overrides NotificationPermissionRequestOverrides, classInitFunc func(*NotificationPermissionRequestClass)) {
	if classInitFunc != nil {
		class := (*NotificationPermissionRequestClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapNotificationPermissionRequest(obj *coreglib.Object) *NotificationPermissionRequest {
	return &NotificationPermissionRequest{
		Object: obj,
		PermissionRequest: PermissionRequest{
			Object: obj,
		},
	}
}

func marshalNotificationPermissionRequest(p uintptr) (interface{}, error) {
	return wrapNotificationPermissionRequest(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
