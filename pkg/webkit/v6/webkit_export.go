// Code generated by girgen. DO NOT EDIT.

package webkit

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
)

// #include <stdlib.h>
// #include <webkit/webkit.h>
import "C"

//export _gotk4_webkit6_InputMethodContextClass_committed
func _gotk4_webkit6_InputMethodContextClass_committed(arg0 *C.WebKitInputMethodContext, arg1 *C.char) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[InputMethodContextOverrides](instance0)
	if overrides.Committed == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected InputMethodContextOverrides.Committed, got none")
	}

	var _text string // out

	_text = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))

	overrides.Committed(_text)
}

//export _gotk4_webkit6_InputMethodContextClass_delete_surrounding
func _gotk4_webkit6_InputMethodContextClass_delete_surrounding(arg0 *C.WebKitInputMethodContext, arg1 C.int, arg2 C.guint) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[InputMethodContextOverrides](instance0)
	if overrides.DeleteSurrounding == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected InputMethodContextOverrides.DeleteSurrounding, got none")
	}

	var _offset int  // out
	var _nChars uint // out

	_offset = int(arg1)
	_nChars = uint(arg2)

	overrides.DeleteSurrounding(_offset, _nChars)
}

//export _gotk4_webkit6_InputMethodContextClass_filter_key_event
func _gotk4_webkit6_InputMethodContextClass_filter_key_event(arg0 *C.WebKitInputMethodContext, arg1 *C.GdkEvent) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[InputMethodContextOverrides](instance0)
	if overrides.FilterKeyEvent == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected InputMethodContextOverrides.FilterKeyEvent, got none")
	}

	var _keyEvent gdk.Eventer // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type gdk.Eventer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gdk.Eventer)
			return ok
		})
		rv, ok := casted.(gdk.Eventer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gdk.Eventer")
		}
		_keyEvent = rv
	}

	ok := overrides.FilterKeyEvent(_keyEvent)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_InputMethodContextClass_get_preedit
func _gotk4_webkit6_InputMethodContextClass_get_preedit(arg0 *C.WebKitInputMethodContext, arg1 **C.gchar, arg2 **C.GList, arg3 *C.guint) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[InputMethodContextOverrides](instance0)
	if overrides.Preedit == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected InputMethodContextOverrides.Preedit, got none")
	}

	text, underlines, cursorOffset := overrides.Preedit()

	var _ string
	var _ []*InputMethodUnderline
	var _ uint

	if text != "" {
		*arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	}
	if underlines != nil {
		for i := len(underlines) - 1; i >= 0; i-- {
			src := underlines[i]
			var dst *C.WebKitInputMethodUnderline // out
			dst = (*C.WebKitInputMethodUnderline)(gextras.StructNative(unsafe.Pointer(src)))
			*arg2 = C.g_list_prepend(*arg2, C.gpointer(unsafe.Pointer(dst)))
		}
	}
	*arg3 = C.guint(cursorOffset)
}

//export _gotk4_webkit6_InputMethodContextClass_notify_cursor_area
func _gotk4_webkit6_InputMethodContextClass_notify_cursor_area(arg0 *C.WebKitInputMethodContext, arg1 C.int, arg2 C.int, arg3 C.int, arg4 C.int) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[InputMethodContextOverrides](instance0)
	if overrides.NotifyCursorArea == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected InputMethodContextOverrides.NotifyCursorArea, got none")
	}

	var _x int      // out
	var _y int      // out
	var _width int  // out
	var _height int // out

	_x = int(arg1)
	_y = int(arg2)
	_width = int(arg3)
	_height = int(arg4)

	overrides.NotifyCursorArea(_x, _y, _width, _height)
}

//export _gotk4_webkit6_InputMethodContextClass_notify_focus_in
func _gotk4_webkit6_InputMethodContextClass_notify_focus_in(arg0 *C.WebKitInputMethodContext) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[InputMethodContextOverrides](instance0)
	if overrides.NotifyFocusIn == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected InputMethodContextOverrides.NotifyFocusIn, got none")
	}

	overrides.NotifyFocusIn()
}

//export _gotk4_webkit6_InputMethodContextClass_notify_focus_out
func _gotk4_webkit6_InputMethodContextClass_notify_focus_out(arg0 *C.WebKitInputMethodContext) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[InputMethodContextOverrides](instance0)
	if overrides.NotifyFocusOut == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected InputMethodContextOverrides.NotifyFocusOut, got none")
	}

	overrides.NotifyFocusOut()
}

//export _gotk4_webkit6_InputMethodContextClass_notify_surrounding
func _gotk4_webkit6_InputMethodContextClass_notify_surrounding(arg0 *C.WebKitInputMethodContext, arg1 *C.gchar, arg2 C.guint, arg3 C.guint, arg4 C.guint) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[InputMethodContextOverrides](instance0)
	if overrides.NotifySurrounding == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected InputMethodContextOverrides.NotifySurrounding, got none")
	}

	var _text string         // out
	var _length uint         // out
	var _cursorIndex uint    // out
	var _selectionIndex uint // out

	_text = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	_length = uint(arg2)
	_cursorIndex = uint(arg3)
	_selectionIndex = uint(arg4)

	overrides.NotifySurrounding(_text, _length, _cursorIndex, _selectionIndex)
}

//export _gotk4_webkit6_InputMethodContextClass_preedit_changed
func _gotk4_webkit6_InputMethodContextClass_preedit_changed(arg0 *C.WebKitInputMethodContext) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[InputMethodContextOverrides](instance0)
	if overrides.PreeditChanged == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected InputMethodContextOverrides.PreeditChanged, got none")
	}

	overrides.PreeditChanged()
}

//export _gotk4_webkit6_InputMethodContextClass_preedit_finished
func _gotk4_webkit6_InputMethodContextClass_preedit_finished(arg0 *C.WebKitInputMethodContext) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[InputMethodContextOverrides](instance0)
	if overrides.PreeditFinished == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected InputMethodContextOverrides.PreeditFinished, got none")
	}

	overrides.PreeditFinished()
}

//export _gotk4_webkit6_InputMethodContextClass_preedit_started
func _gotk4_webkit6_InputMethodContextClass_preedit_started(arg0 *C.WebKitInputMethodContext) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[InputMethodContextOverrides](instance0)
	if overrides.PreeditStarted == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected InputMethodContextOverrides.PreeditStarted, got none")
	}

	overrides.PreeditStarted()
}

//export _gotk4_webkit6_InputMethodContextClass_reset
func _gotk4_webkit6_InputMethodContextClass_reset(arg0 *C.WebKitInputMethodContext) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[InputMethodContextOverrides](instance0)
	if overrides.Reset == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected InputMethodContextOverrides.Reset, got none")
	}

	overrides.Reset()
}

//export _gotk4_webkit6_InputMethodContextClass_set_enable_preedit
func _gotk4_webkit6_InputMethodContextClass_set_enable_preedit(arg0 *C.WebKitInputMethodContext, arg1 C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[InputMethodContextOverrides](instance0)
	if overrides.SetEnablePreedit == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected InputMethodContextOverrides.SetEnablePreedit, got none")
	}

	var _enabled bool // out

	if arg1 != 0 {
		_enabled = true
	}

	overrides.SetEnablePreedit(_enabled)
}

//export _gotk4_webkit6_WebViewClass_authenticate
func _gotk4_webkit6_WebViewClass_authenticate(arg0 *C.WebKitWebView, arg1 *C.WebKitAuthenticationRequest) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.Authenticate == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.Authenticate, got none")
	}

	var _request *AuthenticationRequest // out

	_request = wrapAuthenticationRequest(coreglib.Take(unsafe.Pointer(arg1)))

	ok := overrides.Authenticate(_request)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_WebViewClass_close
func _gotk4_webkit6_WebViewClass_close(arg0 *C.WebKitWebView) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.Close == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.Close, got none")
	}

	overrides.Close()
}

//export _gotk4_webkit6_WebViewClass_context_menu
func _gotk4_webkit6_WebViewClass_context_menu(arg0 *C.WebKitWebView, arg1 *C.WebKitContextMenu, arg2 *C.WebKitHitTestResult) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.ContextMenu == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.ContextMenu, got none")
	}

	var _contextMenu *ContextMenu     // out
	var _hitTestResult *HitTestResult // out

	_contextMenu = wrapContextMenu(coreglib.Take(unsafe.Pointer(arg1)))
	_hitTestResult = wrapHitTestResult(coreglib.Take(unsafe.Pointer(arg2)))

	ok := overrides.ContextMenu(_contextMenu, _hitTestResult)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_WebViewClass_context_menu_dismissed
func _gotk4_webkit6_WebViewClass_context_menu_dismissed(arg0 *C.WebKitWebView) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.ContextMenuDismissed == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.ContextMenuDismissed, got none")
	}

	overrides.ContextMenuDismissed()
}

//export _gotk4_webkit6_WebViewClass_decide_policy
func _gotk4_webkit6_WebViewClass_decide_policy(arg0 *C.WebKitWebView, arg1 *C.WebKitPolicyDecision, arg2 C.WebKitPolicyDecisionType) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.DecidePolicy == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.DecidePolicy, got none")
	}

	var _decision PolicyDecisioner // out
	var _typ PolicyDecisionType    // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type webkit.PolicyDecisioner is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(PolicyDecisioner)
			return ok
		})
		rv, ok := casted.(PolicyDecisioner)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching webkit.PolicyDecisioner")
		}
		_decision = rv
	}
	_typ = PolicyDecisionType(arg2)

	ok := overrides.DecidePolicy(_decision, _typ)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_WebViewClass_enter_fullscreen
func _gotk4_webkit6_WebViewClass_enter_fullscreen(arg0 *C.WebKitWebView) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.EnterFullscreen == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.EnterFullscreen, got none")
	}

	ok := overrides.EnterFullscreen()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_WebViewClass_insecure_content_detected
func _gotk4_webkit6_WebViewClass_insecure_content_detected(arg0 *C.WebKitWebView, arg1 C.WebKitInsecureContentEvent) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.InsecureContentDetected == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.InsecureContentDetected, got none")
	}

	var _event InsecureContentEvent // out

	_event = InsecureContentEvent(arg1)

	overrides.InsecureContentDetected(_event)
}

//export _gotk4_webkit6_WebViewClass_leave_fullscreen
func _gotk4_webkit6_WebViewClass_leave_fullscreen(arg0 *C.WebKitWebView) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.LeaveFullscreen == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.LeaveFullscreen, got none")
	}

	ok := overrides.LeaveFullscreen()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_WebViewClass_load_changed
func _gotk4_webkit6_WebViewClass_load_changed(arg0 *C.WebKitWebView, arg1 C.WebKitLoadEvent) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.LoadChanged == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.LoadChanged, got none")
	}

	var _loadEvent LoadEvent // out

	_loadEvent = LoadEvent(arg1)

	overrides.LoadChanged(_loadEvent)
}

//export _gotk4_webkit6_WebViewClass_load_failed
func _gotk4_webkit6_WebViewClass_load_failed(arg0 *C.WebKitWebView, arg1 C.WebKitLoadEvent, arg2 *C.gchar, arg3 *C.GError) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.LoadFailed == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.LoadFailed, got none")
	}

	var _loadEvent LoadEvent // out
	var _failingUri string   // out
	var _err error           // out

	_loadEvent = LoadEvent(arg1)
	_failingUri = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))
	_err = gerror.Take(unsafe.Pointer(arg3))

	ok := overrides.LoadFailed(_loadEvent, _failingUri, _err)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_WebViewClass_load_failed_with_tls_errors
func _gotk4_webkit6_WebViewClass_load_failed_with_tls_errors(arg0 *C.WebKitWebView, arg1 *C.gchar, arg2 *C.GTlsCertificate, arg3 C.GTlsCertificateFlags) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.LoadFailedWithTLSErrors == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.LoadFailedWithTLSErrors, got none")
	}

	var _failingUri string               // out
	var _certificate gio.TLSCertificater // out
	var _errors gio.TLSCertificateFlags  // out

	_failingUri = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	{
		objptr := unsafe.Pointer(arg2)
		if objptr == nil {
			panic("object of type gio.TLSCertificater is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gio.TLSCertificater)
			return ok
		})
		rv, ok := casted.(gio.TLSCertificater)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.TLSCertificater")
		}
		_certificate = rv
	}
	_errors = gio.TLSCertificateFlags(arg3)

	ok := overrides.LoadFailedWithTLSErrors(_failingUri, _certificate, _errors)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_WebViewClass_mouse_target_changed
func _gotk4_webkit6_WebViewClass_mouse_target_changed(arg0 *C.WebKitWebView, arg1 *C.WebKitHitTestResult, arg2 C.guint) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.MouseTargetChanged == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.MouseTargetChanged, got none")
	}

	var _hitTestResult *HitTestResult // out
	var _modifiers uint               // out

	_hitTestResult = wrapHitTestResult(coreglib.Take(unsafe.Pointer(arg1)))
	_modifiers = uint(arg2)

	overrides.MouseTargetChanged(_hitTestResult, _modifiers)
}

//export _gotk4_webkit6_WebViewClass_permission_request
func _gotk4_webkit6_WebViewClass_permission_request(arg0 *C.WebKitWebView, arg1 *C.WebKitPermissionRequest) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.PermissionRequest == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.PermissionRequest, got none")
	}

	var _permissionRequest PermissionRequester // out

	{
		objptr := unsafe.Pointer(arg1)
		if objptr == nil {
			panic("object of type webkit.PermissionRequester is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(PermissionRequester)
			return ok
		})
		rv, ok := casted.(PermissionRequester)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching webkit.PermissionRequester")
		}
		_permissionRequest = rv
	}

	ok := overrides.PermissionRequest(_permissionRequest)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_WebViewClass_print
func _gotk4_webkit6_WebViewClass_print(arg0 *C.WebKitWebView, arg1 *C.WebKitPrintOperation) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.Print == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.Print, got none")
	}

	var _printOperation *PrintOperation // out

	_printOperation = wrapPrintOperation(coreglib.Take(unsafe.Pointer(arg1)))

	ok := overrides.Print(_printOperation)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_WebViewClass_query_permission_state
func _gotk4_webkit6_WebViewClass_query_permission_state(arg0 *C.WebKitWebView, arg1 *C.WebKitPermissionStateQuery) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.QueryPermissionState == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.QueryPermissionState, got none")
	}

	var _query *PermissionStateQuery // out

	_query = (*PermissionStateQuery)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	C.webkit_permission_state_query_ref(arg1)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_query)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.webkit_permission_state_query_unref((*C.WebKitPermissionStateQuery)(intern.C))
		},
	)

	ok := overrides.QueryPermissionState(_query)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_WebViewClass_ready_to_show
func _gotk4_webkit6_WebViewClass_ready_to_show(arg0 *C.WebKitWebView) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.ReadyToShow == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.ReadyToShow, got none")
	}

	overrides.ReadyToShow()
}

//export _gotk4_webkit6_WebViewClass_resource_load_started
func _gotk4_webkit6_WebViewClass_resource_load_started(arg0 *C.WebKitWebView, arg1 *C.WebKitWebResource, arg2 *C.WebKitURIRequest) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.ResourceLoadStarted == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.ResourceLoadStarted, got none")
	}

	var _resource *WebResource // out
	var _request *URIRequest   // out

	_resource = wrapWebResource(coreglib.Take(unsafe.Pointer(arg1)))
	_request = wrapURIRequest(coreglib.Take(unsafe.Pointer(arg2)))

	overrides.ResourceLoadStarted(_resource, _request)
}

//export _gotk4_webkit6_WebViewClass_run_as_modal
func _gotk4_webkit6_WebViewClass_run_as_modal(arg0 *C.WebKitWebView) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.RunAsModal == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.RunAsModal, got none")
	}

	overrides.RunAsModal()
}

//export _gotk4_webkit6_WebViewClass_run_color_chooser
func _gotk4_webkit6_WebViewClass_run_color_chooser(arg0 *C.WebKitWebView, arg1 *C.WebKitColorChooserRequest) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.RunColorChooser == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.RunColorChooser, got none")
	}

	var _request *ColorChooserRequest // out

	_request = wrapColorChooserRequest(coreglib.Take(unsafe.Pointer(arg1)))

	ok := overrides.RunColorChooser(_request)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_WebViewClass_run_file_chooser
func _gotk4_webkit6_WebViewClass_run_file_chooser(arg0 *C.WebKitWebView, arg1 *C.WebKitFileChooserRequest) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.RunFileChooser == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.RunFileChooser, got none")
	}

	var _request *FileChooserRequest // out

	_request = wrapFileChooserRequest(coreglib.Take(unsafe.Pointer(arg1)))

	ok := overrides.RunFileChooser(_request)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_WebViewClass_script_dialog
func _gotk4_webkit6_WebViewClass_script_dialog(arg0 *C.WebKitWebView, arg1 *C.WebKitScriptDialog) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.ScriptDialog == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.ScriptDialog, got none")
	}

	var _dialog *ScriptDialog // out

	_dialog = (*ScriptDialog)(gextras.NewStructNative(unsafe.Pointer(arg1)))
	C.webkit_script_dialog_ref(arg1)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_dialog)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.webkit_script_dialog_unref((*C.WebKitScriptDialog)(intern.C))
		},
	)

	ok := overrides.ScriptDialog(_dialog)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_WebViewClass_show_notification
func _gotk4_webkit6_WebViewClass_show_notification(arg0 *C.WebKitWebView, arg1 *C.WebKitNotification) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.ShowNotification == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.ShowNotification, got none")
	}

	var _notification *Notification // out

	_notification = wrapNotification(coreglib.Take(unsafe.Pointer(arg1)))

	ok := overrides.ShowNotification(_notification)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_WebViewClass_show_option_menu
func _gotk4_webkit6_WebViewClass_show_option_menu(arg0 *C.WebKitWebView, arg1 *C.WebKitOptionMenu, arg2 *C.GdkRectangle) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.ShowOptionMenu == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.ShowOptionMenu, got none")
	}

	var _menu *OptionMenu         // out
	var _rectangle *gdk.Rectangle // out

	_menu = wrapOptionMenu(coreglib.Take(unsafe.Pointer(arg1)))
	_rectangle = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	ok := overrides.ShowOptionMenu(_menu, _rectangle)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_WebViewClass_submit_form
func _gotk4_webkit6_WebViewClass_submit_form(arg0 *C.WebKitWebView, arg1 *C.WebKitFormSubmissionRequest) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.SubmitForm == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.SubmitForm, got none")
	}

	var _request *FormSubmissionRequest // out

	_request = wrapFormSubmissionRequest(coreglib.Take(unsafe.Pointer(arg1)))

	overrides.SubmitForm(_request)
}

//export _gotk4_webkit6_WebViewClass_user_message_received
func _gotk4_webkit6_WebViewClass_user_message_received(arg0 *C.WebKitWebView, arg1 *C.WebKitUserMessage) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.UserMessageReceived == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.UserMessageReceived, got none")
	}

	var _message *UserMessage // out

	_message = wrapUserMessage(coreglib.Take(unsafe.Pointer(arg1)))

	ok := overrides.UserMessageReceived(_message)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_WebViewClass_web_process_crashed
func _gotk4_webkit6_WebViewClass_web_process_crashed(arg0 *C.WebKitWebView) (cret C.gboolean) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.WebProcessCrashed == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.WebProcessCrashed, got none")
	}

	ok := overrides.WebProcessCrashed()

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_WebViewClass_web_process_terminated
func _gotk4_webkit6_WebViewClass_web_process_terminated(arg0 *C.WebKitWebView, arg1 C.WebKitWebProcessTerminationReason) {
	instance0 := coreglib.Take(unsafe.Pointer(arg0))
	overrides := coreglib.OverridesFromObj[WebViewOverrides](instance0)
	if overrides.WebProcessTerminated == nil {
		panic("gotk4: " + instance0.TypeFromInstance().String() + ": expected WebViewOverrides.WebProcessTerminated, got none")
	}

	var _reason WebProcessTerminationReason // out

	_reason = WebProcessTerminationReason(arg1)

	overrides.WebProcessTerminated(_reason)
}
