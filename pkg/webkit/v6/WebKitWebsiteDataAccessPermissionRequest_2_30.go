// Code generated by girgen. DO NOT EDIT.

package webkit

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit/webkit.h>
import "C"

// GType values.
var (
	GTypeWebsiteDataAccessPermissionRequest = coreglib.Type(C.webkit_website_data_access_permission_request_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeWebsiteDataAccessPermissionRequest, F: marshalWebsiteDataAccessPermissionRequest},
	})
}

// WebsiteDataAccessPermissionRequestOverrides contains methods that are overridable.
type WebsiteDataAccessPermissionRequestOverrides struct {
}

func defaultWebsiteDataAccessPermissionRequestOverrides(v *WebsiteDataAccessPermissionRequest) WebsiteDataAccessPermissionRequestOverrides {
	return WebsiteDataAccessPermissionRequestOverrides{}
}

// WebsiteDataAccessPermissionRequest: permission request for accessing website
// data from third-party domains.
//
// WebKitWebsiteDataAccessPermissionRequest represents a request for permission
// to allow a third-party domain access its cookies.
//
// When a WebKitWebsiteDataAccessPermissionRequest is not handled by the user,
// it is denied by default.
type WebsiteDataAccessPermissionRequest struct {
	_ [0]func() // equal guard
	*coreglib.Object

	PermissionRequest
}

var (
	_ coreglib.Objector = (*WebsiteDataAccessPermissionRequest)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*WebsiteDataAccessPermissionRequest, *WebsiteDataAccessPermissionRequestClass, WebsiteDataAccessPermissionRequestOverrides](
		GTypeWebsiteDataAccessPermissionRequest,
		initWebsiteDataAccessPermissionRequestClass,
		wrapWebsiteDataAccessPermissionRequest,
		defaultWebsiteDataAccessPermissionRequestOverrides,
	)
}

func initWebsiteDataAccessPermissionRequestClass(gclass unsafe.Pointer, overrides WebsiteDataAccessPermissionRequestOverrides, classInitFunc func(*WebsiteDataAccessPermissionRequestClass)) {
	if classInitFunc != nil {
		class := (*WebsiteDataAccessPermissionRequestClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapWebsiteDataAccessPermissionRequest(obj *coreglib.Object) *WebsiteDataAccessPermissionRequest {
	return &WebsiteDataAccessPermissionRequest{
		Object: obj,
		PermissionRequest: PermissionRequest{
			Object: obj,
		},
	}
}

func marshalWebsiteDataAccessPermissionRequest(p uintptr) (interface{}, error) {
	return wrapWebsiteDataAccessPermissionRequest(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// CurrentDomain: get the current domain being browsed.
//
// The function returns the following values:
//
//   - utf8: current domain name.
//
func (request *WebsiteDataAccessPermissionRequest) CurrentDomain() string {
	var _arg0 *C.WebKitWebsiteDataAccessPermissionRequest // out
	var _cret *C.char                                     // in

	_arg0 = (*C.WebKitWebsiteDataAccessPermissionRequest)(unsafe.Pointer(coreglib.InternObject(request).Native()))

	_cret = C.webkit_website_data_access_permission_request_get_current_domain(_arg0)
	runtime.KeepAlive(request)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// RequestingDomain: get the domain requesting permission to access its cookies
// while browsing the current domain.
//
// The function returns the following values:
//
//   - utf8: requesting domain name.
//
func (request *WebsiteDataAccessPermissionRequest) RequestingDomain() string {
	var _arg0 *C.WebKitWebsiteDataAccessPermissionRequest // out
	var _cret *C.char                                     // in

	_arg0 = (*C.WebKitWebsiteDataAccessPermissionRequest)(unsafe.Pointer(coreglib.InternObject(request).Native()))

	_cret = C.webkit_website_data_access_permission_request_get_requesting_domain(_arg0)
	runtime.KeepAlive(request)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}
