// Code generated by girgen. DO NOT EDIT.

package webkit

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit/webkit.h>
import "C"

// GType values.
var (
	GTypeSecurityOrigin = coreglib.Type(C.webkit_security_origin_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSecurityOrigin, F: marshalSecurityOrigin},
	})
}

// SecurityOrigin: security boundary for websites.
//
// KitSecurityOrigin is a representation of a security domain defined by
// websites. A security origin consists of a protocol, a hostname, and an
// optional port number.
//
// Resources with the same security origin can generally access each other for
// client-side scripting or database access. When comparing origins, beware
// that if both protocol and host are NULL, the origins should not be treated as
// equal.
//
// An instance of this type is always passed by reference.
type SecurityOrigin struct {
	*securityOrigin
}

// securityOrigin is the struct that's finalized.
type securityOrigin struct {
	native *C.WebKitSecurityOrigin
}

func marshalSecurityOrigin(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &SecurityOrigin{&securityOrigin{(*C.WebKitSecurityOrigin)(b)}}, nil
}

// NewSecurityOrigin constructs a struct SecurityOrigin.
func NewSecurityOrigin(protocol string, host string, port uint16) *SecurityOrigin {
	var _arg1 *C.gchar                // out
	var _arg2 *C.gchar                // out
	var _arg3 C.guint16               // out
	var _cret *C.WebKitSecurityOrigin // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(protocol)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(host)))
	defer C.free(unsafe.Pointer(_arg2))
	_arg3 = C.guint16(port)

	_cret = C.webkit_security_origin_new(_arg1, _arg2, _arg3)
	runtime.KeepAlive(protocol)
	runtime.KeepAlive(host)
	runtime.KeepAlive(port)

	var _securityOrigin *SecurityOrigin // out

	_securityOrigin = (*SecurityOrigin)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_securityOrigin)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.webkit_security_origin_unref((*C.WebKitSecurityOrigin)(intern.C))
		},
	)

	return _securityOrigin
}

// NewSecurityOriginForURI constructs a struct SecurityOrigin.
func NewSecurityOriginForURI(uri string) *SecurityOrigin {
	var _arg1 *C.gchar                // out
	var _cret *C.WebKitSecurityOrigin // in

	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.webkit_security_origin_new_for_uri(_arg1)
	runtime.KeepAlive(uri)

	var _securityOrigin *SecurityOrigin // out

	_securityOrigin = (*SecurityOrigin)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_securityOrigin)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.webkit_security_origin_unref((*C.WebKitSecurityOrigin)(intern.C))
		},
	)

	return _securityOrigin
}

// Host gets the hostname of origin.
//
// It is reasonable for this to be NULL if its protocol does not require a host
// component.
//
// The function returns the following values:
//
//   - utf8 (optional): host of the KitSecurityOrigin.
//
func (origin *SecurityOrigin) Host() string {
	var _arg0 *C.WebKitSecurityOrigin // out
	var _cret *C.gchar                // in

	_arg0 = (*C.WebKitSecurityOrigin)(gextras.StructNative(unsafe.Pointer(origin)))

	_cret = C.webkit_security_origin_get_host(_arg0)
	runtime.KeepAlive(origin)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// Port gets the port of origin.
//
// This function will always return 0 if the port is the default port for
// the given protocol. For example, http://example.com has the same security
// origin as http://example.com:80, and this function will return 0 for a
// KitSecurityOrigin constructed from either URI.
//
// The function returns the following values:
//
//   - guint16: port of the KitSecurityOrigin.
//
func (origin *SecurityOrigin) Port() uint16 {
	var _arg0 *C.WebKitSecurityOrigin // out
	var _cret C.guint16               // in

	_arg0 = (*C.WebKitSecurityOrigin)(gextras.StructNative(unsafe.Pointer(origin)))

	_cret = C.webkit_security_origin_get_port(_arg0)
	runtime.KeepAlive(origin)

	var _guint16 uint16 // out

	_guint16 = uint16(_cret)

	return _guint16
}

// Protocol gets the protocol of origin.
//
// The function returns the following values:
//
//   - utf8 (optional): protocol of the KitSecurityOrigin.
//
func (origin *SecurityOrigin) Protocol() string {
	var _arg0 *C.WebKitSecurityOrigin // out
	var _cret *C.gchar                // in

	_arg0 = (*C.WebKitSecurityOrigin)(gextras.StructNative(unsafe.Pointer(origin)))

	_cret = C.webkit_security_origin_get_protocol(_arg0)
	runtime.KeepAlive(origin)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// String gets a string representation of origin.
//
// The string representation is a valid URI with only protocol, host, and port
// components, or NULL.
//
// The function returns the following values:
//
//   - utf8 (optional): URI representing origin.
//
func (origin *SecurityOrigin) String() string {
	var _arg0 *C.WebKitSecurityOrigin // out
	var _cret *C.gchar                // in

	_arg0 = (*C.WebKitSecurityOrigin)(gextras.StructNative(unsafe.Pointer(origin)))

	_cret = C.webkit_security_origin_to_string(_arg0)
	runtime.KeepAlive(origin)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}
