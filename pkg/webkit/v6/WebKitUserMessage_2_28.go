// Code generated by girgen. DO NOT EDIT.

package webkit

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit/webkit.h>
import "C"

// GType values.
var (
	GTypeUserMessageError = coreglib.Type(C.webkit_user_message_error_get_type())
	GTypeUserMessage      = coreglib.Type(C.webkit_user_message_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeUserMessageError, F: marshalUserMessageError},
		coreglib.TypeMarshaler{T: GTypeUserMessage, F: marshalUserMessage},
	})
}

// UserMessageError: enum values used to denote errors happening when sending
// user messages.
type UserMessageError C.gint

const (
	// UserMessageUnhandledMessage: message was not handled by the receiver.
	UserMessageUnhandledMessage UserMessageError = iota
)

func marshalUserMessageError(p uintptr) (interface{}, error) {
	return UserMessageError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for UserMessageError.
func (u UserMessageError) String() string {
	switch u {
	case UserMessageUnhandledMessage:
		return "Message"
	default:
		return fmt.Sprintf("UserMessageError(%d)", u)
	}
}

// UserMessageOverrides contains methods that are overridable.
type UserMessageOverrides struct {
}

func defaultUserMessageOverrides(v *UserMessage) UserMessageOverrides {
	return UserMessageOverrides{}
}

// UserMessage: message that can be sent between the UI process and web process
// extensions.
//
// A WebKitUserMessage is a message that can be used for the communication
// between the UI process and web process extensions. A WebKitUserMessage always
// has a name, and it can also include parameters and UNIX file descriptors.
// Messages can be sent from a KitWebContext to all web process extensions,
// from a web process extension to its corresponding KitWebContext, and from
// a KitWebView to its corresponding KitWebPage (and vice versa). One to one
// messages can be replied to directly with webkit_user_message_send_reply().
type UserMessage struct {
	_ [0]func() // equal guard
	coreglib.InitiallyUnowned
}

var ()

func init() {
	coreglib.RegisterClassInfo[*UserMessage, *UserMessageClass, UserMessageOverrides](
		GTypeUserMessage,
		initUserMessageClass,
		wrapUserMessage,
		defaultUserMessageOverrides,
	)
}

func initUserMessageClass(gclass unsafe.Pointer, overrides UserMessageOverrides, classInitFunc func(*UserMessageClass)) {
	if classInitFunc != nil {
		class := (*UserMessageClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapUserMessage(obj *coreglib.Object) *UserMessage {
	return &UserMessage{
		InitiallyUnowned: coreglib.InitiallyUnowned{
			Object: obj,
		},
	}
}

func marshalUserMessage(p uintptr) (interface{}, error) {
	return wrapUserMessage(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewUserMessage: create a new KitUserMessage with name.
//
// The function takes the following parameters:
//
//   - name: message name.
//   - parameters (optional): message parameters as a #GVariant, or NULL.
//
// The function returns the following values:
//
//   - userMessage: newly created KitUserMessage object.
//
func NewUserMessage(name string, parameters *glib.Variant) *UserMessage {
	var _arg1 *C.char              // out
	var _arg2 *C.GVariant          // out
	var _cret *C.WebKitUserMessage // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(name)))
	defer C.free(unsafe.Pointer(_arg1))
	if parameters != nil {
		_arg2 = (*C.GVariant)(gextras.StructNative(unsafe.Pointer(parameters)))
	}

	_cret = C.webkit_user_message_new(_arg1, _arg2)
	runtime.KeepAlive(name)
	runtime.KeepAlive(parameters)

	var _userMessage *UserMessage // out

	_userMessage = wrapUserMessage(coreglib.Take(unsafe.Pointer(_cret)))

	return _userMessage
}

// Name: get the message name.
//
// The function returns the following values:
//
//   - utf8: message name.
//
func (message *UserMessage) Name() string {
	var _arg0 *C.WebKitUserMessage // out
	var _cret *C.char              // in

	_arg0 = (*C.WebKitUserMessage)(unsafe.Pointer(coreglib.InternObject(message).Native()))

	_cret = C.webkit_user_message_get_name(_arg0)
	runtime.KeepAlive(message)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Parameters: get the message parameters.
//
// The function returns the following values:
//
//   - variant (optional): message parameters.
//
func (message *UserMessage) Parameters() *glib.Variant {
	var _arg0 *C.WebKitUserMessage // out
	var _cret *C.GVariant          // in

	_arg0 = (*C.WebKitUserMessage)(unsafe.Pointer(coreglib.InternObject(message).Native()))

	_cret = C.webkit_user_message_get_parameters(_arg0)
	runtime.KeepAlive(message)

	var _variant *glib.Variant // out

	if _cret != nil {
		_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		C.g_variant_ref(_cret)
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_variant)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.g_variant_unref((*C.GVariant)(intern.C))
			},
		)
	}

	return _variant
}

// SendReply: send a reply to an user message.
//
// If reply is floating, it's consumed. You can only send a reply to a
// KitUserMessage that has been received.
//
// The function takes the following parameters:
//
//   - reply to send as reply.
//
func (message *UserMessage) SendReply(reply *UserMessage) {
	var _arg0 *C.WebKitUserMessage // out
	var _arg1 *C.WebKitUserMessage // out

	_arg0 = (*C.WebKitUserMessage)(unsafe.Pointer(coreglib.InternObject(message).Native()))
	_arg1 = (*C.WebKitUserMessage)(unsafe.Pointer(coreglib.InternObject(reply).Native()))

	C.webkit_user_message_send_reply(_arg0, _arg1)
	runtime.KeepAlive(message)
	runtime.KeepAlive(reply)
}
