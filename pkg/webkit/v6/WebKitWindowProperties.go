// Code generated by girgen. DO NOT EDIT.

package webkit

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit/webkit.h>
import "C"

// GType values.
var (
	GTypeWindowProperties = coreglib.Type(C.webkit_window_properties_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeWindowProperties, F: marshalWindowProperties},
	})
}

// WindowPropertiesOverrides contains methods that are overridable.
type WindowPropertiesOverrides struct {
}

func defaultWindowPropertiesOverrides(v *WindowProperties) WindowPropertiesOverrides {
	return WindowPropertiesOverrides{}
}

// WindowProperties: window properties of a KitWebView.
//
// The content of a KitWebView can request to change certain properties of the
// window containing the view. This can include the x, y position of the window,
// the width and height but also if a toolbar, scrollbar, statusbar, locationbar
// should be visible to the user, and the request to show the KitWebView
// fullscreen.
//
// The KitWebView::ready-to-show signal handler is the proper place to apply the
// initial window properties. Then you can monitor the KitWindowProperties by
// connecting to ::notify signal.
//
//    static void ready_to_show_cb (WebKitWebView *web_view, gpointer user_data)
//    {
//        GtkWidget *window;
//        WebKitWindowProperties *window_properties;
//        gboolean visible;
//
//        // Create the window to contain the WebKitWebView.
//        window = browser_window_new ();
//        gtk_container_add (GTK_CONTAINER (window), GTK_WIDGET (web_view));
//        gtk_widget_show (GTK_WIDGET (web_view));
//
//        // Get the WebKitWindowProperties of the web view and monitor it.
//        window_properties = webkit_web_view_get_window_properties (web_view);
//        g_signal_connect (window_properties, "notify::geometry",
//                          G_CALLBACK (window_geometry_changed), window);
//        g_signal_connect (window_properties, "notify::toolbar-visible",
//                          G_CALLBACK (window_toolbar_visibility_changed), window);
//        g_signal_connect (window_properties, "notify::menubar-visible",
//                          G_CALLBACK (window_menubar_visibility_changed), window);
//
//        // Apply the window properties before showing the window.
//        visible = webkit_window_properties_get_toolbar_visible (window_properties);
//        browser_window_set_toolbar_visible (BROWSER_WINDOW (window), visible);
//        visible = webkit_window_properties_get_menubar_visible (window_properties);
//        browser_window_set_menubar_visible (BROWSER_WINDOW (window), visible);
//
//        if (webkit_window_properties_get_fullscreen (window_properties)) {
//            gtk_window_fullscreen (GTK_WINDOW (window));
//        } else {
//            GdkRectangle geometry;
//
//            gtk_window_set_resizable (GTK_WINDOW (window),
//                                      webkit_window_properties_get_resizable (window_properties));
//            webkit_window_properties_get_geometry (window_properties, &geometry);
//            gtk_window_move (GTK_WINDOW (window), geometry.x, geometry.y);
//            gtk_window_resize (GTK_WINDOW (window), geometry.width, geometry.height);
//        }
//
//        gtk_widget_show (window);
//    }.
type WindowProperties struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*WindowProperties)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*WindowProperties, *WindowPropertiesClass, WindowPropertiesOverrides](
		GTypeWindowProperties,
		initWindowPropertiesClass,
		wrapWindowProperties,
		defaultWindowPropertiesOverrides,
	)
}

func initWindowPropertiesClass(gclass unsafe.Pointer, overrides WindowPropertiesOverrides, classInitFunc func(*WindowPropertiesClass)) {
	if classInitFunc != nil {
		class := (*WindowPropertiesClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapWindowProperties(obj *coreglib.Object) *WindowProperties {
	return &WindowProperties{
		Object: obj,
	}
}

func marshalWindowProperties(p uintptr) (interface{}, error) {
	return wrapWindowProperties(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// Fullscreen: get whether the window should be shown in fullscreen state or
// not.
//
// The function returns the following values:
//
//   - ok: TRUE if the window should be fullscreen or FALSE otherwise.
//
func (windowProperties *WindowProperties) Fullscreen() bool {
	var _arg0 *C.WebKitWindowProperties // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitWindowProperties)(unsafe.Pointer(coreglib.InternObject(windowProperties).Native()))

	_cret = C.webkit_window_properties_get_fullscreen(_arg0)
	runtime.KeepAlive(windowProperties)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Geometry: get the geometry the window should have on the screen when shown.
//
// The function returns the following values:
//
//   - geometry: return location for the window geometry.
//
func (windowProperties *WindowProperties) Geometry() *gdk.Rectangle {
	var _arg0 *C.WebKitWindowProperties // out
	var _arg1 C.GdkRectangle            // in

	_arg0 = (*C.WebKitWindowProperties)(unsafe.Pointer(coreglib.InternObject(windowProperties).Native()))

	C.webkit_window_properties_get_geometry(_arg0, &_arg1)
	runtime.KeepAlive(windowProperties)

	var _geometry *gdk.Rectangle // out

	_geometry = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _geometry
}

// LocationbarVisible: get whether the window should have the locationbar
// visible or not.
//
// The function returns the following values:
//
//   - ok: TRUE if locationbar should be visible or FALSE otherwise.
//
func (windowProperties *WindowProperties) LocationbarVisible() bool {
	var _arg0 *C.WebKitWindowProperties // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitWindowProperties)(unsafe.Pointer(coreglib.InternObject(windowProperties).Native()))

	_cret = C.webkit_window_properties_get_locationbar_visible(_arg0)
	runtime.KeepAlive(windowProperties)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// MenubarVisible: get whether the window should have the menubar visible or
// not.
//
// The function returns the following values:
//
//   - ok: TRUE if menubar should be visible or FALSE otherwise.
//
func (windowProperties *WindowProperties) MenubarVisible() bool {
	var _arg0 *C.WebKitWindowProperties // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitWindowProperties)(unsafe.Pointer(coreglib.InternObject(windowProperties).Native()))

	_cret = C.webkit_window_properties_get_menubar_visible(_arg0)
	runtime.KeepAlive(windowProperties)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Resizable: get whether the window should be resizable by the user or not.
//
// The function returns the following values:
//
//   - ok: TRUE if the window should be resizable or FALSE otherwise.
//
func (windowProperties *WindowProperties) Resizable() bool {
	var _arg0 *C.WebKitWindowProperties // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitWindowProperties)(unsafe.Pointer(coreglib.InternObject(windowProperties).Native()))

	_cret = C.webkit_window_properties_get_resizable(_arg0)
	runtime.KeepAlive(windowProperties)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ScrollbarsVisible: get whether the window should have the scrollbars visible
// or not.
//
// The function returns the following values:
//
//   - ok: TRUE if scrollbars should be visible or FALSE otherwise.
//
func (windowProperties *WindowProperties) ScrollbarsVisible() bool {
	var _arg0 *C.WebKitWindowProperties // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitWindowProperties)(unsafe.Pointer(coreglib.InternObject(windowProperties).Native()))

	_cret = C.webkit_window_properties_get_scrollbars_visible(_arg0)
	runtime.KeepAlive(windowProperties)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// StatusbarVisible: get whether the window should have the statusbar visible or
// not.
//
// The function returns the following values:
//
//   - ok: TRUE if statusbar should be visible or FALSE otherwise.
//
func (windowProperties *WindowProperties) StatusbarVisible() bool {
	var _arg0 *C.WebKitWindowProperties // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitWindowProperties)(unsafe.Pointer(coreglib.InternObject(windowProperties).Native()))

	_cret = C.webkit_window_properties_get_statusbar_visible(_arg0)
	runtime.KeepAlive(windowProperties)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ToolbarVisible: get whether the window should have the toolbar visible or
// not.
//
// The function returns the following values:
//
//   - ok: TRUE if toolbar should be visible or FALSE otherwise.
//
func (windowProperties *WindowProperties) ToolbarVisible() bool {
	var _arg0 *C.WebKitWindowProperties // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitWindowProperties)(unsafe.Pointer(coreglib.InternObject(windowProperties).Native()))

	_cret = C.webkit_window_properties_get_toolbar_visible(_arg0)
	runtime.KeepAlive(windowProperties)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// WindowPropertiesClass: instance of this type is always passed by reference.
type WindowPropertiesClass struct {
	*windowPropertiesClass
}

// windowPropertiesClass is the struct that's finalized.
type windowPropertiesClass struct {
	native *C.WebKitWindowPropertiesClass
}
