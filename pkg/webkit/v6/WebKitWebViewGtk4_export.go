// Code generated by girgen. DO NOT EDIT.

package webkit

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
)

// #include <stdlib.h>
// #include <webkit/webkit.h>
import "C"

//export _gotk4_webkit6_WebView_ConnectContextMenu
func _gotk4_webkit6_WebView_ConnectContextMenu(arg0 C.gpointer, arg1 *C.WebKitContextMenu, arg2 *C.WebKitHitTestResult, arg3 C.guintptr) (cret C.gboolean) {
	var f func(contextMenu *ContextMenu, hitTestResult *HitTestResult) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(contextMenu *ContextMenu, hitTestResult *HitTestResult) (ok bool))
	}

	var _contextMenu *ContextMenu     // out
	var _hitTestResult *HitTestResult // out

	_contextMenu = wrapContextMenu(coreglib.Take(unsafe.Pointer(arg1)))
	_hitTestResult = wrapHitTestResult(coreglib.Take(unsafe.Pointer(arg2)))

	ok := f(_contextMenu, _hitTestResult)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit6_WebView_ConnectShowOptionMenu
func _gotk4_webkit6_WebView_ConnectShowOptionMenu(arg0 C.gpointer, arg1 *C.WebKitOptionMenu, arg2 *C.GdkRectangle, arg3 C.guintptr) (cret C.gboolean) {
	var f func(menu *OptionMenu, rectangle *gdk.Rectangle) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(menu *OptionMenu, rectangle *gdk.Rectangle) (ok bool))
	}

	var _menu *OptionMenu         // out
	var _rectangle *gdk.Rectangle // out

	_menu = wrapOptionMenu(coreglib.Take(unsafe.Pointer(arg1)))
	_rectangle = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	ok := f(_menu, _rectangle)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}
