// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"strings"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

// GType values.
var (
	GTypeWebsiteDataTypes = coreglib.Type(C.webkit_website_data_types_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeWebsiteDataTypes, F: marshalWebsiteDataTypes},
	})
}

// WebsiteDataTypes: enum values with flags representing types of Website data.
type WebsiteDataTypes C.guint

const (
	// WebsiteDataMemoryCache: memory cache.
	WebsiteDataMemoryCache WebsiteDataTypes = 0b1
	// WebsiteDataDiskCache: HTTP disk cache.
	WebsiteDataDiskCache WebsiteDataTypes = 0b10
	// WebsiteDataOfflineApplicationCache: offline web application cache.
	WebsiteDataOfflineApplicationCache WebsiteDataTypes = 0b100
	// WebsiteDataSessionStorage: session storage data.
	WebsiteDataSessionStorage WebsiteDataTypes = 0b1000
	// WebsiteDataLocalStorage: local storage data.
	WebsiteDataLocalStorage WebsiteDataTypes = 0b10000
	// WebsiteDataWebsqlDatabases: webSQL databases. Deprecated 2.24.
	WebsiteDataWebsqlDatabases WebsiteDataTypes = 0b100000
	// WebsiteDataIndexeddbDatabases: indexedDB databases.
	WebsiteDataIndexeddbDatabases WebsiteDataTypes = 0b1000000
	// WebsiteDataPluginData plugins data. Deprecated 2.32.
	WebsiteDataPluginData WebsiteDataTypes = 0b10000000
	// WebsiteDataCookies: cookies.
	WebsiteDataCookies WebsiteDataTypes = 0b100000000
	// WebsiteDataDeviceIDHashSalt: hash salt used to generate the device ids
	// used by webpages. Since 2.24.
	WebsiteDataDeviceIDHashSalt WebsiteDataTypes = 0b1000000000
	// WebsiteDataHstsCache: HSTS cache. Since 2.26.
	WebsiteDataHstsCache WebsiteDataTypes = 0b10000000000
	// WebsiteDataItp: intelligent Tracking Prevention data. Since 2.30.
	WebsiteDataItp WebsiteDataTypes = 0b100000000000
	// WebsiteDataServiceWorkerRegistrations: service worker registrations.
	// Since 2.30.
	WebsiteDataServiceWorkerRegistrations WebsiteDataTypes = 0b1000000000000
	// WebsiteDataDomCache: DOM (CacheStorage) cache. Since 2.30.
	WebsiteDataDomCache WebsiteDataTypes = 0b10000000000000
	// WebsiteDataAll: all types.
	WebsiteDataAll WebsiteDataTypes = 0b11111111111111
)

func marshalWebsiteDataTypes(p uintptr) (interface{}, error) {
	return WebsiteDataTypes(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for WebsiteDataTypes.
func (w WebsiteDataTypes) String() string {
	if w == 0 {
		return "WebsiteDataTypes(0)"
	}

	var builder strings.Builder
	builder.Grow(256)

	for w != 0 {
		next := w & (w - 1)
		bit := w - next

		switch bit {
		case WebsiteDataMemoryCache:
			builder.WriteString("MemoryCache|")
		case WebsiteDataDiskCache:
			builder.WriteString("DiskCache|")
		case WebsiteDataOfflineApplicationCache:
			builder.WriteString("OfflineApplicationCache|")
		case WebsiteDataSessionStorage:
			builder.WriteString("SessionStorage|")
		case WebsiteDataLocalStorage:
			builder.WriteString("LocalStorage|")
		case WebsiteDataWebsqlDatabases:
			builder.WriteString("WebsqlDatabases|")
		case WebsiteDataIndexeddbDatabases:
			builder.WriteString("IndexeddbDatabases|")
		case WebsiteDataPluginData:
			builder.WriteString("PluginData|")
		case WebsiteDataCookies:
			builder.WriteString("Cookies|")
		case WebsiteDataDeviceIDHashSalt:
			builder.WriteString("DeviceIDHashSalt|")
		case WebsiteDataHstsCache:
			builder.WriteString("HstsCache|")
		case WebsiteDataItp:
			builder.WriteString("Itp|")
		case WebsiteDataServiceWorkerRegistrations:
			builder.WriteString("ServiceWorkerRegistrations|")
		case WebsiteDataDomCache:
			builder.WriteString("DomCache|")
		case WebsiteDataAll:
			builder.WriteString("All|")
		default:
			builder.WriteString(fmt.Sprintf("WebsiteDataTypes(0b%b)|", bit))
		}

		w = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if w contains other.
func (w WebsiteDataTypes) Has(other WebsiteDataTypes) bool {
	return (w & other) == other
}
