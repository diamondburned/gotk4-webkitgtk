// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <webkit2/webkit2.h>
import "C"

//export _gotk4_webkit24_WebView_ConnectContextMenu
func _gotk4_webkit24_WebView_ConnectContextMenu(arg0 C.gpointer, arg1 *C.WebKitContextMenu, arg2 C.GdkEvent, arg3 *C.WebKitHitTestResult, arg4 C.guintptr) (cret C.gboolean) {
	var f func(contextMenu *ContextMenu, event *gdk.Event, hitTestResult *HitTestResult) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg4))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(contextMenu *ContextMenu, event *gdk.Event, hitTestResult *HitTestResult) (ok bool))
	}

	var _contextMenu *ContextMenu     // out
	var _event *gdk.Event             // out
	var _hitTestResult *HitTestResult // out

	_contextMenu = wrapContextMenu(coreglib.Take(unsafe.Pointer(arg1)))
	{
		v := (*gdk.Event)(gextras.NewStructNative(unsafe.Pointer((&arg2))))
		v = gdk.CopyEventer(v)
		_event = v
	}
	_hitTestResult = wrapHitTestResult(coreglib.Take(unsafe.Pointer(arg3)))

	ok := f(_contextMenu, _event, _hitTestResult)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}

//export _gotk4_webkit24_WebView_ConnectShowOptionMenu
func _gotk4_webkit24_WebView_ConnectShowOptionMenu(arg0 C.gpointer, arg1 *C.WebKitOptionMenu, arg2 C.GdkEvent, arg3 *C.GdkRectangle, arg4 C.guintptr) (cret C.gboolean) {
	var f func(menu *OptionMenu, event *gdk.Event, rectangle *gdk.Rectangle) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg4))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(menu *OptionMenu, event *gdk.Event, rectangle *gdk.Rectangle) (ok bool))
	}

	var _menu *OptionMenu         // out
	var _event *gdk.Event         // out
	var _rectangle *gdk.Rectangle // out

	_menu = wrapOptionMenu(coreglib.Take(unsafe.Pointer(arg1)))
	{
		v := (*gdk.Event)(gextras.NewStructNative(unsafe.Pointer((&arg2))))
		v = gdk.CopyEventer(v)
		_event = v
	}
	_rectangle = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg3)))

	ok := f(_menu, _event, _rectangle)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}
