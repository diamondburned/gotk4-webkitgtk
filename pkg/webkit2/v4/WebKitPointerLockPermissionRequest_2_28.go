// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

// GType values.
var (
	GTypePointerLockPermissionRequest = coreglib.Type(C.webkit_pointer_lock_permission_request_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypePointerLockPermissionRequest, F: marshalPointerLockPermissionRequest},
	})
}

// PointerLockPermissionRequestOverrides contains methods that are overridable.
type PointerLockPermissionRequestOverrides struct {
}

func defaultPointerLockPermissionRequestOverrides(v *PointerLockPermissionRequest) PointerLockPermissionRequestOverrides {
	return PointerLockPermissionRequestOverrides{}
}

// PointerLockPermissionRequest: permission request for locking the pointer.
//
// WebKitPointerLockPermissionRequest represents a request for permission to
// decide whether WebKit can lock the pointer device when requested by web
// content.
//
// When a WebKitPointerLockPermissionRequest is not handled by the user,
// it is allowed by default.
type PointerLockPermissionRequest struct {
	_ [0]func() // equal guard
	*coreglib.Object

	PermissionRequest
}

var (
	_ coreglib.Objector = (*PointerLockPermissionRequest)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*PointerLockPermissionRequest, *PointerLockPermissionRequestClass, PointerLockPermissionRequestOverrides](
		GTypePointerLockPermissionRequest,
		initPointerLockPermissionRequestClass,
		wrapPointerLockPermissionRequest,
		defaultPointerLockPermissionRequestOverrides,
	)
}

func initPointerLockPermissionRequestClass(gclass unsafe.Pointer, overrides PointerLockPermissionRequestOverrides, classInitFunc func(*PointerLockPermissionRequestClass)) {
	if classInitFunc != nil {
		class := (*PointerLockPermissionRequestClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapPointerLockPermissionRequest(obj *coreglib.Object) *PointerLockPermissionRequest {
	return &PointerLockPermissionRequest{
		Object: obj,
		PermissionRequest: PermissionRequest{
			Object: obj,
		},
	}
}

func marshalPointerLockPermissionRequest(p uintptr) (interface{}, error) {
	return wrapPointerLockPermissionRequest(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
