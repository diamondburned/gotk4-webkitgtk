// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4-webkitgtk/pkg/javascriptcore/v4"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

// GType values.
var (
	GTypeJavascriptResult = coreglib.Type(C.webkit_javascript_result_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeJavascriptResult, F: marshalJavascriptResult},
	})
}

// JavascriptResult: result of JavaScript evaluation in a web view.
//
// An instance of this type is always passed by reference.
type JavascriptResult struct {
	*javascriptResult
}

// javascriptResult is the struct that's finalized.
type javascriptResult struct {
	native *C.WebKitJavascriptResult
}

func marshalJavascriptResult(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &JavascriptResult{&javascriptResult{(*C.WebKitJavascriptResult)(b)}}, nil
}

// JsValue: get the CValue of js_result.
//
// The function returns the following values:
//
//   - value of the KitJavascriptResult.
//
func (jsResult *JavascriptResult) JsValue() *javascriptcore.Value {
	var _arg0 *C.WebKitJavascriptResult // out
	var _cret *C.JSCValue               // in

	_arg0 = (*C.WebKitJavascriptResult)(gextras.StructNative(unsafe.Pointer(jsResult)))

	_cret = C.webkit_javascript_result_get_js_value(_arg0)
	runtime.KeepAlive(jsResult)

	var _value *javascriptcore.Value // out

	{
		obj := coreglib.Take(unsafe.Pointer(_cret))
		_value = &javascriptcore.Value{
			Object: obj,
		}
	}

	return _value
}
