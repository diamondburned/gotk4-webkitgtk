// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

// GType values.
var (
	GTypeDownloadError   = coreglib.Type(C.webkit_download_error_get_type())
	GTypeJavascriptError = coreglib.Type(C.webkit_javascript_error_get_type())
	GTypeNetworkError    = coreglib.Type(C.webkit_network_error_get_type())
	GTypePluginError     = coreglib.Type(C.webkit_plugin_error_get_type())
	GTypePolicyError     = coreglib.Type(C.webkit_policy_error_get_type())
	GTypePrintError      = coreglib.Type(C.webkit_print_error_get_type())
	GTypeSnapshotError   = coreglib.Type(C.webkit_snapshot_error_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeDownloadError, F: marshalDownloadError},
		coreglib.TypeMarshaler{T: GTypeJavascriptError, F: marshalJavascriptError},
		coreglib.TypeMarshaler{T: GTypeNetworkError, F: marshalNetworkError},
		coreglib.TypeMarshaler{T: GTypePluginError, F: marshalPluginError},
		coreglib.TypeMarshaler{T: GTypePolicyError, F: marshalPolicyError},
		coreglib.TypeMarshaler{T: GTypePrintError, F: marshalPrintError},
		coreglib.TypeMarshaler{T: GTypeSnapshotError, F: marshalSnapshotError},
	})
}

// DownloadError: enum values used to denote the various download errors.
type DownloadError C.gint

const (
	// DownloadErrorNetwork: download failure due to network error.
	DownloadErrorNetwork DownloadError = 499
	// DownloadErrorCancelledByUser: download was cancelled by user.
	DownloadErrorCancelledByUser DownloadError = 400
	// DownloadErrorDestination: download failure due to destination error.
	DownloadErrorDestination DownloadError = 401
)

func marshalDownloadError(p uintptr) (interface{}, error) {
	return DownloadError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for DownloadError.
func (d DownloadError) String() string {
	switch d {
	case DownloadErrorNetwork:
		return "Network"
	case DownloadErrorCancelledByUser:
		return "CancelledByUser"
	case DownloadErrorDestination:
		return "Destination"
	default:
		return fmt.Sprintf("DownloadError(%d)", d)
	}
}

// DownloadErrorQuark gets the quark for the domain of download errors.
//
// The function returns the following values:
//
//   - quark: download error domain.
//
func DownloadErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_download_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)
	type _ = glib.Quark
	type _ = uint32

	return _quark
}

// JavascriptError: enum values used to denote errors happening when executing
// JavaScript.
type JavascriptError C.gint

const (
	// JavascriptErrorScriptFailed: exception was raised in JavaScript
	// execution.
	JavascriptErrorScriptFailed JavascriptError = 699
	// JavascriptErrorInvalidParameter: unsupported parameter has been used to
	// call and async function from API. Since 2.40.
	JavascriptErrorInvalidParameter JavascriptError = 600
	// JavascriptErrorInvalidResult: result of JavaScript execution could not be
	// returned. Since 2.40.
	JavascriptErrorInvalidResult JavascriptError = 601
)

func marshalJavascriptError(p uintptr) (interface{}, error) {
	return JavascriptError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for JavascriptError.
func (j JavascriptError) String() string {
	switch j {
	case JavascriptErrorScriptFailed:
		return "ScriptFailed"
	case JavascriptErrorInvalidParameter:
		return "InvalidParameter"
	case JavascriptErrorInvalidResult:
		return "InvalidResult"
	default:
		return fmt.Sprintf("JavascriptError(%d)", j)
	}
}

// JavascriptErrorQuark gets the quark for the domain of JavaScript errors.
//
// The function returns the following values:
//
//   - quark: javaScript error domain.
//
func JavascriptErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_javascript_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)
	type _ = glib.Quark
	type _ = uint32

	return _quark
}

// NetworkError: enum values used to denote the various network errors.
type NetworkError C.gint

const (
	// NetworkErrorFailed: generic load failure.
	NetworkErrorFailed NetworkError = 399
	// NetworkErrorTransport: load failure due to transport error.
	NetworkErrorTransport NetworkError = 300
	// NetworkErrorUnknownProtocol: load failure due to unknown protocol.
	NetworkErrorUnknownProtocol NetworkError = 301
	// NetworkErrorCancelled: load failure due to cancellation.
	NetworkErrorCancelled NetworkError = 302
	// NetworkErrorFileDoesNotExist: load failure due to missing file.
	NetworkErrorFileDoesNotExist NetworkError = 303
)

func marshalNetworkError(p uintptr) (interface{}, error) {
	return NetworkError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for NetworkError.
func (n NetworkError) String() string {
	switch n {
	case NetworkErrorFailed:
		return "Failed"
	case NetworkErrorTransport:
		return "Transport"
	case NetworkErrorUnknownProtocol:
		return "UnknownProtocol"
	case NetworkErrorCancelled:
		return "Cancelled"
	case NetworkErrorFileDoesNotExist:
		return "FileDoesNotExist"
	default:
		return fmt.Sprintf("NetworkError(%d)", n)
	}
}

// NetworkErrorQuark gets the quark for the domain of networking errors.
//
// The function returns the following values:
//
//   - quark: network error domain.
//
func NetworkErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_network_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)
	type _ = glib.Quark
	type _ = uint32

	return _quark
}

// PluginError: enum values used to denote the various plugin and media errors.
type PluginError C.gint

const (
	// PluginErrorFailed: generic plugin load failure. Deprecated 2.32.
	PluginErrorFailed PluginError = 299
	// PluginErrorCannotFindPlugin: load failure due to missing plugin.
	// Deprecated 2.32.
	PluginErrorCannotFindPlugin PluginError = 200
	// PluginErrorCannotLoadPlugin: load failure due to inability to load
	// plugin. Deprecated 2.32.
	PluginErrorCannotLoadPlugin PluginError = 201
	// PluginErrorJavaUnavailable: load failure due to missing Java support that
	// is required to load plugin. Deprecated 2.32.
	PluginErrorJavaUnavailable PluginError = 202
	// PluginErrorConnectionCancelled: load failure due to connection
	// cancellation. Deprecated 2.32.
	PluginErrorConnectionCancelled PluginError = 203
	// PluginErrorWillHandleLoad: preliminary load failure for media content
	// types. A new load will be started to perform the media load.
	PluginErrorWillHandleLoad PluginError = 204
)

func marshalPluginError(p uintptr) (interface{}, error) {
	return PluginError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PluginError.
func (p PluginError) String() string {
	switch p {
	case PluginErrorFailed:
		return "Failed"
	case PluginErrorCannotFindPlugin:
		return "CannotFindPlugin"
	case PluginErrorCannotLoadPlugin:
		return "CannotLoadPlugin"
	case PluginErrorJavaUnavailable:
		return "JavaUnavailable"
	case PluginErrorConnectionCancelled:
		return "ConnectionCancelled"
	case PluginErrorWillHandleLoad:
		return "WillHandleLoad"
	default:
		return fmt.Sprintf("PluginError(%d)", p)
	}
}

// PluginErrorQuark gets the quark for the domain of plug-in errors.
//
// The function returns the following values:
//
//   - quark: plug-in error domain.
//
func PluginErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_plugin_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)
	type _ = glib.Quark
	type _ = uint32

	return _quark
}

// PolicyError: enum values used to denote the various policy errors.
type PolicyError C.gint

const (
	// PolicyErrorFailed: generic load failure due to policy error.
	PolicyErrorFailed PolicyError = 199
	// PolicyErrorCannotShowMIMEType: load failure due to unsupported mime type.
	PolicyErrorCannotShowMIMEType PolicyError = 100
	// PolicyErrorCannotShowURI: load failure due to URI that can not be shown.
	PolicyErrorCannotShowURI PolicyError = 101
	// PolicyErrorFrameLoadInterruptedByPolicyChange: load failure due to frame
	// load interruption by policy change.
	PolicyErrorFrameLoadInterruptedByPolicyChange PolicyError = 102
	// PolicyErrorCannotUseRestrictedPort: load failure due to port restriction.
	PolicyErrorCannotUseRestrictedPort PolicyError = 103
)

func marshalPolicyError(p uintptr) (interface{}, error) {
	return PolicyError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PolicyError.
func (p PolicyError) String() string {
	switch p {
	case PolicyErrorFailed:
		return "Failed"
	case PolicyErrorCannotShowMIMEType:
		return "CannotShowMIMEType"
	case PolicyErrorCannotShowURI:
		return "CannotShowURI"
	case PolicyErrorFrameLoadInterruptedByPolicyChange:
		return "FrameLoadInterruptedByPolicyChange"
	case PolicyErrorCannotUseRestrictedPort:
		return "CannotUseRestrictedPort"
	default:
		return fmt.Sprintf("PolicyError(%d)", p)
	}
}

// PolicyErrorQuark gets the quark for the domain of policy errors.
//
// The function returns the following values:
//
//   - quark: policy error domain.
//
func PolicyErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_policy_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)
	type _ = glib.Quark
	type _ = uint32

	return _quark
}

// PrintError: enum values used to denote the various print errors.
type PrintError C.gint

const (
	// PrintErrorGeneral: unspecified error during a print operation.
	PrintErrorGeneral PrintError = 599
	// PrintErrorPrinterNotFound: selected printer cannot be found.
	PrintErrorPrinterNotFound PrintError = 500
	// PrintErrorInvalidPageRange: invalid page range.
	PrintErrorInvalidPageRange PrintError = 501
)

func marshalPrintError(p uintptr) (interface{}, error) {
	return PrintError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PrintError.
func (p PrintError) String() string {
	switch p {
	case PrintErrorGeneral:
		return "General"
	case PrintErrorPrinterNotFound:
		return "PrinterNotFound"
	case PrintErrorInvalidPageRange:
		return "InvalidPageRange"
	default:
		return fmt.Sprintf("PrintError(%d)", p)
	}
}

// PrintErrorQuark gets the quark for the domain of printing errors.
//
// The function returns the following values:
//
//   - quark: print error domain.
//
func PrintErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_print_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)
	type _ = glib.Quark
	type _ = uint32

	return _quark
}

// SnapshotError: enum values used to denote errors happening when creating
// snapshots of KitWebView.
type SnapshotError C.gint

const (
	// SnapshotErrorFailedToCreate: error occurred when creating a webpage
	// snapshot.
	SnapshotErrorFailedToCreate SnapshotError = 799
)

func marshalSnapshotError(p uintptr) (interface{}, error) {
	return SnapshotError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for SnapshotError.
func (s SnapshotError) String() string {
	switch s {
	case SnapshotErrorFailedToCreate:
		return "Create"
	default:
		return fmt.Sprintf("SnapshotError(%d)", s)
	}
}

// SnapshotErrorQuark gets the quark for the domain of page snapshot errors.
//
// The function returns the following values:
//
//   - quark: snapshot error domain.
//
func SnapshotErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_snapshot_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)
	type _ = glib.Quark
	type _ = uint32

	return _quark
}

// UserContentFilterErrorQuark gets the quark for the domain of user content
// filter errors.
//
// The function returns the following values:
//
//   - quark: user content filter error domain.
//
func UserContentFilterErrorQuark() glib.Quark {
	var _cret C.GQuark // in

	_cret = C.webkit_user_content_filter_error_quark()

	var _quark glib.Quark // out

	_quark = uint32(_cret)
	type _ = glib.Quark
	type _ = uint32

	return _quark
}
