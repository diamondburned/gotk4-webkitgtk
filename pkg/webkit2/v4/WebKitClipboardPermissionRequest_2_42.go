// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

// GType values.
var (
	GTypeClipboardPermissionRequest = coreglib.Type(C.webkit_clipboard_permission_request_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeClipboardPermissionRequest, F: marshalClipboardPermissionRequest},
	})
}

// ClipboardPermissionRequestOverrides contains methods that are overridable.
type ClipboardPermissionRequestOverrides struct {
}

func defaultClipboardPermissionRequestOverrides(v *ClipboardPermissionRequest) ClipboardPermissionRequestOverrides {
	return ClipboardPermissionRequestOverrides{}
}

// ClipboardPermissionRequest: permission request for reading clipboard
// contents.
//
// WebKitClipboardPermissionRequest represents a request for permission to
// decide whether WebKit can access the clipboard to read its contents through
// the Async Clipboard API.
//
// When a WebKitClipboardPermissionRequest is not handled by the user, it is
// denied by default.
type ClipboardPermissionRequest struct {
	_ [0]func() // equal guard
	*coreglib.Object

	PermissionRequest
}

var (
	_ coreglib.Objector = (*ClipboardPermissionRequest)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ClipboardPermissionRequest, *ClipboardPermissionRequestClass, ClipboardPermissionRequestOverrides](
		GTypeClipboardPermissionRequest,
		initClipboardPermissionRequestClass,
		wrapClipboardPermissionRequest,
		defaultClipboardPermissionRequestOverrides,
	)
}

func initClipboardPermissionRequestClass(gclass unsafe.Pointer, overrides ClipboardPermissionRequestOverrides, classInitFunc func(*ClipboardPermissionRequestClass)) {
	if classInitFunc != nil {
		class := (*ClipboardPermissionRequestClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapClipboardPermissionRequest(obj *coreglib.Object) *ClipboardPermissionRequest {
	return &ClipboardPermissionRequest{
		Object: obj,
		PermissionRequest: PermissionRequest{
			Object: obj,
		},
	}
}

func marshalClipboardPermissionRequest(p uintptr) (interface{}, error) {
	return wrapClipboardPermissionRequest(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}
