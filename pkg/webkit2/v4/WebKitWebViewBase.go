// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/atk"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

// GType values.
var (
	GTypeWebViewBase = coreglib.Type(C.webkit_web_view_base_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeWebViewBase, F: marshalWebViewBase},
	})
}

// WebViewBaseOverrides contains methods that are overridable.
type WebViewBaseOverrides struct {
}

func defaultWebViewBaseOverrides(v *WebViewBase) WebViewBaseOverrides {
	return WebViewBaseOverrides{}
}

type WebViewBase struct {
	_ [0]func() // equal guard
	gtk.Container
}

var (
	_ gtk.Containerer = (*WebViewBase)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*WebViewBase, *WebViewBaseClass, WebViewBaseOverrides](
		GTypeWebViewBase,
		initWebViewBaseClass,
		wrapWebViewBase,
		defaultWebViewBaseOverrides,
	)
}

func initWebViewBaseClass(gclass unsafe.Pointer, overrides WebViewBaseOverrides, classInitFunc func(*WebViewBaseClass)) {
	if classInitFunc != nil {
		class := (*WebViewBaseClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapWebViewBase(obj *coreglib.Object) *WebViewBase {
	return &WebViewBase{
		Container: gtk.Container{
			Widget: gtk.Widget{
				InitiallyUnowned: coreglib.InitiallyUnowned{
					Object: obj,
				},
				Object: obj,
				ImplementorIface: atk.ImplementorIface{
					Object: obj,
				},
				Buildable: gtk.Buildable{
					Object: obj,
				},
			},
		},
	}
}

func marshalWebViewBase(p uintptr) (interface{}, error) {
	return wrapWebViewBase(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// WebViewBaseClass: instance of this type is always passed by reference.
type WebViewBaseClass struct {
	*webViewBaseClass
}

// webViewBaseClass is the struct that's finalized.
type webViewBaseClass struct {
	native *C.WebKitWebViewBaseClass
}

func (w *WebViewBaseClass) ParentClass() *gtk.ContainerClass {
	valptr := &w.native.parentClass
	var _v *gtk.ContainerClass // out
	_v = (*gtk.ContainerClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
