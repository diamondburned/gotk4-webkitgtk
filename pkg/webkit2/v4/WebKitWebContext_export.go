// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <webkit2/webkit2.h>
import "C"

//export _gotk4_webkit24_URISchemeRequestCallback
func _gotk4_webkit24_URISchemeRequestCallback(arg1 *C.WebKitURISchemeRequest, arg2 C.gpointer) {
	var fn URISchemeRequestCallback
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(URISchemeRequestCallback)
	}

	var _request *URISchemeRequest // out

	_request = wrapURISchemeRequest(coreglib.Take(unsafe.Pointer(arg1)))

	fn(_request)
}

//export _gotk4_webkit24_WebContext_ConnectAutomationStarted
func _gotk4_webkit24_WebContext_ConnectAutomationStarted(arg0 C.gpointer, arg1 *C.WebKitAutomationSession, arg2 C.guintptr) {
	var f func(session *AutomationSession)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(session *AutomationSession))
	}

	var _session *AutomationSession // out

	_session = wrapAutomationSession(coreglib.Take(unsafe.Pointer(arg1)))

	f(_session)
}

//export _gotk4_webkit24_WebContext_ConnectDownloadStarted
func _gotk4_webkit24_WebContext_ConnectDownloadStarted(arg0 C.gpointer, arg1 *C.WebKitDownload, arg2 C.guintptr) {
	var f func(download *Download)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(download *Download))
	}

	var _download *Download // out

	_download = wrapDownload(coreglib.Take(unsafe.Pointer(arg1)))

	f(_download)
}

//export _gotk4_webkit24_WebContext_ConnectInitializeNotificationPermissions
func _gotk4_webkit24_WebContext_ConnectInitializeNotificationPermissions(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_webkit24_WebContext_ConnectInitializeWebExtensions
func _gotk4_webkit24_WebContext_ConnectInitializeWebExtensions(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_webkit24_WebContext_ConnectUserMessageReceived
func _gotk4_webkit24_WebContext_ConnectUserMessageReceived(arg0 C.gpointer, arg1 *C.WebKitUserMessage, arg2 C.guintptr) (cret C.gboolean) {
	var f func(message *UserMessage) (ok bool)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(message *UserMessage) (ok bool))
	}

	var _message *UserMessage // out

	_message = wrapUserMessage(coreglib.Take(unsafe.Pointer(arg1)))

	ok := f(_message)

	var _ bool

	if ok {
		cret = C.TRUE
	}

	return cret
}
