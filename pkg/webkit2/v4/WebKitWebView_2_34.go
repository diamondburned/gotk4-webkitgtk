// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

// GType values.
var (
	GTypeMediaCaptureState = coreglib.Type(C.webkit_media_capture_state_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeMediaCaptureState, F: marshalMediaCaptureState},
	})
}

// MediaCaptureState: enum values used to specify the capture state of a media
// device.
type MediaCaptureState C.gint

const (
	// MediaCaptureStateNone: media capture is disabled.
	MediaCaptureStateNone MediaCaptureState = iota
	// MediaCaptureStateActive: media capture is active.
	MediaCaptureStateActive
	// MediaCaptureStateMuted: media capture is muted.
	MediaCaptureStateMuted
)

func marshalMediaCaptureState(p uintptr) (interface{}, error) {
	return MediaCaptureState(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for MediaCaptureState.
func (m MediaCaptureState) String() string {
	switch m {
	case MediaCaptureStateNone:
		return "None"
	case MediaCaptureStateActive:
		return "Active"
	case MediaCaptureStateMuted:
		return "Muted"
	default:
		return fmt.Sprintf("MediaCaptureState(%d)", m)
	}
}
