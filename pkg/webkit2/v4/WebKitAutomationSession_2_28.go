// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

// GType values.
var (
	GTypeAutomationBrowsingContextPresentation = coreglib.Type(C.webkit_automation_browsing_context_presentation_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeAutomationBrowsingContextPresentation, F: marshalAutomationBrowsingContextPresentation},
	})
}

// AutomationBrowsingContextPresentation: enum values used for determining the
// automation browsing context presentation.
type AutomationBrowsingContextPresentation C.gint

const (
	// AutomationBrowsingContextPresentationWindow: window.
	AutomationBrowsingContextPresentationWindow AutomationBrowsingContextPresentation = iota
	// AutomationBrowsingContextPresentationTab: tab.
	AutomationBrowsingContextPresentationTab
)

func marshalAutomationBrowsingContextPresentation(p uintptr) (interface{}, error) {
	return AutomationBrowsingContextPresentation(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for AutomationBrowsingContextPresentation.
func (a AutomationBrowsingContextPresentation) String() string {
	switch a {
	case AutomationBrowsingContextPresentationWindow:
		return "Window"
	case AutomationBrowsingContextPresentationTab:
		return "Tab"
	default:
		return fmt.Sprintf("AutomationBrowsingContextPresentation(%d)", a)
	}
}
