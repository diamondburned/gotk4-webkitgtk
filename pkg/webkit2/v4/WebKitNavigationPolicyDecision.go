// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

// GType values.
var (
	GTypeNavigationPolicyDecision = coreglib.Type(C.webkit_navigation_policy_decision_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeNavigationPolicyDecision, F: marshalNavigationPolicyDecision},
	})
}

// NavigationPolicyDecisionOverrides contains methods that are overridable.
type NavigationPolicyDecisionOverrides struct {
}

func defaultNavigationPolicyDecisionOverrides(v *NavigationPolicyDecision) NavigationPolicyDecisionOverrides {
	return NavigationPolicyDecisionOverrides{}
}

// NavigationPolicyDecision: policy decision for navigation actions.
//
// WebKitNavigationPolicyDecision represents a policy decision
// for events associated with navigations. If the value of
// KitNavigationPolicyDecision:mouse-button is not 0, then the navigation was
// triggered by a mouse event.
type NavigationPolicyDecision struct {
	_ [0]func() // equal guard
	PolicyDecision
}

var (
	_ PolicyDecisioner = (*NavigationPolicyDecision)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*NavigationPolicyDecision, *NavigationPolicyDecisionClass, NavigationPolicyDecisionOverrides](
		GTypeNavigationPolicyDecision,
		initNavigationPolicyDecisionClass,
		wrapNavigationPolicyDecision,
		defaultNavigationPolicyDecisionOverrides,
	)
}

func initNavigationPolicyDecisionClass(gclass unsafe.Pointer, overrides NavigationPolicyDecisionOverrides, classInitFunc func(*NavigationPolicyDecisionClass)) {
	if classInitFunc != nil {
		class := (*NavigationPolicyDecisionClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapNavigationPolicyDecision(obj *coreglib.Object) *NavigationPolicyDecision {
	return &NavigationPolicyDecision{
		PolicyDecision: PolicyDecision{
			Object: obj,
		},
	}
}

func marshalNavigationPolicyDecision(p uintptr) (interface{}, error) {
	return wrapNavigationPolicyDecision(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// FrameName gets the value of the KitNavigationPolicyDecision:frame-name
// property.
//
// Deprecated: Use webkit_navigation_policy_decision_get_navigation_action()
// instead.
//
// The function returns the following values:
//
//   - utf8: name of the new frame this navigation action targets or NULL.
//
func (decision *NavigationPolicyDecision) FrameName() string {
	var _arg0 *C.WebKitNavigationPolicyDecision // out
	var _cret *C.gchar                          // in

	_arg0 = (*C.WebKitNavigationPolicyDecision)(unsafe.Pointer(coreglib.InternObject(decision).Native()))

	_cret = C.webkit_navigation_policy_decision_get_frame_name(_arg0)
	runtime.KeepAlive(decision)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Modifiers gets the value of the KitNavigationPolicyDecision:modifiers
// property.
//
// Deprecated: Use webkit_navigation_policy_decision_get_navigation_action()
// instead.
//
// The function returns the following values:
//
//   - guint modifiers active if this decision was triggered by a mouse event.
//
func (decision *NavigationPolicyDecision) Modifiers() uint {
	var _arg0 *C.WebKitNavigationPolicyDecision // out
	var _cret C.guint                           // in

	_arg0 = (*C.WebKitNavigationPolicyDecision)(unsafe.Pointer(coreglib.InternObject(decision).Native()))

	_cret = C.webkit_navigation_policy_decision_get_modifiers(_arg0)
	runtime.KeepAlive(decision)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// MouseButton gets the value of the KitNavigationPolicyDecision:mouse-button
// property.
//
// Deprecated: Use webkit_navigation_policy_decision_get_navigation_action()
// instead.
//
// The function returns the following values:
//
//   - guint: mouse button used if this decision was triggered by a mouse event
//     or 0 otherwise.
//
func (decision *NavigationPolicyDecision) MouseButton() uint {
	var _arg0 *C.WebKitNavigationPolicyDecision // out
	var _cret C.guint                           // in

	_arg0 = (*C.WebKitNavigationPolicyDecision)(unsafe.Pointer(coreglib.InternObject(decision).Native()))

	_cret = C.webkit_navigation_policy_decision_get_mouse_button(_arg0)
	runtime.KeepAlive(decision)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// NavigationAction gets the value of the
// KitNavigationPolicyDecision:navigation-action property.
//
// The function returns the following values:
//
//   - navigationAction triggering this policy decision.
//
func (decision *NavigationPolicyDecision) NavigationAction() *NavigationAction {
	var _arg0 *C.WebKitNavigationPolicyDecision // out
	var _cret *C.WebKitNavigationAction         // in

	_arg0 = (*C.WebKitNavigationPolicyDecision)(unsafe.Pointer(coreglib.InternObject(decision).Native()))

	_cret = C.webkit_navigation_policy_decision_get_navigation_action(_arg0)
	runtime.KeepAlive(decision)

	var _navigationAction *NavigationAction // out

	_navigationAction = (*NavigationAction)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _navigationAction
}

// NavigationType gets the value of the
// KitNavigationPolicyDecision:navigation-type property.
//
// Deprecated: Use webkit_navigation_policy_decision_get_navigation_action()
// instead.
//
// The function returns the following values:
//
//   - navigationType: type of navigation triggering this policy decision.
//
func (decision *NavigationPolicyDecision) NavigationType() NavigationType {
	var _arg0 *C.WebKitNavigationPolicyDecision // out
	var _cret C.WebKitNavigationType            // in

	_arg0 = (*C.WebKitNavigationPolicyDecision)(unsafe.Pointer(coreglib.InternObject(decision).Native()))

	_cret = C.webkit_navigation_policy_decision_get_navigation_type(_arg0)
	runtime.KeepAlive(decision)

	var _navigationType NavigationType // out

	_navigationType = NavigationType(_cret)

	return _navigationType
}

// Request gets the value of the KitNavigationPolicyDecision:request property.
//
// Deprecated: Use webkit_navigation_policy_decision_get_navigation_action()
// instead.
//
// The function returns the following values:
//
//   - uriRequest: URI request that is associated with this navigation.
//
func (decision *NavigationPolicyDecision) Request() *URIRequest {
	var _arg0 *C.WebKitNavigationPolicyDecision // out
	var _cret *C.WebKitURIRequest               // in

	_arg0 = (*C.WebKitNavigationPolicyDecision)(unsafe.Pointer(coreglib.InternObject(decision).Native()))

	_cret = C.webkit_navigation_policy_decision_get_request(_arg0)
	runtime.KeepAlive(decision)

	var _uriRequest *URIRequest // out

	_uriRequest = wrapURIRequest(coreglib.Take(unsafe.Pointer(_cret)))

	return _uriRequest
}

// NavigationPolicyDecisionClass: instance of this type is always passed by
// reference.
type NavigationPolicyDecisionClass struct {
	*navigationPolicyDecisionClass
}

// navigationPolicyDecisionClass is the struct that's finalized.
type navigationPolicyDecisionClass struct {
	native *C.WebKitNavigationPolicyDecisionClass
}

func (n *NavigationPolicyDecisionClass) ParentClass() *PolicyDecisionClass {
	valptr := &n.native.parent_class
	var _v *PolicyDecisionClass // out
	_v = (*PolicyDecisionClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
