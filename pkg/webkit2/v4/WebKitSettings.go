// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

// GType values.
var (
	GTypeSettings = coreglib.Type(C.webkit_settings_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeSettings, F: marshalSettings},
	})
}

// SettingsOverrides contains methods that are overridable.
type SettingsOverrides struct {
}

func defaultSettingsOverrides(v *Settings) SettingsOverrides {
	return SettingsOverrides{}
}

// Settings: control the behaviour of a KitWebView.
//
// KitSettings can be applied to a KitWebView to control text charset, color,
// font sizes, printing mode, script support, loading of images and various
// other things on a KitWebView. After creation, a KitSettings object contains
// default settings.
//
//    // Disable JavaScript
//    WebKitSettings *settings = webkit_web_view_group_get_settings (my_view_group);
//    webkit_settings_set_enable_javascript (settings, FALSE);.
type Settings struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Settings)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Settings, *SettingsClass, SettingsOverrides](
		GTypeSettings,
		initSettingsClass,
		wrapSettings,
		defaultSettingsOverrides,
	)
}

func initSettingsClass(gclass unsafe.Pointer, overrides SettingsOverrides, classInitFunc func(*SettingsClass)) {
	if classInitFunc != nil {
		class := (*SettingsClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapSettings(obj *coreglib.Object) *Settings {
	return &Settings{
		Object: obj,
	}
}

func marshalSettings(p uintptr) (interface{}, error) {
	return wrapSettings(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewSettings creates a new KitSettings instance with default values.
//
// It must be manually attached to a KitWebView. See also
// webkit_settings_new_with_settings().
//
// The function returns the following values:
//
//   - settings: new KitSettings instance.
//
func NewSettings() *Settings {
	var _cret *C.WebKitSettings // in

	_cret = C.webkit_settings_new()

	var _settings *Settings // out

	_settings = wrapSettings(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _settings
}

// AllowFileAccessFromFileUrls: get the
// KitSettings:allow-file-access-from-file-urls property.
//
// The function returns the following values:
//
//   - ok: TRUE If file access from file URLs is allowed or FALSE otherwise.
//
func (settings *Settings) AllowFileAccessFromFileUrls() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_allow_file_access_from_file_urls(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AllowModalDialogs: get the KitSettings:allow-modal-dialogs property.
//
// The function returns the following values:
//
//   - ok: TRUE if it's allowed to create and run modal dialogs or FALSE
//     otherwise.
//
func (settings *Settings) AllowModalDialogs() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_allow_modal_dialogs(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AllowTopNavigationToDataUrls: get the
// KitSettings:allow-top-navigation-to-data-urls property.
//
// The function returns the following values:
//
//   - ok: TRUE If navigation to data URLs from the top frame is allowed or
//     FALSE\ otherwise.
//
func (settings *Settings) AllowTopNavigationToDataUrls() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_allow_top_navigation_to_data_urls(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AllowUniversalAccessFromFileUrls: get the
// KitSettings:allow-universal-access-from-file-urls property.
//
// The function returns the following values:
//
//   - ok: TRUE If universal access from file URLs is allowed or FALSE
//     otherwise.
//
func (settings *Settings) AllowUniversalAccessFromFileUrls() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_allow_universal_access_from_file_urls(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AutoLoadImages: get the KitSettings:auto-load-images property.
//
// The function returns the following values:
//
//   - ok: TRUE If auto loading of images is enabled or FALSE otherwise.
//
func (settings *Settings) AutoLoadImages() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_auto_load_images(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// CursiveFontFamily gets the KitSettings:cursive-font-family property.
//
// The function returns the following values:
//
//   - utf8: default font family used to display content marked with cursive
//     font.
//
func (settings *Settings) CursiveFontFamily() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_cursive_font_family(_arg0)
	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// DefaultCharset gets the KitSettings:default-charset property.
//
// The function returns the following values:
//
//   - utf8: default charset.
//
func (settings *Settings) DefaultCharset() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_default_charset(_arg0)
	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// DefaultFontFamily gets the KitSettings:default-font-family property.
//
// The function returns the following values:
//
//   - utf8: default font family used to display content that does not specify a
//     font.
//
func (settings *Settings) DefaultFontFamily() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_default_font_family(_arg0)
	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// DefaultFontSize gets the KitSettings:default-font-size property.
//
// The function returns the following values:
//
//   - guint32: default font size, in pixels.
//
func (settings *Settings) DefaultFontSize() uint32 {
	var _arg0 *C.WebKitSettings // out
	var _cret C.guint32         // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_default_font_size(_arg0)
	runtime.KeepAlive(settings)

	var _guint32 uint32 // out

	_guint32 = uint32(_cret)

	return _guint32
}

// DefaultMonospaceFontSize gets the KitSettings:default-monospace-font-size
// property.
//
// The function returns the following values:
//
//   - guint32: default monospace font size, in pixels.
//
func (settings *Settings) DefaultMonospaceFontSize() uint32 {
	var _arg0 *C.WebKitSettings // out
	var _cret C.guint32         // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_default_monospace_font_size(_arg0)
	runtime.KeepAlive(settings)

	var _guint32 uint32 // out

	_guint32 = uint32(_cret)

	return _guint32
}

// DisableWebSecurity: get the KitSettings:disable-web-security property.
//
// The function returns the following values:
//
//   - ok: TRUE If web security support is disabled or FALSE otherwise.
//
func (settings *Settings) DisableWebSecurity() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_disable_web_security(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// DrawCompositingIndicators: get the KitSettings:draw-compositing-indicators
// property.
//
// The function returns the following values:
//
//   - ok: TRUE If compositing borders are drawn or FALSE otherwise.
//
func (settings *Settings) DrawCompositingIndicators() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_draw_compositing_indicators(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableAccelerated2DCanvas: get the KitSettings:enable-accelerated-2d-canvas
// property.
//
// Deprecated: since version 2.32.
//
// The function returns the following values:
//
//   - ok: TRUE if accelerated 2D canvas is enabled or FALSE otherwise.
//
func (settings *Settings) EnableAccelerated2DCanvas() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_accelerated_2d_canvas(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableBackForwardNavigationGestures: get the
// KitSettings:enable-back-forward-navigation-gestures property.
//
// The function returns the following values:
//
//   - ok: TRUE if horizontal swipe gesture will trigger back-forward navigaiton
//     or FALSE otherwise.
//
func (settings *Settings) EnableBackForwardNavigationGestures() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_back_forward_navigation_gestures(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableCaretBrowsing: get the KitSettings:enable-caret-browsing property.
//
// The function returns the following values:
//
//   - ok: TRUE If caret browsing is enabled or FALSE otherwise.
//
func (settings *Settings) EnableCaretBrowsing() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_caret_browsing(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableDeveloperExtras: get the KitSettings:enable-developer-extras property.
//
// The function returns the following values:
//
//   - ok: TRUE If developer extras is enabled or FALSE otherwise.
//
func (settings *Settings) EnableDeveloperExtras() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_developer_extras(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableDnsPrefetching: get the KitSettings:enable-dns-prefetching property.
//
// The function returns the following values:
//
//   - ok: TRUE If DNS prefetching is enabled or FALSE otherwise.
//
func (settings *Settings) EnableDnsPrefetching() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_dns_prefetching(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableEncryptedMedia: get the KitSettings:enable-encrypted-media property.
//
// The function returns the following values:
//
//   - ok: TRUE if EncryptedMedia support is enabled or FALSE otherwise.
//
func (settings *Settings) EnableEncryptedMedia() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_encrypted_media(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableFrameFlattening: frame flattening is no longer supported. This function
// returns FALSE.
//
// Deprecated: since version 2.38.
//
// The function returns the following values:
//
//   - ok: FALSE.
//
func (settings *Settings) EnableFrameFlattening() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_frame_flattening(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableFullscreen: get the KitSettings:enable-fullscreen property.
//
// The function returns the following values:
//
//   - ok: TRUE If fullscreen support is enabled or FALSE otherwise.
//
func (settings *Settings) EnableFullscreen() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_fullscreen(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableHtml5Database: get the KitSettings:enable-html5-database property.
//
// The function returns the following values:
//
//   - ok: TRUE if IndexedDB support is enabled or FALSE otherwise.
//
func (settings *Settings) EnableHtml5Database() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_html5_database(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableHtml5LocalStorage: get the KitSettings:enable-html5-local-storage
// property.
//
// The function returns the following values:
//
//   - ok: TRUE If HTML5 local storage support is enabled or FALSE otherwise.
//
func (settings *Settings) EnableHtml5LocalStorage() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_html5_local_storage(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableHyperlinkAuditing: get the KitSettings:enable-hyperlink-auditing
// property.
//
// The function returns the following values:
//
//   - ok: TRUE If hyper link auditing is enabled or FALSE otherwise.
//
func (settings *Settings) EnableHyperlinkAuditing() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_hyperlink_auditing(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableJava: get the KitSettings:enable-java property.
//
// Deprecated: This function always returns FALSE.
//
// The function returns the following values:
//
//   - ok: FALSE always.
//
func (settings *Settings) EnableJava() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_java(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableJavascript: get the KitSettings:enable-javascript property.
//
// The function returns the following values:
//
//   - ok: TRUE If JavaScript is enabled or FALSE otherwise.
//
func (settings *Settings) EnableJavascript() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_javascript(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableJavascriptMarkup: get the KitSettings:enable-javascript-markup
// property.
//
// The function returns the following values:
//
//   - ok: TRUE if JavaScript markup is enabled or FALSE otherwise.
//
func (settings *Settings) EnableJavascriptMarkup() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_javascript_markup(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableMedia: get the KitSettings:enable-media property.
//
// The function returns the following values:
//
//   - ok: TRUE if media support is enabled or FALSE otherwise.
//
func (settings *Settings) EnableMedia() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_media(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableMediaCapabilities: get the KitSettings:enable-media-capabilities
// property.
//
// The function returns the following values:
//
//   - ok: TRUE if MediaCapabilities support is enabled or FALSE otherwise.
//
func (settings *Settings) EnableMediaCapabilities() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_media_capabilities(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableMediaStream: get the KitSettings:enable-media-stream property.
//
// The function returns the following values:
//
//   - ok: TRUE If mediastream support is enabled or FALSE otherwise.
//
func (settings *Settings) EnableMediaStream() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_media_stream(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableMediasource: get the KitSettings:enable-mediasource property.
//
// The function returns the following values:
//
//   - ok: TRUE If MediaSource support is enabled or FALSE otherwise.
//
func (settings *Settings) EnableMediasource() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_mediasource(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableMockCaptureDevices: get the KitSettings:enable-mock-capture-devices
// property.
//
// The function returns the following values:
//
//   - ok: TRUE If mock capture devices is enabled or FALSE otherwise.
//
func (settings *Settings) EnableMockCaptureDevices() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_mock_capture_devices(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableOfflineWebApplicationCache: get the
// KitSettings:enable-offline-web-application-cache property.
//
// The function returns the following values:
//
//   - ok: TRUE If HTML5 offline web application cache support is enabled or
//     FALSE otherwise.
//
func (settings *Settings) EnableOfflineWebApplicationCache() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_offline_web_application_cache(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnablePageCache: get the KitSettings:enable-page-cache property.
//
// The function returns the following values:
//
//   - ok: TRUE if page cache enabled or FALSE otherwise.
//
func (settings *Settings) EnablePageCache() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_page_cache(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnablePlugins: get the KitSettings:enable-plugins property.
//
// Deprecated: since version 2.32.
//
// The function returns the following values:
//
//   - ok: TRUE If plugins are enabled or FALSE otherwise.
//
func (settings *Settings) EnablePlugins() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_plugins(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnablePrivateBrowsing: get the KitSettings:enable-private-browsing property.
//
// Deprecated: Use KitWebView:is-ephemeral or KitWebContext:is-ephemeral
// instead.
//
// The function returns the following values:
//
//   - ok: TRUE If private browsing is enabled or FALSE otherwise.
//
func (settings *Settings) EnablePrivateBrowsing() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_private_browsing(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableResizableTextAreas: get the KitSettings:enable-resizable-text-areas
// property.
//
// The function returns the following values:
//
//   - ok: TRUE If text areas can be resized or FALSE otherwise.
//
func (settings *Settings) EnableResizableTextAreas() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_resizable_text_areas(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableSiteSpecificQuirks: get the KitSettings:enable-site-specific-quirks
// property.
//
// The function returns the following values:
//
//   - ok: TRUE if site specific quirks are enabled or FALSE otherwise.
//
func (settings *Settings) EnableSiteSpecificQuirks() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_site_specific_quirks(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableSmoothScrolling: get the KitSettings:enable-smooth-scrolling property.
//
// The function returns the following values:
//
//   - ok: TRUE if smooth scrolling is enabled or FALSE otherwise.
//
func (settings *Settings) EnableSmoothScrolling() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_smooth_scrolling(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableSpatialNavigation: get the KitSettings:enable-spatial-navigation
// property.
//
// The function returns the following values:
//
//   - ok: TRUE If HTML5 spatial navigation support is enabled or FALSE
//     otherwise.
//
func (settings *Settings) EnableSpatialNavigation() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_spatial_navigation(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableTabsToLinks: get the KitSettings:enable-tabs-to-links property.
//
// The function returns the following values:
//
//   - ok: TRUE If tabs to link is enabled or FALSE otherwise.
//
func (settings *Settings) EnableTabsToLinks() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_tabs_to_links(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableWebaudio: get the KitSettings:enable-webaudio property.
//
// The function returns the following values:
//
//   - ok: TRUE If webaudio support is enabled or FALSE otherwise.
//
func (settings *Settings) EnableWebaudio() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_webaudio(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableWebgl: get the KitSettings:enable-webgl property.
//
// The function returns the following values:
//
//   - ok: TRUE If WebGL support is enabled or FALSE otherwise.
//
func (settings *Settings) EnableWebgl() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_webgl(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableWebrtc: get the settings:enable-webrtc property.
//
// The function returns the following values:
//
//   - ok: TRUE If WebRTC support is enabled or FALSE otherwise.
//
func (settings *Settings) EnableWebrtc() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_webrtc(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableWriteConsoleMessagesToStdout: get the
// KitSettings:enable-write-console-messages-to-stdout property.
//
// The function returns the following values:
//
//   - ok: TRUE if writing console messages to stdout is enabled or FALSE
//     otherwise.
//
func (settings *Settings) EnableWriteConsoleMessagesToStdout() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_write_console_messages_to_stdout(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableXssAuditor: XSS auditor has been removed. This function returns FALSE.
//
// Deprecated: This function does nothing.
//
// The function returns the following values:
//
//   - ok: FALSE.
//
func (settings *Settings) EnableXssAuditor() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_enable_xss_auditor(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// FantasyFontFamily gets the KitSettings:fantasy-font-family property.
//
// The function returns the following values:
//
//   - utf8: default font family used to display content marked with fantasy
//     font.
//
func (settings *Settings) FantasyFontFamily() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_fantasy_font_family(_arg0)
	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// FeatureEnabled gets whether a feature is enabled.
//
// The function takes the following parameters:
//
//   - feature to toggle.
//
// The function returns the following values:
//
//   - ok: whether the feature is enabled.
//
func (settings *Settings) FeatureEnabled(feature *Feature) bool {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.WebKitFeature  // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.WebKitFeature)(gextras.StructNative(unsafe.Pointer(feature)))

	_cret = C.webkit_settings_get_feature_enabled(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(feature)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// HardwareAccelerationPolicy: get the KitSettings:hardware-acceleration-policy
// property.
//
// The function returns the following values:
//
//   - hardwareAccelerationPolicy: KitHardwareAccelerationPolicy.
//
func (settings *Settings) HardwareAccelerationPolicy() HardwareAccelerationPolicy {
	var _arg0 *C.WebKitSettings                  // out
	var _cret C.WebKitHardwareAccelerationPolicy // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_hardware_acceleration_policy(_arg0)
	runtime.KeepAlive(settings)

	var _hardwareAccelerationPolicy HardwareAccelerationPolicy // out

	_hardwareAccelerationPolicy = HardwareAccelerationPolicy(_cret)

	return _hardwareAccelerationPolicy
}

// JavascriptCanAccessClipboard: get the
// KitSettings:javascript-can-access-clipboard property.
//
// The function returns the following values:
//
//   - ok: TRUE If javascript-can-access-clipboard is enabled or FALSE
//     otherwise.
//
func (settings *Settings) JavascriptCanAccessClipboard() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_javascript_can_access_clipboard(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// JavascriptCanOpenWindowsAutomatically: get the
// KitSettings:javascript-can-open-windows-automatically property.
//
// The function returns the following values:
//
//   - ok: TRUE If JavaScript can open window automatically or FALSE otherwise.
//
func (settings *Settings) JavascriptCanOpenWindowsAutomatically() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_javascript_can_open_windows_automatically(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// LoadIconsIgnoringImageLoadSetting: setting no longer supported. This function
// returns FALSE.
//
// Deprecated: since version 2.42.
//
// The function returns the following values:
//
//   - ok: FALSE.
//
func (settings *Settings) LoadIconsIgnoringImageLoadSetting() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_load_icons_ignoring_image_load_setting(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// MediaContentTypesRequiringHardwareSupport gets the
// KitSettings:media-content-types-requiring-hardware-support property.
//
// The function returns the following values:
//
//   - utf8: media content types requiring hardware support, or NULL.
//
func (settings *Settings) MediaContentTypesRequiringHardwareSupport() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_media_content_types_requiring_hardware_support(_arg0)
	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// MediaPlaybackAllowsInline: get the KitSettings:media-playback-allows-inline
// property.
//
// The function returns the following values:
//
//   - ok: TRUE If inline playback is allowed for media or FALSE if only
//     fullscreen playback is allowed.
//
func (settings *Settings) MediaPlaybackAllowsInline() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_media_playback_allows_inline(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// MediaPlaybackRequiresUserGesture: get the
// KitSettings:media-playback-requires-user-gesture property.
//
// The function returns the following values:
//
//   - ok: TRUE If an user gesture is needed to play or load media or FALSE if
//     no user gesture is needed.
//
func (settings *Settings) MediaPlaybackRequiresUserGesture() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_media_playback_requires_user_gesture(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// MinimumFontSize gets the KitSettings:minimum-font-size property.
//
// The function returns the following values:
//
//   - guint32: minimum font size, in pixels.
//
func (settings *Settings) MinimumFontSize() uint32 {
	var _arg0 *C.WebKitSettings // out
	var _cret C.guint32         // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_minimum_font_size(_arg0)
	runtime.KeepAlive(settings)

	var _guint32 uint32 // out

	_guint32 = uint32(_cret)

	return _guint32
}

// MonospaceFontFamily gets the KitSettings:monospace-font-family property.
//
// The function returns the following values:
//
//   - utf8: default font family used to display content marked with monospace
//     font.
//
func (settings *Settings) MonospaceFontFamily() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_monospace_font_family(_arg0)
	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// PictographFontFamily gets the KitSettings:pictograph-font-family property.
//
// The function returns the following values:
//
//   - utf8: default font family used to display content marked with pictograph
//     font.
//
func (settings *Settings) PictographFontFamily() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_pictograph_font_family(_arg0)
	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// PrintBackgrounds: get the KitSettings:print-backgrounds property.
//
// The function returns the following values:
//
//   - ok: TRUE If background images should be printed or FALSE otherwise.
//
func (settings *Settings) PrintBackgrounds() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_print_backgrounds(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SansSerifFontFamily gets the KitSettings:sans-serif-font-family property.
//
// The function returns the following values:
//
//   - utf8: default font family used to display content marked with sans-serif
//     font.
//
func (settings *Settings) SansSerifFontFamily() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_sans_serif_font_family(_arg0)
	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// SerifFontFamily gets the KitSettings:serif-font-family property.
//
// The function returns the following values:
//
//   - utf8: default font family used to display content marked with serif font.
//
func (settings *Settings) SerifFontFamily() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_serif_font_family(_arg0)
	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// UserAgent: get the KitSettings:user-agent property.
//
// The function returns the following values:
//
//   - utf8: current value of the user-agent property.
//
func (settings *Settings) UserAgent() string {
	var _arg0 *C.WebKitSettings // out
	var _cret *C.gchar          // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_user_agent(_arg0)
	runtime.KeepAlive(settings)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// ZoomTextOnly: get the KitSettings:zoom-text-only property.
//
// The function returns the following values:
//
//   - ok: TRUE If zoom level of the view should only affect the text or FALSE
//     if all view contents should be scaled.
//
func (settings *Settings) ZoomTextOnly() bool {
	var _arg0 *C.WebKitSettings // out
	var _cret C.gboolean        // in

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))

	_cret = C.webkit_settings_get_zoom_text_only(_arg0)
	runtime.KeepAlive(settings)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetAllowFileAccessFromFileUrls: set the
// KitSettings:allow-file-access-from-file-urls property.
//
// The function takes the following parameters:
//
//   - allowed: value to be set.
//
func (settings *Settings) SetAllowFileAccessFromFileUrls(allowed bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if allowed {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_allow_file_access_from_file_urls(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(allowed)
}

// SetAllowModalDialogs: set the KitSettings:allow-modal-dialogs property.
//
// The function takes the following parameters:
//
//   - allowed: value to be set.
//
func (settings *Settings) SetAllowModalDialogs(allowed bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if allowed {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_allow_modal_dialogs(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(allowed)
}

// SetAllowTopNavigationToDataUrls: set the
// KitSettings:allow-top-navigation-to-data-urls property.
//
// The function takes the following parameters:
//
//   - allowed: value to be set.
//
func (settings *Settings) SetAllowTopNavigationToDataUrls(allowed bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if allowed {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_allow_top_navigation_to_data_urls(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(allowed)
}

// SetAllowUniversalAccessFromFileUrls: set the
// KitSettings:allow-universal-access-from-file-urls property.
//
// The function takes the following parameters:
//
//   - allowed: value to be set.
//
func (settings *Settings) SetAllowUniversalAccessFromFileUrls(allowed bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if allowed {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_allow_universal_access_from_file_urls(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(allowed)
}

// SetAutoLoadImages: set the KitSettings:auto-load-images property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetAutoLoadImages(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_auto_load_images(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetCursiveFontFamily: set the KitSettings:cursive-font-family property.
//
// The function takes the following parameters:
//
//   - cursiveFontFamily: new default cursive font family.
//
func (settings *Settings) SetCursiveFontFamily(cursiveFontFamily string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(cursiveFontFamily)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_settings_set_cursive_font_family(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(cursiveFontFamily)
}

// SetDefaultCharset: set the KitSettings:default-charset property.
//
// The function takes the following parameters:
//
//   - defaultCharset: default charset to be set.
//
func (settings *Settings) SetDefaultCharset(defaultCharset string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(defaultCharset)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_settings_set_default_charset(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(defaultCharset)
}

// SetDefaultFontFamily: set the KitSettings:default-font-family property.
//
// The function takes the following parameters:
//
//   - defaultFontFamily: new default font family.
//
func (settings *Settings) SetDefaultFontFamily(defaultFontFamily string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(defaultFontFamily)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_settings_set_default_font_family(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(defaultFontFamily)
}

// SetDefaultFontSize: set the KitSettings:default-font-size property.
//
// The function takes the following parameters:
//
//   - fontSize: default font size to be set in pixels.
//
func (settings *Settings) SetDefaultFontSize(fontSize uint32) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.guint32         // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = C.guint32(fontSize)

	C.webkit_settings_set_default_font_size(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(fontSize)
}

// SetDefaultMonospaceFontSize: set the KitSettings:default-monospace-font-size
// property.
//
// The function takes the following parameters:
//
//   - fontSize: default monospace font size to be set in pixels.
//
func (settings *Settings) SetDefaultMonospaceFontSize(fontSize uint32) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.guint32         // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = C.guint32(fontSize)

	C.webkit_settings_set_default_monospace_font_size(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(fontSize)
}

// SetDisableWebSecurity: set the KitSettings:disable-web-security property.
//
// The function takes the following parameters:
//
//   - disabled: value to be set.
//
func (settings *Settings) SetDisableWebSecurity(disabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if disabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_disable_web_security(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(disabled)
}

// SetDrawCompositingIndicators: set the KitSettings:draw-compositing-indicators
// property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetDrawCompositingIndicators(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_draw_compositing_indicators(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableAccelerated2DCanvas: set the
// KitSettings:enable-accelerated-2d-canvas property.
//
// Deprecated: since version 2.32.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableAccelerated2DCanvas(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_accelerated_2d_canvas(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableBackForwardNavigationGestures: set the
// KitSettings:enable-back-forward-navigation-gestures property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableBackForwardNavigationGestures(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_back_forward_navigation_gestures(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableCaretBrowsing: set the KitSettings:enable-caret-browsing property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableCaretBrowsing(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_caret_browsing(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableDeveloperExtras: set the KitSettings:enable-developer-extras
// property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableDeveloperExtras(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_developer_extras(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableDnsPrefetching: set the KitSettings:enable-dns-prefetching property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableDnsPrefetching(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_dns_prefetching(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableEncryptedMedia: set the KitSettings:enable-encrypted-media property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableEncryptedMedia(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_encrypted_media(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableFrameFlattening: frame flattening is no longer supported. This
// function does nothing.
//
// Deprecated: since version 2.38.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableFrameFlattening(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_frame_flattening(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableFullscreen: set the KitSettings:enable-fullscreen property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableFullscreen(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_fullscreen(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableHtml5Database: set the KitSettings:enable-html5-database property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableHtml5Database(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_html5_database(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableHtml5LocalStorage: set the KitSettings:enable-html5-local-storage
// property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableHtml5LocalStorage(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_html5_local_storage(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableHyperlinkAuditing: set the KitSettings:enable-hyperlink-auditing
// property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableHyperlinkAuditing(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_hyperlink_auditing(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableJava: set the KitSettings:enable-java property.
//
// Deprecated function that does nothing.
//
// Deprecated: This function does nothing.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableJava(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_java(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableJavascript: set the KitSettings:enable-javascript property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableJavascript(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_javascript(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableJavascriptMarkup: set the KitSettings:enable-javascript-markup
// property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableJavascriptMarkup(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_javascript_markup(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableMedia: set the KitSettings:enable-media property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableMedia(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_media(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableMediaCapabilities: set the KitSettings:enable-media-capabilities
// property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableMediaCapabilities(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_media_capabilities(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableMediaStream: set the KitSettings:enable-media-stream property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableMediaStream(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_media_stream(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableMediasource: set the KitSettings:enable-mediasource property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableMediasource(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_mediasource(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableMockCaptureDevices: set the KitSettings:enable-mock-capture-devices
// property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableMockCaptureDevices(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_mock_capture_devices(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableOfflineWebApplicationCache: set the
// KitSettings:enable-offline-web-application-cache property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableOfflineWebApplicationCache(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_offline_web_application_cache(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnablePageCache: set the KitSettings:enable-page-cache property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnablePageCache(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_page_cache(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnablePlugins: set the KitSettings:enable-plugins property.
//
// Deprecated: since version 2.32.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnablePlugins(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_plugins(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnablePrivateBrowsing: set the KitSettings:enable-private-browsing
// property.
//
// Deprecated: Use KitWebView:is-ephemeral or KitWebContext:is-ephemeral
// instead.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnablePrivateBrowsing(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_private_browsing(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableResizableTextAreas: set the KitSettings:enable-resizable-text-areas
// property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableResizableTextAreas(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_resizable_text_areas(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableSiteSpecificQuirks: set the KitSettings:enable-site-specific-quirks
// property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableSiteSpecificQuirks(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_site_specific_quirks(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableSmoothScrolling: set the KitSettings:enable-smooth-scrolling
// property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableSmoothScrolling(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_smooth_scrolling(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableSpatialNavigation: set the KitSettings:enable-spatial-navigation
// property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableSpatialNavigation(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_spatial_navigation(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableTabsToLinks: set the KitSettings:enable-tabs-to-links property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableTabsToLinks(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_tabs_to_links(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableWebaudio: set the KitSettings:enable-webaudio property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableWebaudio(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_webaudio(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableWebgl: set the KitSettings:enable-webgl property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableWebgl(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_webgl(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableWebrtc: set the settings:enable-webrtc property.
//
// Setting this property to TRUE implies the media-stream web-setting will also
// be enabled.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableWebrtc(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_webrtc(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableWriteConsoleMessagesToStdout: set the
// KitSettings:enable-write-console-messages-to-stdout property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableWriteConsoleMessagesToStdout(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_write_console_messages_to_stdout(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetEnableXssAuditor: XSS auditor has been removed. This function does
// nothing.
//
// Deprecated: This function does nothing.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetEnableXssAuditor(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_enable_xss_auditor(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetFantasyFontFamily: set the KitSettings:fantasy-font-family property.
//
// The function takes the following parameters:
//
//   - fantasyFontFamily: new default fantasy font family.
//
func (settings *Settings) SetFantasyFontFamily(fantasyFontFamily string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(fantasyFontFamily)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_settings_set_fantasy_font_family(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(fantasyFontFamily)
}

// SetFeatureEnabled enables or disables a feature.
//
// The current status of the feature can be determined with
// webkit_settings_get_feature_enabled. To reset a feature to its initial
// status, pass the value returned by webkit_feature_get_default_value as the
// enabled parameter.
//
// The function takes the following parameters:
//
//   - feature to toggle.
//   - enabled: whether the feature will be enabled.
//
func (settings *Settings) SetFeatureEnabled(feature *Feature, enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.WebKitFeature  // out
	var _arg2 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.WebKitFeature)(gextras.StructNative(unsafe.Pointer(feature)))
	if enabled {
		_arg2 = C.TRUE
	}

	C.webkit_settings_set_feature_enabled(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(feature)
	runtime.KeepAlive(enabled)
}

// SetHardwareAccelerationPolicy: set the
// KitSettings:hardware-acceleration-policy property.
//
// The function takes the following parameters:
//
//   - policy: KitHardwareAccelerationPolicy.
//
func (settings *Settings) SetHardwareAccelerationPolicy(policy HardwareAccelerationPolicy) {
	var _arg0 *C.WebKitSettings                  // out
	var _arg1 C.WebKitHardwareAccelerationPolicy // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = C.WebKitHardwareAccelerationPolicy(policy)

	C.webkit_settings_set_hardware_acceleration_policy(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(policy)
}

// SetJavascriptCanAccessClipboard: set the
// KitSettings:javascript-can-access-clipboard property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetJavascriptCanAccessClipboard(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_javascript_can_access_clipboard(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetJavascriptCanOpenWindowsAutomatically: set the
// KitSettings:javascript-can-open-windows-automatically property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetJavascriptCanOpenWindowsAutomatically(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_javascript_can_open_windows_automatically(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetLoadIconsIgnoringImageLoadSetting: setting no longer supported. This
// function does nothing.
//
// Deprecated: since version 2.42.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetLoadIconsIgnoringImageLoadSetting(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_load_icons_ignoring_image_load_setting(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetMediaContentTypesRequiringHardwareSupport: set the
// KitSettings:media-content-types-requiring-hardware-support property.
//
// The function takes the following parameters:
//
//   - contentTypes (optional): list of media content types requiring hardware
//     support split by semicolons (:) or NULL to use the default value.
//
func (settings *Settings) SetMediaContentTypesRequiringHardwareSupport(contentTypes string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if contentTypes != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(contentTypes)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.webkit_settings_set_media_content_types_requiring_hardware_support(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(contentTypes)
}

// SetMediaPlaybackAllowsInline: set the
// KitSettings:media-playback-allows-inline property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetMediaPlaybackAllowsInline(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_media_playback_allows_inline(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetMediaPlaybackRequiresUserGesture: set the
// KitSettings:media-playback-requires-user-gesture property.
//
// The function takes the following parameters:
//
//   - enabled: value to be set.
//
func (settings *Settings) SetMediaPlaybackRequiresUserGesture(enabled bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_media_playback_requires_user_gesture(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(enabled)
}

// SetMinimumFontSize: set the KitSettings:minimum-font-size property.
//
// The function takes the following parameters:
//
//   - fontSize: minimum font size to be set in pixels.
//
func (settings *Settings) SetMinimumFontSize(fontSize uint32) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.guint32         // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = C.guint32(fontSize)

	C.webkit_settings_set_minimum_font_size(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(fontSize)
}

// SetMonospaceFontFamily: set the KitSettings:monospace-font-family property.
//
// The function takes the following parameters:
//
//   - monospaceFontFamily: new default monospace font family.
//
func (settings *Settings) SetMonospaceFontFamily(monospaceFontFamily string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(monospaceFontFamily)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_settings_set_monospace_font_family(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(monospaceFontFamily)
}

// SetPictographFontFamily: set the KitSettings:pictograph-font-family property.
//
// The function takes the following parameters:
//
//   - pictographFontFamily: new default pictograph font family.
//
func (settings *Settings) SetPictographFontFamily(pictographFontFamily string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(pictographFontFamily)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_settings_set_pictograph_font_family(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(pictographFontFamily)
}

// SetPrintBackgrounds: set the KitSettings:print-backgrounds property.
//
// The function takes the following parameters:
//
//   - printBackgrounds: value to be set.
//
func (settings *Settings) SetPrintBackgrounds(printBackgrounds bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if printBackgrounds {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_print_backgrounds(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(printBackgrounds)
}

// SetSansSerifFontFamily: set the KitSettings:sans-serif-font-family property.
//
// The function takes the following parameters:
//
//   - sansSerifFontFamily: new default sans-serif font family.
//
func (settings *Settings) SetSansSerifFontFamily(sansSerifFontFamily string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(sansSerifFontFamily)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_settings_set_sans_serif_font_family(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(sansSerifFontFamily)
}

// SetSerifFontFamily: set the KitSettings:serif-font-family property.
//
// The function takes the following parameters:
//
//   - serifFontFamily: new default serif font family.
//
func (settings *Settings) SetSerifFontFamily(serifFontFamily string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(serifFontFamily)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_settings_set_serif_font_family(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(serifFontFamily)
}

// SetUserAgent: set the KitSettings:user-agent property.
//
// The function takes the following parameters:
//
//   - userAgent (optional): new custom user agent string or NULL to use the
//     default user agent.
//
func (settings *Settings) SetUserAgent(userAgent string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if userAgent != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(userAgent)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.webkit_settings_set_user_agent(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(userAgent)
}

// SetUserAgentWithApplicationDetails: set the KitSettings:user-agent property
// by appending the application details.
//
// Set the KitSettings:user-agent property by appending the application details
// to the default user agent. If no application name or version is given,
// the default user agent used will be used. If only the version is given,
// the default engine version is used with the given application name.
//
// The function takes the following parameters:
//
//   - applicationName (optional): application name used for the user agent or
//     NULL to use the default user agent.
//   - applicationVersion (optional): application version for the user agent or
//     NULL to user the default version.
//
func (settings *Settings) SetUserAgentWithApplicationDetails(applicationName, applicationVersion string) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 *C.gchar          // out
	var _arg2 *C.gchar          // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if applicationName != "" {
		_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(applicationName)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if applicationVersion != "" {
		_arg2 = (*C.gchar)(unsafe.Pointer(C.CString(applicationVersion)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	C.webkit_settings_set_user_agent_with_application_details(_arg0, _arg1, _arg2)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(applicationName)
	runtime.KeepAlive(applicationVersion)
}

// SetZoomTextOnly: set the KitSettings:zoom-text-only property.
//
// The function takes the following parameters:
//
//   - zoomTextOnly: value to be set.
//
func (settings *Settings) SetZoomTextOnly(zoomTextOnly bool) {
	var _arg0 *C.WebKitSettings // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.WebKitSettings)(unsafe.Pointer(coreglib.InternObject(settings).Native()))
	if zoomTextOnly {
		_arg1 = C.TRUE
	}

	C.webkit_settings_set_zoom_text_only(_arg0, _arg1)
	runtime.KeepAlive(settings)
	runtime.KeepAlive(zoomTextOnly)
}

// SettingsClass: instance of this type is always passed by reference.
type SettingsClass struct {
	*settingsClass
}

// settingsClass is the struct that's finalized.
type settingsClass struct {
	native *C.WebKitSettingsClass
}
