// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

// GType values.
var (
	GTypeWebProcessTerminationReason = coreglib.Type(C.webkit_web_process_termination_reason_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeWebProcessTerminationReason, F: marshalWebProcessTerminationReason},
	})
}

// WebProcessTerminationReason: enum values used to specify the reason why the
// web process terminated abnormally.
type WebProcessTerminationReason C.gint

const (
	// WebProcessCrashed: web process crashed.
	WebProcessCrashed WebProcessTerminationReason = iota
	// WebProcessExceededMemoryLimit: web process exceeded the memory limit.
	WebProcessExceededMemoryLimit
	// WebProcessTerminatedByApi: web process termination was requested by an
	// API call. Since: 2.34.
	WebProcessTerminatedByApi
)

func marshalWebProcessTerminationReason(p uintptr) (interface{}, error) {
	return WebProcessTerminationReason(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for WebProcessTerminationReason.
func (w WebProcessTerminationReason) String() string {
	switch w {
	case WebProcessCrashed:
		return "Crashed"
	case WebProcessExceededMemoryLimit:
		return "ExceededMemoryLimit"
	case WebProcessTerminatedByApi:
		return "TerminatedByApi"
	default:
		return fmt.Sprintf("WebProcessTerminationReason(%d)", w)
	}
}
