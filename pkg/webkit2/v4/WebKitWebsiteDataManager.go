// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

// GType values.
var (
	GTypeTLSErrorsPolicy = coreglib.Type(C.webkit_tls_errors_policy_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTLSErrorsPolicy, F: marshalTLSErrorsPolicy},
	})
}

// TLSErrorsPolicy: enum values used to denote the TLS errors policy.
type TLSErrorsPolicy C.gint

const (
	// TLSErrorsPolicyIgnore: ignore TLS errors.
	TLSErrorsPolicyIgnore TLSErrorsPolicy = iota
	// TLSErrorsPolicyFail: TLS errors will emit
	// KitWebView::load-failed-with-tls-errors and, if the signal is
	// handled, finish the load. In case the signal is not handled,
	// KitWebView::load-failed is emitted before the load finishes.
	TLSErrorsPolicyFail
)

func marshalTLSErrorsPolicy(p uintptr) (interface{}, error) {
	return TLSErrorsPolicy(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for TLSErrorsPolicy.
func (t TLSErrorsPolicy) String() string {
	switch t {
	case TLSErrorsPolicyIgnore:
		return "Ignore"
	case TLSErrorsPolicyFail:
		return "Fail"
	default:
		return fmt.Sprintf("TLSErrorsPolicy(%d)", t)
	}
}

// WebsiteDataManagerClass: instance of this type is always passed by reference.
type WebsiteDataManagerClass struct {
	*websiteDataManagerClass
}

// websiteDataManagerClass is the struct that's finalized.
type websiteDataManagerClass struct {
	native *C.WebKitWebsiteDataManagerClass
}
