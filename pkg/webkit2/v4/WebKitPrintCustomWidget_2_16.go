// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
// extern void _gotk4_webkit24_PrintCustomWidget_ConnectUpdate(gpointer, GtkPageSetup*, GtkPrintSettings*, guintptr);
// extern void _gotk4_webkit24_PrintCustomWidget_ConnectApply(gpointer, guintptr);
// extern void _gotk4_webkit24_PrintCustomWidgetClass_update(WebKitPrintCustomWidget*, GtkWidget*, GtkPageSetup*, GtkPrintSettings*);
// extern void _gotk4_webkit24_PrintCustomWidgetClass_apply(WebKitPrintCustomWidget*, GtkWidget*);
// void _gotk4_webkit24_PrintCustomWidget_virtual_apply(void* fnptr, WebKitPrintCustomWidget* arg0, GtkWidget* arg1) {
//   ((void (*)(WebKitPrintCustomWidget*, GtkWidget*))(fnptr))(arg0, arg1);
// };
// void _gotk4_webkit24_PrintCustomWidget_virtual_update(void* fnptr, WebKitPrintCustomWidget* arg0, GtkWidget* arg1, GtkPageSetup* arg2, GtkPrintSettings* arg3) {
//   ((void (*)(WebKitPrintCustomWidget*, GtkWidget*, GtkPageSetup*, GtkPrintSettings*))(fnptr))(arg0, arg1, arg2, arg3);
// };
import "C"

// GType values.
var (
	GTypePrintCustomWidget = coreglib.Type(C.webkit_print_custom_widget_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypePrintCustomWidget, F: marshalPrintCustomWidget},
	})
}

// PrintCustomWidgetOverrides contains methods that are overridable.
type PrintCustomWidgetOverrides struct {
	// The function takes the following parameters:
	//
	Apply func(widget gtk.Widgetter)
	// The function takes the following parameters:
	//
	//   - widget
	//   - pageSetup
	//   - printSettings
	//
	Update func(widget gtk.Widgetter, pageSetup *gtk.PageSetup, printSettings *gtk.PrintSettings)
}

func defaultPrintCustomWidgetOverrides(v *PrintCustomWidget) PrintCustomWidgetOverrides {
	return PrintCustomWidgetOverrides{
		Apply:  v.apply,
		Update: v.update,
	}
}

// PrintCustomWidget allows to embed a custom widget in print dialog.
//
// A WebKitPrintCustomWidget allows to embed a custom widget in the print
// dialog by connecting to the KitPrintOperation::create-custom-widget
// signal, creating a new WebKitPrintCustomWidget with
// webkit_print_custom_widget_new() and returning it from there. You can later
// use webkit_print_operation_run_dialog() to display the dialog.
//
// Unfortunately, use of custom widgets is incompatible with modern
// containerized application frameworks like Flatpak. A print dialog constructed
// in the application process will not have access to host printers,
// so instead it must be constructed by a desktop portal service running on the
// host system. Because this print dialog runs in a separate process, it's not
// possible to attach a custom widget.
//
// Deprecated: since version 2.40.
type PrintCustomWidget struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*PrintCustomWidget)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*PrintCustomWidget, *PrintCustomWidgetClass, PrintCustomWidgetOverrides](
		GTypePrintCustomWidget,
		initPrintCustomWidgetClass,
		wrapPrintCustomWidget,
		defaultPrintCustomWidgetOverrides,
	)
}

func initPrintCustomWidgetClass(gclass unsafe.Pointer, overrides PrintCustomWidgetOverrides, classInitFunc func(*PrintCustomWidgetClass)) {
	pclass := (*C.WebKitPrintCustomWidgetClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypePrintCustomWidget))))

	if overrides.Apply != nil {
		pclass.apply = (*[0]byte)(C._gotk4_webkit24_PrintCustomWidgetClass_apply)
	}

	if overrides.Update != nil {
		pclass.update = (*[0]byte)(C._gotk4_webkit24_PrintCustomWidgetClass_update)
	}

	if classInitFunc != nil {
		class := (*PrintCustomWidgetClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapPrintCustomWidget(obj *coreglib.Object) *PrintCustomWidget {
	return &PrintCustomWidget{
		Object: obj,
	}
}

func marshalPrintCustomWidget(p uintptr) (interface{}, error) {
	return wrapPrintCustomWidget(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectApply is emitted right before the printing will start. You should
// read the information from the widget and update the content based on it if
// necessary. The widget is not guaranteed to be valid at a later time.
func (printCustomWidget *PrintCustomWidget) ConnectApply(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(printCustomWidget, "apply", false, unsafe.Pointer(C._gotk4_webkit24_PrintCustomWidget_ConnectApply), f)
}

// ConnectUpdate is emitted after change of selected printer in the dialog.
// The actual page setup and print settings are available and the custom widget
// can actualize itself according to their values.
func (printCustomWidget *PrintCustomWidget) ConnectUpdate(f func(pageSetup *gtk.PageSetup, printSettings *gtk.PrintSettings)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(printCustomWidget, "update", false, unsafe.Pointer(C._gotk4_webkit24_PrintCustomWidget_ConnectUpdate), f)
}

// NewPrintCustomWidget: create a new KitPrintCustomWidget with given widget and
// title.
//
// The widget ownership is taken and it is destroyed together with the dialog
// even if this object could still be alive at that point. You typically want to
// pass a container widget with multiple widgets in it.
//
// Deprecated: since version 2.40.
//
// The function takes the following parameters:
//
//   - widget: Widget.
//   - title widget's title.
//
// The function returns the following values:
//
//   - printCustomWidget: new KitPrintOperation.
//
func NewPrintCustomWidget(widget gtk.Widgetter, title string) *PrintCustomWidget {
	var _arg1 *C.GtkWidget               // out
	var _arg2 *C.char                    // out
	var _cret *C.WebKitPrintCustomWidget // in

	_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(title)))
	defer C.free(unsafe.Pointer(_arg2))

	_cret = C.webkit_print_custom_widget_new(_arg1, _arg2)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(title)

	var _printCustomWidget *PrintCustomWidget // out

	_printCustomWidget = wrapPrintCustomWidget(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _printCustomWidget
}

// Title: return the value of KitPrintCustomWidget:title property.
//
// Return the value of KitPrintCustomWidget:title property for the given
// print_custom_widget object.
//
// Deprecated: since version 2.40.
//
// The function returns the following values:
//
//   - utf8: title of the print_custom_widget.
//
func (printCustomWidget *PrintCustomWidget) Title() string {
	var _arg0 *C.WebKitPrintCustomWidget // out
	var _cret *C.gchar                   // in

	_arg0 = (*C.WebKitPrintCustomWidget)(unsafe.Pointer(coreglib.InternObject(printCustomWidget).Native()))

	_cret = C.webkit_print_custom_widget_get_title(_arg0)
	runtime.KeepAlive(printCustomWidget)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Widget: return the value of KitPrintCustomWidget:widget property.
//
// Return the value of KitPrintCustomWidget:widget property for the given
// print_custom_widget object. The returned value will always be valid if called
// from KitPrintCustomWidget::apply or KitPrintCustomWidget::update callbacks,
// but it will be NULL if called after the KitPrintCustomWidget::apply signal is
// emitted.
//
// Deprecated: since version 2.40.
//
// The function returns the following values:
//
//   - widget: Widget.
//
func (printCustomWidget *PrintCustomWidget) Widget() gtk.Widgetter {
	var _arg0 *C.WebKitPrintCustomWidget // out
	var _cret *C.GtkWidget               // in

	_arg0 = (*C.WebKitPrintCustomWidget)(unsafe.Pointer(coreglib.InternObject(printCustomWidget).Native()))

	_cret = C.webkit_print_custom_widget_get_widget(_arg0)
	runtime.KeepAlive(printCustomWidget)

	var _widget gtk.Widgetter // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gtk.Widgetter is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gtk.Widgetter)
			return ok
		})
		rv, ok := casted.(gtk.Widgetter)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gtk.Widgetter")
		}
		_widget = rv
	}

	return _widget
}

// The function takes the following parameters:
//
func (printCustomWidget *PrintCustomWidget) apply(widget gtk.Widgetter) {
	gclass := (*C.WebKitPrintCustomWidgetClass)(coreglib.PeekParentClass(printCustomWidget))
	fnarg := gclass.apply

	var _arg0 *C.WebKitPrintCustomWidget // out
	var _arg1 *C.GtkWidget               // out

	_arg0 = (*C.WebKitPrintCustomWidget)(unsafe.Pointer(coreglib.InternObject(printCustomWidget).Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))

	C._gotk4_webkit24_PrintCustomWidget_virtual_apply(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(printCustomWidget)
	runtime.KeepAlive(widget)
}

// The function takes the following parameters:
//
//   - widget
//   - pageSetup
//   - printSettings
//
func (printCustomWidget *PrintCustomWidget) update(widget gtk.Widgetter, pageSetup *gtk.PageSetup, printSettings *gtk.PrintSettings) {
	gclass := (*C.WebKitPrintCustomWidgetClass)(coreglib.PeekParentClass(printCustomWidget))
	fnarg := gclass.update

	var _arg0 *C.WebKitPrintCustomWidget // out
	var _arg1 *C.GtkWidget               // out
	var _arg2 *C.GtkPageSetup            // out
	var _arg3 *C.GtkPrintSettings        // out

	_arg0 = (*C.WebKitPrintCustomWidget)(unsafe.Pointer(coreglib.InternObject(printCustomWidget).Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(coreglib.InternObject(widget).Native()))
	_arg2 = (*C.GtkPageSetup)(unsafe.Pointer(coreglib.InternObject(pageSetup).Native()))
	_arg3 = (*C.GtkPrintSettings)(unsafe.Pointer(coreglib.InternObject(printSettings).Native()))

	C._gotk4_webkit24_PrintCustomWidget_virtual_update(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(printCustomWidget)
	runtime.KeepAlive(widget)
	runtime.KeepAlive(pageSetup)
	runtime.KeepAlive(printSettings)
}
