// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

// GType values.
var (
	GTypeUserContentFilter = coreglib.Type(C.webkit_user_content_filter_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeUserContentFilter, F: marshalUserContentFilter},
	})
}

// UserContentFilter: compiled set of rules which applied to resource loads.
//
// An instance of this type is always passed by reference.
type UserContentFilter struct {
	*userContentFilter
}

// userContentFilter is the struct that's finalized.
type userContentFilter struct {
	native *C.WebKitUserContentFilter
}

func marshalUserContentFilter(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &UserContentFilter{&userContentFilter{(*C.WebKitUserContentFilter)(b)}}, nil
}

// Identifier: obtain the identifier previously used to save the
// user_content_filter.
//
// Obtain the identifier previously used to save the user_content_filter in the
// KitUserContentFilterStore.
//
// The function returns the following values:
//
//   - utf8: identifier for the filter.
//
func (userContentFilter *UserContentFilter) Identifier() string {
	var _arg0 *C.WebKitUserContentFilter // out
	var _cret *C.char                    // in

	_arg0 = (*C.WebKitUserContentFilter)(gextras.StructNative(unsafe.Pointer(userContentFilter)))

	_cret = C.webkit_user_content_filter_get_identifier(_arg0)
	runtime.KeepAlive(userContentFilter)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}
