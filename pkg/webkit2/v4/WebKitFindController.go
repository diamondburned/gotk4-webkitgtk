// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"runtime"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
// extern void _gotk4_webkit24_FindController_ConnectFoundText(gpointer, guint, guintptr);
// extern void _gotk4_webkit24_FindController_ConnectFailedToFindText(gpointer, guintptr);
// extern void _gotk4_webkit24_FindController_ConnectCountedMatches(gpointer, guint, guintptr);
import "C"

// GType values.
var (
	GTypeFindOptions    = coreglib.Type(C.webkit_find_options_get_type())
	GTypeFindController = coreglib.Type(C.webkit_find_controller_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFindOptions, F: marshalFindOptions},
		coreglib.TypeMarshaler{T: GTypeFindController, F: marshalFindController},
	})
}

// FindOptions: enum values used to specify search options.
type FindOptions C.guint

const (
	// FindOptionsNone: no search flags, this means a case sensitive, no wrap,
	// forward only search.
	FindOptionsNone FindOptions = 0b0
	// FindOptionsCaseInsensitive: case insensitive search.
	FindOptionsCaseInsensitive FindOptions = 0b1
	// FindOptionsAtWordStarts: search text only at the begining of the words.
	FindOptionsAtWordStarts FindOptions = 0b10
	// FindOptionsTreatMedialCapitalAsWordStart: treat capital letters in the
	// middle of words as word start.
	FindOptionsTreatMedialCapitalAsWordStart FindOptions = 0b100
	// FindOptionsBackwards: search backwards.
	FindOptionsBackwards FindOptions = 0b1000
	// FindOptionsWrapAround: if not present search will stop at the end of the
	// document.
	FindOptionsWrapAround FindOptions = 0b10000
)

func marshalFindOptions(p uintptr) (interface{}, error) {
	return FindOptions(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for FindOptions.
func (f FindOptions) String() string {
	if f == 0 {
		return "FindOptions(0)"
	}

	var builder strings.Builder
	builder.Grow(150)

	for f != 0 {
		next := f & (f - 1)
		bit := f - next

		switch bit {
		case FindOptionsNone:
			builder.WriteString("None|")
		case FindOptionsCaseInsensitive:
			builder.WriteString("CaseInsensitive|")
		case FindOptionsAtWordStarts:
			builder.WriteString("AtWordStarts|")
		case FindOptionsTreatMedialCapitalAsWordStart:
			builder.WriteString("TreatMedialCapitalAsWordStart|")
		case FindOptionsBackwards:
			builder.WriteString("Backwards|")
		case FindOptionsWrapAround:
			builder.WriteString("WrapAround|")
		default:
			builder.WriteString(fmt.Sprintf("FindOptions(0b%b)|", bit))
		}

		f = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if f contains other.
func (f FindOptions) Has(other FindOptions) bool {
	return (f & other) == other
}

// FindControllerOverrides contains methods that are overridable.
type FindControllerOverrides struct {
}

func defaultFindControllerOverrides(v *FindController) FindControllerOverrides {
	return FindControllerOverrides{}
}

// FindController controls text search in a KitWebView.
//
// A KitFindController is used to search text in a KitWebView.
// You can get a KitWebView<!-- -->'s KitFindController with
// webkit_web_view_get_find_controller(), and later use it to search
// for text using webkit_find_controller_search(), or get the
// number of matches using webkit_find_controller_count_matches().
// The operations are asynchronous and trigger signals when ready, such as
// KitFindController::found-text, KitFindController::failed-to-find-text or
// KitFindController::counted-matches<!-- -->.
type FindController struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*FindController)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*FindController, *FindControllerClass, FindControllerOverrides](
		GTypeFindController,
		initFindControllerClass,
		wrapFindController,
		defaultFindControllerOverrides,
	)
}

func initFindControllerClass(gclass unsafe.Pointer, overrides FindControllerOverrides, classInitFunc func(*FindControllerClass)) {
	if classInitFunc != nil {
		class := (*FindControllerClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFindController(obj *coreglib.Object) *FindController {
	return &FindController{
		Object: obj,
	}
}

func marshalFindController(p uintptr) (interface{}, error) {
	return wrapFindController(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectCountedMatches: this signal is emitted when the KitFindController
// has counted the number of matches for a given text after a call to
// webkit_find_controller_count_matches().
func (findController *FindController) ConnectCountedMatches(f func(matchCount uint)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(findController, "counted-matches", false, unsafe.Pointer(C._gotk4_webkit24_FindController_ConnectCountedMatches), f)
}

// ConnectFailedToFindText: this signal is emitted when a search
// operation does not find any result for the given text. It will
// be issued if the text is not found asynchronously after a call to
// webkit_find_controller_search(), webkit_find_controller_search_next() or
// webkit_find_controller_search_previous().
func (findController *FindController) ConnectFailedToFindText(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(findController, "failed-to-find-text", false, unsafe.Pointer(C._gotk4_webkit24_FindController_ConnectFailedToFindText), f)
}

// ConnectFoundText: this signal is emitted when a given text is found in the
// web page text. It will be issued if the text is found asynchronously after a
// call to webkit_find_controller_search(), webkit_find_controller_search_next()
// or webkit_find_controller_search_previous().
func (findController *FindController) ConnectFoundText(f func(matchCount uint)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(findController, "found-text", false, unsafe.Pointer(C._gotk4_webkit24_FindController_ConnectFoundText), f)
}

// CountMatches counts the number of matches for search_text.
//
// Counts the number of matches for search_text found in the KitWebView with
// the provided find_options. The number of matches will be provided by the
// KitFindController::counted-matches signal.
//
// The function takes the following parameters:
//
//   - searchText: text to look for.
//   - findOptions: bitmask with the KitFindOptions used in the search.
//   - maxMatchCount: maximum number of matches allowed in the search.
//
func (findController *FindController) CountMatches(searchText string, findOptions uint32, maxMatchCount uint) {
	var _arg0 *C.WebKitFindController // out
	var _arg1 *C.gchar                // out
	var _arg2 C.guint32               // out
	var _arg3 C.guint                 // out

	_arg0 = (*C.WebKitFindController)(unsafe.Pointer(coreglib.InternObject(findController).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(searchText)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint32(findOptions)
	_arg3 = C.guint(maxMatchCount)

	C.webkit_find_controller_count_matches(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(findController)
	runtime.KeepAlive(searchText)
	runtime.KeepAlive(findOptions)
	runtime.KeepAlive(maxMatchCount)
}

// MaxMatchCount gets the maximum number of matches to report.
//
// Gets the maximum number of matches to report during a text lookup. This
// number is passed as the last argument of webkit_find_controller_search() or
// webkit_find_controller_count_matches().
//
// The function returns the following values:
//
//   - guint: maximum number of matches to report.
//
func (findController *FindController) MaxMatchCount() uint {
	var _arg0 *C.WebKitFindController // out
	var _cret C.guint                 // in

	_arg0 = (*C.WebKitFindController)(unsafe.Pointer(coreglib.InternObject(findController).Native()))

	_cret = C.webkit_find_controller_get_max_match_count(_arg0)
	runtime.KeepAlive(findController)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Options gets the KitFindOptions for the current search.
//
// Gets a bitmask containing the KitFindOptions associated with the current
// search.
//
// The function returns the following values:
//
//   - guint32: bitmask containing the KitFindOptions associated with the
//     current search.
//
func (findController *FindController) Options() uint32 {
	var _arg0 *C.WebKitFindController // out
	var _cret C.guint32               // in

	_arg0 = (*C.WebKitFindController)(unsafe.Pointer(coreglib.InternObject(findController).Native()))

	_cret = C.webkit_find_controller_get_options(_arg0)
	runtime.KeepAlive(findController)

	var _guint32 uint32 // out

	_guint32 = uint32(_cret)

	return _guint32
}

// SearchText gets the text that find_controller is searching for.
//
// Gets the text that find_controller is currently searching for.
// This text is passed to either webkit_find_controller_search() or
// webkit_find_controller_count_matches().
//
// The function returns the following values:
//
//   - utf8: text to look for in the KitWebView.
//
func (findController *FindController) SearchText() string {
	var _arg0 *C.WebKitFindController // out
	var _cret *C.gchar                // in

	_arg0 = (*C.WebKitFindController)(unsafe.Pointer(coreglib.InternObject(findController).Native()))

	_cret = C.webkit_find_controller_get_search_text(_arg0)
	runtime.KeepAlive(findController)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// WebView gets the KitWebView this find controller is associated to.
//
// Do not dereference the returned instance as it belongs to the
// KitFindController.
//
// The function returns the following values:
//
//   - webView: KitWebView.
//
func (findController *FindController) WebView() *WebView {
	var _arg0 *C.WebKitFindController // out
	var _cret *C.WebKitWebView        // in

	_arg0 = (*C.WebKitFindController)(unsafe.Pointer(coreglib.InternObject(findController).Native()))

	_cret = C.webkit_find_controller_get_web_view(_arg0)
	runtime.KeepAlive(findController)

	var _webView *WebView // out

	_webView = wrapWebView(coreglib.Take(unsafe.Pointer(_cret)))

	return _webView
}

// Search looks for search_text associated with find_controller.
//
// Looks for search_text in the KitWebView associated with find_controller
// since the beginning of the document highlighting up to max_match_count
// matches. The outcome of the search will be asynchronously provided by the
// KitFindController::found-text and KitFindController::failed-to-find-text
// signals.
//
// To look for the next or previous occurrences of the same text with
// the same find options use webkit_find_controller_search_next() and/or
// webkit_find_controller_search_previous(). The KitFindController will use the
// same text and options for the following searches unless they are modified by
// another call to this method.
//
// Note that if the number of matches is higher than max_match_count then
// KitFindController::found-text will report G_MAXUINT matches instead of the
// actual number.
//
// Callers should call webkit_find_controller_search_finish() to finish the
// current search operation.
//
// The function takes the following parameters:
//
//   - searchText: text to look for.
//   - findOptions: bitmask with the KitFindOptions used in the search.
//   - maxMatchCount: maximum number of matches allowed in the search.
//
func (findController *FindController) Search(searchText string, findOptions uint32, maxMatchCount uint) {
	var _arg0 *C.WebKitFindController // out
	var _arg1 *C.gchar                // out
	var _arg2 C.guint32               // out
	var _arg3 C.guint                 // out

	_arg0 = (*C.WebKitFindController)(unsafe.Pointer(coreglib.InternObject(findController).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(searchText)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint32(findOptions)
	_arg3 = C.guint(maxMatchCount)

	C.webkit_find_controller_search(_arg0, _arg1, _arg2, _arg3)
	runtime.KeepAlive(findController)
	runtime.KeepAlive(searchText)
	runtime.KeepAlive(findOptions)
	runtime.KeepAlive(maxMatchCount)
}

// SearchFinish finishes a find operation.
//
// Finishes a find operation started by webkit_find_controller_search().
// It will basically unhighlight every text match found.
//
// This method will be typically called when the search UI is closed/hidden by
// the client application.
func (findController *FindController) SearchFinish() {
	var _arg0 *C.WebKitFindController // out

	_arg0 = (*C.WebKitFindController)(unsafe.Pointer(coreglib.InternObject(findController).Native()))

	C.webkit_find_controller_search_finish(_arg0)
	runtime.KeepAlive(findController)
}

// SearchNext looks for the next occurrence of the search text.
//
// Calling this method before webkit_find_controller_search() or
// webkit_find_controller_count_matches() is a programming error.
func (findController *FindController) SearchNext() {
	var _arg0 *C.WebKitFindController // out

	_arg0 = (*C.WebKitFindController)(unsafe.Pointer(coreglib.InternObject(findController).Native()))

	C.webkit_find_controller_search_next(_arg0)
	runtime.KeepAlive(findController)
}

// SearchPrevious looks for the previous occurrence of the search text.
//
// Calling this method before webkit_find_controller_search() or
// webkit_find_controller_count_matches() is a programming error.
func (findController *FindController) SearchPrevious() {
	var _arg0 *C.WebKitFindController // out

	_arg0 = (*C.WebKitFindController)(unsafe.Pointer(coreglib.InternObject(findController).Native()))

	C.webkit_find_controller_search_previous(_arg0)
	runtime.KeepAlive(findController)
}

// FindControllerClass: instance of this type is always passed by reference.
type FindControllerClass struct {
	*findControllerClass
}

// findControllerClass is the struct that's finalized.
type findControllerClass struct {
	native *C.WebKitFindControllerClass
}
