// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4-webkitgtk/pkg/javascriptcore/v4"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
import "C"

// GType values.
var (
	GTypeScriptMessageReply = coreglib.Type(C.webkit_script_message_reply_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeScriptMessageReply, F: marshalScriptMessageReply},
	})
}

// ScriptMessageReply: reply for a script message received. If no reply has been
// sent by the user, an automatically generated reply with undefined value with
// be sent.
//
// An instance of this type is always passed by reference.
type ScriptMessageReply struct {
	*scriptMessageReply
}

// scriptMessageReply is the struct that's finalized.
type scriptMessageReply struct {
	native *C.WebKitScriptMessageReply
}

func marshalScriptMessageReply(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &ScriptMessageReply{&scriptMessageReply{(*C.WebKitScriptMessageReply)(b)}}, nil
}

// ReturnErrorMessage: reply to a script message with an error message.
//
// The function takes the following parameters:
//
//   - errorMessage: error message to return as specified by the user's script
//     message.
//
func (scriptMessageReply *ScriptMessageReply) ReturnErrorMessage(errorMessage string) {
	var _arg0 *C.WebKitScriptMessageReply // out
	var _arg1 *C.char                     // out

	_arg0 = (*C.WebKitScriptMessageReply)(gextras.StructNative(unsafe.Pointer(scriptMessageReply)))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(errorMessage)))
	defer C.free(unsafe.Pointer(_arg1))

	C.webkit_script_message_reply_return_error_message(_arg0, _arg1)
	runtime.KeepAlive(scriptMessageReply)
	runtime.KeepAlive(errorMessage)
}

// ReturnValue: reply to a script message with a value.
//
// This function can be called twice for passing the reply value in.
//
// The function takes the following parameters:
//
//   - replyValue: reply value of the provided script message.
//
func (scriptMessageReply *ScriptMessageReply) ReturnValue(replyValue *javascriptcore.Value) {
	var _arg0 *C.WebKitScriptMessageReply // out
	var _arg1 *C.JSCValue                 // out

	_arg0 = (*C.WebKitScriptMessageReply)(gextras.StructNative(unsafe.Pointer(scriptMessageReply)))
	_arg1 = (*C.JSCValue)(unsafe.Pointer(coreglib.InternObject(replyValue).Native()))

	C.webkit_script_message_reply_return_value(_arg0, _arg1)
	runtime.KeepAlive(scriptMessageReply)
	runtime.KeepAlive(replyValue)
}
