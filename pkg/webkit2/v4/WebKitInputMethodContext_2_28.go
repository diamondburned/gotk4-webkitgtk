// Code generated by girgen. DO NOT EDIT.

package webkit2

import (
	"fmt"
	"runtime"
	"strings"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit2/webkit2.h>
// extern void _gotk4_webkit24_InputMethodContext_ConnectPreeditStarted(gpointer, guintptr);
// extern void _gotk4_webkit24_InputMethodContext_ConnectPreeditFinished(gpointer, guintptr);
// extern void _gotk4_webkit24_InputMethodContext_ConnectPreeditChanged(gpointer, guintptr);
// extern void _gotk4_webkit24_InputMethodContext_ConnectDeleteSurrounding(gpointer, gint, guint, guintptr);
// extern void _gotk4_webkit24_InputMethodContext_ConnectCommitted(gpointer, gchar*, guintptr);
// extern void _gotk4_webkit24_InputMethodContextClass_set_enable_preedit(WebKitInputMethodContext*, gboolean);
// extern void _gotk4_webkit24_InputMethodContextClass_reset(WebKitInputMethodContext*);
// extern void _gotk4_webkit24_InputMethodContextClass_preedit_started(WebKitInputMethodContext*);
// extern void _gotk4_webkit24_InputMethodContextClass_preedit_finished(WebKitInputMethodContext*);
// extern void _gotk4_webkit24_InputMethodContextClass_preedit_changed(WebKitInputMethodContext*);
// extern void _gotk4_webkit24_InputMethodContextClass_notify_surrounding(WebKitInputMethodContext*, gchar*, guint, guint, guint);
// extern void _gotk4_webkit24_InputMethodContextClass_notify_focus_out(WebKitInputMethodContext*);
// extern void _gotk4_webkit24_InputMethodContextClass_notify_focus_in(WebKitInputMethodContext*);
// extern void _gotk4_webkit24_InputMethodContextClass_notify_cursor_area(WebKitInputMethodContext*, int, int, int, int);
// extern void _gotk4_webkit24_InputMethodContextClass_get_preedit(WebKitInputMethodContext*, gchar**, GList**, guint*);
// extern void _gotk4_webkit24_InputMethodContextClass_delete_surrounding(WebKitInputMethodContext*, int, guint);
// extern void _gotk4_webkit24_InputMethodContextClass_committed(WebKitInputMethodContext*, char*);
// extern gboolean _gotk4_webkit24_InputMethodContextClass_filter_key_event(WebKitInputMethodContext*, GdkEventKey*);
// gboolean _gotk4_webkit24_InputMethodContext_virtual_filter_key_event(void* fnptr, WebKitInputMethodContext* arg0, GdkEventKey* arg1) {
//   return ((gboolean (*)(WebKitInputMethodContext*, GdkEventKey*))(fnptr))(arg0, arg1);
// };
// void _gotk4_webkit24_InputMethodContext_virtual_committed(void* fnptr, WebKitInputMethodContext* arg0, char* arg1) {
//   ((void (*)(WebKitInputMethodContext*, char*))(fnptr))(arg0, arg1);
// };
// void _gotk4_webkit24_InputMethodContext_virtual_delete_surrounding(void* fnptr, WebKitInputMethodContext* arg0, int arg1, guint arg2) {
//   ((void (*)(WebKitInputMethodContext*, int, guint))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_webkit24_InputMethodContext_virtual_get_preedit(void* fnptr, WebKitInputMethodContext* arg0, gchar** arg1, GList** arg2, guint* arg3) {
//   ((void (*)(WebKitInputMethodContext*, gchar**, GList**, guint*))(fnptr))(arg0, arg1, arg2, arg3);
// };
// void _gotk4_webkit24_InputMethodContext_virtual_notify_cursor_area(void* fnptr, WebKitInputMethodContext* arg0, int arg1, int arg2, int arg3, int arg4) {
//   ((void (*)(WebKitInputMethodContext*, int, int, int, int))(fnptr))(arg0, arg1, arg2, arg3, arg4);
// };
// void _gotk4_webkit24_InputMethodContext_virtual_notify_focus_in(void* fnptr, WebKitInputMethodContext* arg0) {
//   ((void (*)(WebKitInputMethodContext*))(fnptr))(arg0);
// };
// void _gotk4_webkit24_InputMethodContext_virtual_notify_focus_out(void* fnptr, WebKitInputMethodContext* arg0) {
//   ((void (*)(WebKitInputMethodContext*))(fnptr))(arg0);
// };
// void _gotk4_webkit24_InputMethodContext_virtual_notify_surrounding(void* fnptr, WebKitInputMethodContext* arg0, gchar* arg1, guint arg2, guint arg3, guint arg4) {
//   ((void (*)(WebKitInputMethodContext*, gchar*, guint, guint, guint))(fnptr))(arg0, arg1, arg2, arg3, arg4);
// };
// void _gotk4_webkit24_InputMethodContext_virtual_preedit_changed(void* fnptr, WebKitInputMethodContext* arg0) {
//   ((void (*)(WebKitInputMethodContext*))(fnptr))(arg0);
// };
// void _gotk4_webkit24_InputMethodContext_virtual_preedit_finished(void* fnptr, WebKitInputMethodContext* arg0) {
//   ((void (*)(WebKitInputMethodContext*))(fnptr))(arg0);
// };
// void _gotk4_webkit24_InputMethodContext_virtual_preedit_started(void* fnptr, WebKitInputMethodContext* arg0) {
//   ((void (*)(WebKitInputMethodContext*))(fnptr))(arg0);
// };
// void _gotk4_webkit24_InputMethodContext_virtual_reset(void* fnptr, WebKitInputMethodContext* arg0) {
//   ((void (*)(WebKitInputMethodContext*))(fnptr))(arg0);
// };
// void _gotk4_webkit24_InputMethodContext_virtual_set_enable_preedit(void* fnptr, WebKitInputMethodContext* arg0, gboolean arg1) {
//   ((void (*)(WebKitInputMethodContext*, gboolean))(fnptr))(arg0, arg1);
// };
import "C"

// GType values.
var (
	GTypeInputPurpose         = coreglib.Type(C.webkit_input_purpose_get_type())
	GTypeInputHints           = coreglib.Type(C.webkit_input_hints_get_type())
	GTypeInputMethodContext   = coreglib.Type(C.webkit_input_method_context_get_type())
	GTypeInputMethodUnderline = coreglib.Type(C.webkit_input_method_underline_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeInputPurpose, F: marshalInputPurpose},
		coreglib.TypeMarshaler{T: GTypeInputHints, F: marshalInputHints},
		coreglib.TypeMarshaler{T: GTypeInputMethodContext, F: marshalInputMethodContext},
		coreglib.TypeMarshaler{T: GTypeInputMethodUnderline, F: marshalInputMethodUnderline},
	})
}

// InputPurpose: enum values used to describe the primary purpose of the active
// editable element.
type InputPurpose C.gint

const (
	// InputPurposeFreeForm: editable element expects any characters.
	InputPurposeFreeForm InputPurpose = iota
	// InputPurposeDigits: editable element expects digits.
	InputPurposeDigits
	// InputPurposeNumber: editable element expects a number.
	InputPurposeNumber
	// InputPurposePhone: editable element expects a telephone.
	InputPurposePhone
	// InputPurposeURL: editable element expects a URL.
	InputPurposeURL
	// InputPurposeEmail: editable element expects an email.
	InputPurposeEmail
	// InputPurposePassword: editable element expects a password.
	InputPurposePassword
)

func marshalInputPurpose(p uintptr) (interface{}, error) {
	return InputPurpose(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for InputPurpose.
func (i InputPurpose) String() string {
	switch i {
	case InputPurposeFreeForm:
		return "FreeForm"
	case InputPurposeDigits:
		return "Digits"
	case InputPurposeNumber:
		return "Number"
	case InputPurposePhone:
		return "Phone"
	case InputPurposeURL:
		return "URL"
	case InputPurposeEmail:
		return "Email"
	case InputPurposePassword:
		return "Password"
	default:
		return fmt.Sprintf("InputPurpose(%d)", i)
	}
}

// InputHints: enum values used to describe hints that might be taken into
// account by input methods.
type InputHints C.guint

const (
	// InputHintNone: no special behavior suggested.
	InputHintNone InputHints = 0b0
	// InputHintSpellcheck: suggest spell checking.
	InputHintSpellcheck InputHints = 0b1
	// InputHintLowercase: suggest to not autocapitlize.
	InputHintLowercase InputHints = 0b10
	// InputHintUppercaseChars: suggest to capitalize all text.
	InputHintUppercaseChars InputHints = 0b100
	// InputHintUppercaseWords: suggest to capitalize the first character of
	// each word.
	InputHintUppercaseWords InputHints = 0b1000
	// InputHintUppercaseSentences: suggest to capitalize the first word of each
	// sentence.
	InputHintUppercaseSentences InputHints = 0b10000
	// InputHintInhibitOSK: suggest to not show an onscreen keyboard.
	InputHintInhibitOSK InputHints = 0b100000
)

func marshalInputHints(p uintptr) (interface{}, error) {
	return InputHints(coreglib.ValueFromNative(unsafe.Pointer(p)).Flags()), nil
}

// String returns the names in string for InputHints.
func (i InputHints) String() string {
	if i == 0 {
		return "InputHints(0)"
	}

	var builder strings.Builder
	builder.Grow(148)

	for i != 0 {
		next := i & (i - 1)
		bit := i - next

		switch bit {
		case InputHintNone:
			builder.WriteString("None|")
		case InputHintSpellcheck:
			builder.WriteString("Spellcheck|")
		case InputHintLowercase:
			builder.WriteString("Lowercase|")
		case InputHintUppercaseChars:
			builder.WriteString("UppercaseChars|")
		case InputHintUppercaseWords:
			builder.WriteString("UppercaseWords|")
		case InputHintUppercaseSentences:
			builder.WriteString("UppercaseSentences|")
		case InputHintInhibitOSK:
			builder.WriteString("InhibitOSK|")
		default:
			builder.WriteString(fmt.Sprintf("InputHints(0b%b)|", bit))
		}

		i = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if i contains other.
func (i InputHints) Has(other InputHints) bool {
	return (i & other) == other
}

// InputMethodContextOverrides contains methods that are overridable.
type InputMethodContextOverrides struct {
	// The function takes the following parameters:
	//
	Committed func(text string)
	// The function takes the following parameters:
	//
	//   - offset
	//   - nChars
	//
	DeleteSurrounding func(offset int, nChars uint)
	// FilterKeyEvent: allow key_event to be handled by the input method.
	//
	// If TRUE is returned, then no further processing should be done for the
	// key event.
	//
	// The function takes the following parameters:
	//
	//   - keyEvent: key event to filter.
	//
	// The function returns the following values:
	//
	//   - ok: TRUE if the key event was handled, or FALSE otherwise.
	//
	FilterKeyEvent func(keyEvent *gdk.EventKey) bool
	// Preedit: get the pre-edit string and a list of
	// WebKitInputMethodUnderline.
	//
	// Get the current pre-edit string for the context, and a list of
	// WebKitInputMethodUnderline to apply to the string. The string will be
	// displayed inserted at cursor_offset.
	//
	// The function returns the following values:
	//
	//   - text (optional): location to store the preedit string.
	//   - underlines (optional): location to store the underlines as a #GList
	//     of KitInputMethodUnderline.
	//   - cursorOffset (optional): location to store the position of cursor in
	//     preedit string.
	//
	Preedit func() (string, []*InputMethodUnderline, uint)
	// NotifyCursorArea: notify context that cursor area changed in input
	// associated.
	//
	// The function takes the following parameters:
	//
	//   - x coordinate of cursor location.
	//   - y coordinate of cursor location.
	//   - width of cursor area.
	//   - height of cursor area.
	//
	NotifyCursorArea func(x, y, width, height int)
	// NotifyFocusIn: notify context that input associated has gained focus.
	NotifyFocusIn func()
	// NotifyFocusOut: notify context that input associated has lost focus.
	NotifyFocusOut func()
	// NotifySurrounding: notify context that the context surrounding the cursor
	// has changed.
	//
	// If there's no selection selection_index is the same as cursor_index.
	//
	// The function takes the following parameters:
	//
	//   - text surrounding the insertion point.
	//   - length of text, or -1 if text is nul-terminated.
	//   - cursorIndex: byte index of the insertion cursor within text.
	//   - selectionIndex: byte index of the selection cursor within text.
	//
	NotifySurrounding func(text string, length, cursorIndex, selectionIndex uint)
	PreeditChanged    func()
	PreeditFinished   func()
	PreeditStarted    func()
	// Reset the context.
	//
	// This will typically cause the input to clear the preedit state.
	Reset func()
	// SetEnablePreedit: set whether context should enable preedit to display
	// feedback.
	//
	// The function takes the following parameters:
	//
	//   - enabled: whether to enable preedit.
	//
	SetEnablePreedit func(enabled bool)
}

func defaultInputMethodContextOverrides(v *InputMethodContext) InputMethodContextOverrides {
	return InputMethodContextOverrides{
		Committed:         v.committed,
		DeleteSurrounding: v.deleteSurrounding,
		FilterKeyEvent:    v.filterKeyEvent,
		Preedit:           v.preedit,
		NotifyCursorArea:  v.notifyCursorArea,
		NotifyFocusIn:     v.notifyFocusIn,
		NotifyFocusOut:    v.notifyFocusOut,
		NotifySurrounding: v.notifySurrounding,
		PreeditChanged:    v.preeditChanged,
		PreeditFinished:   v.preeditFinished,
		PreeditStarted:    v.preeditStarted,
		Reset:             v.reset,
		SetEnablePreedit:  v.setEnablePreedit,
	}
}

// InputMethodContext: base class for input method contexts.
//
// WebKitInputMethodContext defines the interface to implement WebKit input
// methods. The input methods are used by WebKit, when editable content is
// focused, to map from key events to Unicode character strings.
//
// An input method may consume multiple key events in sequence and finally
// output the composed result. This is called preediting, and an input method
// may provide feedback about this process by displaying the intermediate
// composition states as preedit text.
type InputMethodContext struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*InputMethodContext)(nil)
)

// InputMethodContexter describes types inherited from class InputMethodContext.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type InputMethodContexter interface {
	coreglib.Objector
	baseInputMethodContext() *InputMethodContext
}

var _ InputMethodContexter = (*InputMethodContext)(nil)

func init() {
	coreglib.RegisterClassInfo[*InputMethodContext, *InputMethodContextClass, InputMethodContextOverrides](
		GTypeInputMethodContext,
		initInputMethodContextClass,
		wrapInputMethodContext,
		defaultInputMethodContextOverrides,
	)
}

func initInputMethodContextClass(gclass unsafe.Pointer, overrides InputMethodContextOverrides, classInitFunc func(*InputMethodContextClass)) {
	pclass := (*C.WebKitInputMethodContextClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeInputMethodContext))))

	if overrides.Committed != nil {
		pclass.committed = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_committed)
	}

	if overrides.DeleteSurrounding != nil {
		pclass.delete_surrounding = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_delete_surrounding)
	}

	if overrides.FilterKeyEvent != nil {
		pclass.filter_key_event = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_filter_key_event)
	}

	if overrides.Preedit != nil {
		pclass.get_preedit = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_get_preedit)
	}

	if overrides.NotifyCursorArea != nil {
		pclass.notify_cursor_area = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_notify_cursor_area)
	}

	if overrides.NotifyFocusIn != nil {
		pclass.notify_focus_in = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_notify_focus_in)
	}

	if overrides.NotifyFocusOut != nil {
		pclass.notify_focus_out = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_notify_focus_out)
	}

	if overrides.NotifySurrounding != nil {
		pclass.notify_surrounding = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_notify_surrounding)
	}

	if overrides.PreeditChanged != nil {
		pclass.preedit_changed = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_preedit_changed)
	}

	if overrides.PreeditFinished != nil {
		pclass.preedit_finished = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_preedit_finished)
	}

	if overrides.PreeditStarted != nil {
		pclass.preedit_started = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_preedit_started)
	}

	if overrides.Reset != nil {
		pclass.reset = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_reset)
	}

	if overrides.SetEnablePreedit != nil {
		pclass.set_enable_preedit = (*[0]byte)(C._gotk4_webkit24_InputMethodContextClass_set_enable_preedit)
	}

	if classInitFunc != nil {
		class := (*InputMethodContextClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapInputMethodContext(obj *coreglib.Object) *InputMethodContext {
	return &InputMethodContext{
		Object: obj,
	}
}

func marshalInputMethodContext(p uintptr) (interface{}, error) {
	return wrapInputMethodContext(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (context *InputMethodContext) baseInputMethodContext() *InputMethodContext {
	return context
}

// BaseInputMethodContext returns the underlying base object.
func BaseInputMethodContext(obj InputMethodContexter) *InputMethodContext {
	return obj.baseInputMethodContext()
}

// ConnectCommitted is emitted when a complete input sequence has been entered
// by the user. This can be a single character immediately after a key press or
// the final result of preediting.
func (context *InputMethodContext) ConnectCommitted(f func(text string)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "committed", false, unsafe.Pointer(C._gotk4_webkit24_InputMethodContext_ConnectCommitted), f)
}

// ConnectDeleteSurrounding is emitted when the input method wants to delete
// the context surrounding the cursor. If offset is a negative value, it means a
// position before the cursor.
func (context *InputMethodContext) ConnectDeleteSurrounding(f func(offset int, nChars uint)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "delete-surrounding", false, unsafe.Pointer(C._gotk4_webkit24_InputMethodContext_ConnectDeleteSurrounding), f)
}

// ConnectPreeditChanged is emitted whenever the preedit sequence currently
// being entered has changed. It is also emitted at the end of a preedit
// sequence, in which case webkit_input_method_context_get_preedit() returns the
// empty string.
func (context *InputMethodContext) ConnectPreeditChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "preedit-changed", false, unsafe.Pointer(C._gotk4_webkit24_InputMethodContext_ConnectPreeditChanged), f)
}

// ConnectPreeditFinished is emitted when a preediting sequence has been
// completed or canceled.
func (context *InputMethodContext) ConnectPreeditFinished(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "preedit-finished", false, unsafe.Pointer(C._gotk4_webkit24_InputMethodContext_ConnectPreeditFinished), f)
}

// ConnectPreeditStarted is emitted when a new preediting sequence starts.
func (context *InputMethodContext) ConnectPreeditStarted(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(context, "preedit-started", false, unsafe.Pointer(C._gotk4_webkit24_InputMethodContext_ConnectPreeditStarted), f)
}

// FilterKeyEvent: allow key_event to be handled by the input method.
//
// If TRUE is returned, then no further processing should be done for the key
// event.
//
// The function takes the following parameters:
//
//   - keyEvent: key event to filter.
//
// The function returns the following values:
//
//   - ok: TRUE if the key event was handled, or FALSE otherwise.
//
func (context *InputMethodContext) FilterKeyEvent(keyEvent *gdk.EventKey) bool {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 *C.GdkEventKey              // out
	var _cret C.gboolean                  // in

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.GdkEventKey)(gextras.StructNative(unsafe.Pointer(keyEvent)))

	_cret = C.webkit_input_method_context_filter_key_event(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(keyEvent)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// InputHints: get the value of the KitInputMethodContext:input-hints property.
//
// The function returns the following values:
//
//   - inputHints of the input associated with context.
//
func (context *InputMethodContext) InputHints() InputHints {
	var _arg0 *C.WebKitInputMethodContext // out
	var _cret C.WebKitInputHints          // in

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.webkit_input_method_context_get_input_hints(_arg0)
	runtime.KeepAlive(context)

	var _inputHints InputHints // out

	_inputHints = InputHints(_cret)

	return _inputHints
}

// InputPurpose: get the value of the KitInputMethodContext:input-purpose
// property.
//
// The function returns the following values:
//
//   - inputPurpose of the input associated with context.
//
func (context *InputMethodContext) InputPurpose() InputPurpose {
	var _arg0 *C.WebKitInputMethodContext // out
	var _cret C.WebKitInputPurpose        // in

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	_cret = C.webkit_input_method_context_get_input_purpose(_arg0)
	runtime.KeepAlive(context)

	var _inputPurpose InputPurpose // out

	_inputPurpose = InputPurpose(_cret)

	return _inputPurpose
}

// Preedit: get the pre-edit string and a list of WebKitInputMethodUnderline.
//
// Get the current pre-edit string for the context, and a list of
// WebKitInputMethodUnderline to apply to the string. The string will be
// displayed inserted at cursor_offset.
//
// The function returns the following values:
//
//   - text (optional): location to store the preedit string.
//   - underlines (optional): location to store the underlines as a #GList of
//     KitInputMethodUnderline.
//   - cursorOffset (optional): location to store the position of cursor in
//     preedit string.
//
func (context *InputMethodContext) Preedit() (string, []*InputMethodUnderline, uint) {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 *C.char                     // in
	var _arg2 *C.GList                    // in
	var _arg3 C.guint                     // in

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.webkit_input_method_context_get_preedit(_arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(context)

	var _text string                        // out
	var _underlines []*InputMethodUnderline // out
	var _cursorOffset uint                  // out

	if _arg1 != nil {
		_text = C.GoString((*C.gchar)(unsafe.Pointer(_arg1)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if _arg2 != nil {
		_underlines = make([]*InputMethodUnderline, 0, gextras.ListSize(unsafe.Pointer(_arg2)))
		gextras.MoveList(unsafe.Pointer(_arg2), true, func(v unsafe.Pointer) {
			src := (*C.WebKitInputMethodUnderline)(v)
			var dst *InputMethodUnderline // out
			dst = (*InputMethodUnderline)(gextras.NewStructNative(unsafe.Pointer(src)))
			_underlines = append(_underlines, dst)
		})
	}
	_cursorOffset = uint(_arg3)

	return _text, _underlines, _cursorOffset
}

// NotifyCursorArea: notify context that cursor area changed in input
// associated.
//
// The function takes the following parameters:
//
//   - x coordinate of cursor location.
//   - y coordinate of cursor location.
//   - width of cursor area.
//   - height of cursor area.
//
func (context *InputMethodContext) NotifyCursorArea(x, y, width, height int) {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 C.int                       // out
	var _arg2 C.int                       // out
	var _arg3 C.int                       // out
	var _arg4 C.int                       // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.int(x)
	_arg2 = C.int(y)
	_arg3 = C.int(width)
	_arg4 = C.int(height)

	C.webkit_input_method_context_notify_cursor_area(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(context)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// NotifyFocusIn: notify context that input associated has gained focus.
func (context *InputMethodContext) NotifyFocusIn() {
	var _arg0 *C.WebKitInputMethodContext // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.webkit_input_method_context_notify_focus_in(_arg0)
	runtime.KeepAlive(context)
}

// NotifyFocusOut: notify context that input associated has lost focus.
func (context *InputMethodContext) NotifyFocusOut() {
	var _arg0 *C.WebKitInputMethodContext // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.webkit_input_method_context_notify_focus_out(_arg0)
	runtime.KeepAlive(context)
}

// NotifySurrounding: notify context that the context surrounding the cursor has
// changed.
//
// If there's no selection selection_index is the same as cursor_index.
//
// The function takes the following parameters:
//
//   - text surrounding the insertion point.
//   - length of text, or -1 if text is nul-terminated.
//   - cursorIndex: byte index of the insertion cursor within text.
//   - selectionIndex: byte index of the selection cursor within text.
//
func (context *InputMethodContext) NotifySurrounding(text string, length int, cursorIndex, selectionIndex uint) {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 *C.gchar                    // out
	var _arg2 C.int                       // out
	var _arg3 C.guint                     // out
	var _arg4 C.guint                     // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.int(length)
	_arg3 = C.guint(cursorIndex)
	_arg4 = C.guint(selectionIndex)

	C.webkit_input_method_context_notify_surrounding(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(context)
	runtime.KeepAlive(text)
	runtime.KeepAlive(length)
	runtime.KeepAlive(cursorIndex)
	runtime.KeepAlive(selectionIndex)
}

// Reset the context.
//
// This will typically cause the input to clear the preedit state.
func (context *InputMethodContext) Reset() {
	var _arg0 *C.WebKitInputMethodContext // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C.webkit_input_method_context_reset(_arg0)
	runtime.KeepAlive(context)
}

// SetEnablePreedit: set whether context should enable preedit to display
// feedback.
//
// The function takes the following parameters:
//
//   - enabled: whether to enable preedit.
//
func (context *InputMethodContext) SetEnablePreedit(enabled bool) {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 C.gboolean                  // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.webkit_input_method_context_set_enable_preedit(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(enabled)
}

// SetInputHints: set the value of the KitInputMethodContext:input-hints
// property.
//
// The function takes the following parameters:
//
//   - hints: KitInputHints.
//
func (context *InputMethodContext) SetInputHints(hints InputHints) {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 C.WebKitInputHints          // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.WebKitInputHints(hints)

	C.webkit_input_method_context_set_input_hints(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(hints)
}

// SetInputPurpose: set the value of the KitInputMethodContext:input-purpose
// property.
//
// The function takes the following parameters:
//
//   - purpose: KitInputPurpose.
//
func (context *InputMethodContext) SetInputPurpose(purpose InputPurpose) {
	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 C.WebKitInputPurpose        // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.WebKitInputPurpose(purpose)

	C.webkit_input_method_context_set_input_purpose(_arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(purpose)
}

// The function takes the following parameters:
//
func (context *InputMethodContext) committed(text string) {
	gclass := (*C.WebKitInputMethodContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.committed

	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 *C.char                     // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))

	C._gotk4_webkit24_InputMethodContext_virtual_committed(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(text)
}

// The function takes the following parameters:
//
//   - offset
//   - nChars
//
func (context *InputMethodContext) deleteSurrounding(offset int, nChars uint) {
	gclass := (*C.WebKitInputMethodContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.delete_surrounding

	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 C.int                       // out
	var _arg2 C.guint                     // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.int(offset)
	_arg2 = C.guint(nChars)

	C._gotk4_webkit24_InputMethodContext_virtual_delete_surrounding(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(context)
	runtime.KeepAlive(offset)
	runtime.KeepAlive(nChars)
}

// filterKeyEvent: allow key_event to be handled by the input method.
//
// If TRUE is returned, then no further processing should be done for the key
// event.
//
// The function takes the following parameters:
//
//   - keyEvent: key event to filter.
//
// The function returns the following values:
//
//   - ok: TRUE if the key event was handled, or FALSE otherwise.
//
func (context *InputMethodContext) filterKeyEvent(keyEvent *gdk.EventKey) bool {
	gclass := (*C.WebKitInputMethodContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.filter_key_event

	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 *C.GdkEventKey              // out
	var _cret C.gboolean                  // in

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.GdkEventKey)(gextras.StructNative(unsafe.Pointer(keyEvent)))

	_cret = C._gotk4_webkit24_InputMethodContext_virtual_filter_key_event(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(keyEvent)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Preedit: get the pre-edit string and a list of WebKitInputMethodUnderline.
//
// Get the current pre-edit string for the context, and a list of
// WebKitInputMethodUnderline to apply to the string. The string will be
// displayed inserted at cursor_offset.
//
// The function returns the following values:
//
//   - text (optional): location to store the preedit string.
//   - underlines (optional): location to store the underlines as a #GList of
//     KitInputMethodUnderline.
//   - cursorOffset (optional): location to store the position of cursor in
//     preedit string.
//
func (context *InputMethodContext) preedit() (string, []*InputMethodUnderline, uint) {
	gclass := (*C.WebKitInputMethodContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.get_preedit

	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 *C.gchar                    // in
	var _arg2 *C.GList                    // in
	var _arg3 C.guint                     // in

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C._gotk4_webkit24_InputMethodContext_virtual_get_preedit(unsafe.Pointer(fnarg), _arg0, &_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(context)

	var _text string                        // out
	var _underlines []*InputMethodUnderline // out
	var _cursorOffset uint                  // out

	if _arg1 != nil {
		_text = C.GoString((*C.gchar)(unsafe.Pointer(_arg1)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if _arg2 != nil {
		_underlines = make([]*InputMethodUnderline, 0, gextras.ListSize(unsafe.Pointer(_arg2)))
		gextras.MoveList(unsafe.Pointer(_arg2), true, func(v unsafe.Pointer) {
			src := (*C.WebKitInputMethodUnderline)(v)
			var dst *InputMethodUnderline // out
			dst = (*InputMethodUnderline)(gextras.NewStructNative(unsafe.Pointer(src)))
			_underlines = append(_underlines, dst)
		})
	}
	_cursorOffset = uint(_arg3)

	return _text, _underlines, _cursorOffset
}

// notifyCursorArea: notify context that cursor area changed in input
// associated.
//
// The function takes the following parameters:
//
//   - x coordinate of cursor location.
//   - y coordinate of cursor location.
//   - width of cursor area.
//   - height of cursor area.
//
func (context *InputMethodContext) notifyCursorArea(x, y, width, height int) {
	gclass := (*C.WebKitInputMethodContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.notify_cursor_area

	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 C.int                       // out
	var _arg2 C.int                       // out
	var _arg3 C.int                       // out
	var _arg4 C.int                       // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = C.int(x)
	_arg2 = C.int(y)
	_arg3 = C.int(width)
	_arg4 = C.int(height)

	C._gotk4_webkit24_InputMethodContext_virtual_notify_cursor_area(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(context)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

// notifyFocusIn: notify context that input associated has gained focus.
func (context *InputMethodContext) notifyFocusIn() {
	gclass := (*C.WebKitInputMethodContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.notify_focus_in

	var _arg0 *C.WebKitInputMethodContext // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C._gotk4_webkit24_InputMethodContext_virtual_notify_focus_in(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(context)
}

// notifyFocusOut: notify context that input associated has lost focus.
func (context *InputMethodContext) notifyFocusOut() {
	gclass := (*C.WebKitInputMethodContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.notify_focus_out

	var _arg0 *C.WebKitInputMethodContext // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C._gotk4_webkit24_InputMethodContext_virtual_notify_focus_out(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(context)
}

// notifySurrounding: notify context that the context surrounding the cursor has
// changed.
//
// If there's no selection selection_index is the same as cursor_index.
//
// The function takes the following parameters:
//
//   - text surrounding the insertion point.
//   - length of text, or -1 if text is nul-terminated.
//   - cursorIndex: byte index of the insertion cursor within text.
//   - selectionIndex: byte index of the selection cursor within text.
//
func (context *InputMethodContext) notifySurrounding(text string, length, cursorIndex, selectionIndex uint) {
	gclass := (*C.WebKitInputMethodContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.notify_surrounding

	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 *C.gchar                    // out
	var _arg2 C.guint                     // out
	var _arg3 C.guint                     // out
	var _arg4 C.guint                     // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint(length)
	_arg3 = C.guint(cursorIndex)
	_arg4 = C.guint(selectionIndex)

	C._gotk4_webkit24_InputMethodContext_virtual_notify_surrounding(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(context)
	runtime.KeepAlive(text)
	runtime.KeepAlive(length)
	runtime.KeepAlive(cursorIndex)
	runtime.KeepAlive(selectionIndex)
}

func (context *InputMethodContext) preeditChanged() {
	gclass := (*C.WebKitInputMethodContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.preedit_changed

	var _arg0 *C.WebKitInputMethodContext // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C._gotk4_webkit24_InputMethodContext_virtual_preedit_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(context)
}

func (context *InputMethodContext) preeditFinished() {
	gclass := (*C.WebKitInputMethodContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.preedit_finished

	var _arg0 *C.WebKitInputMethodContext // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C._gotk4_webkit24_InputMethodContext_virtual_preedit_finished(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(context)
}

func (context *InputMethodContext) preeditStarted() {
	gclass := (*C.WebKitInputMethodContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.preedit_started

	var _arg0 *C.WebKitInputMethodContext // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C._gotk4_webkit24_InputMethodContext_virtual_preedit_started(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(context)
}

// Reset: reset the context.
//
// This will typically cause the input to clear the preedit state.
func (context *InputMethodContext) reset() {
	gclass := (*C.WebKitInputMethodContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.reset

	var _arg0 *C.WebKitInputMethodContext // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))

	C._gotk4_webkit24_InputMethodContext_virtual_reset(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(context)
}

// setEnablePreedit: set whether context should enable preedit to display
// feedback.
//
// The function takes the following parameters:
//
//   - enabled: whether to enable preedit.
//
func (context *InputMethodContext) setEnablePreedit(enabled bool) {
	gclass := (*C.WebKitInputMethodContextClass)(coreglib.PeekParentClass(context))
	fnarg := gclass.set_enable_preedit

	var _arg0 *C.WebKitInputMethodContext // out
	var _arg1 C.gboolean                  // out

	_arg0 = (*C.WebKitInputMethodContext)(unsafe.Pointer(coreglib.InternObject(context).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C._gotk4_webkit24_InputMethodContext_virtual_set_enable_preedit(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(context)
	runtime.KeepAlive(enabled)
}

// InputMethodContextClass: instance of this type is always passed by reference.
type InputMethodContextClass struct {
	*inputMethodContextClass
}

// inputMethodContextClass is the struct that's finalized.
type inputMethodContextClass struct {
	native *C.WebKitInputMethodContextClass
}

// InputMethodUnderline: range of text in an preedit string to be shown
// underlined.
//
// An instance of this type is always passed by reference.
type InputMethodUnderline struct {
	*inputMethodUnderline
}

// inputMethodUnderline is the struct that's finalized.
type inputMethodUnderline struct {
	native *C.WebKitInputMethodUnderline
}

func marshalInputMethodUnderline(p uintptr) (interface{}, error) {
	b := coreglib.ValueFromNative(unsafe.Pointer(p)).Boxed()
	return &InputMethodUnderline{&inputMethodUnderline{(*C.WebKitInputMethodUnderline)(b)}}, nil
}

// NewInputMethodUnderline constructs a struct InputMethodUnderline.
func NewInputMethodUnderline(startOffset uint, endOffset uint) *InputMethodUnderline {
	var _arg1 C.guint                       // out
	var _arg2 C.guint                       // out
	var _cret *C.WebKitInputMethodUnderline // in

	_arg1 = C.guint(startOffset)
	_arg2 = C.guint(endOffset)

	_cret = C.webkit_input_method_underline_new(_arg1, _arg2)
	runtime.KeepAlive(startOffset)
	runtime.KeepAlive(endOffset)

	var _inputMethodUnderline *InputMethodUnderline // out

	_inputMethodUnderline = (*InputMethodUnderline)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_inputMethodUnderline)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.webkit_input_method_underline_free((*C.WebKitInputMethodUnderline)(intern.C))
		},
	)

	return _inputMethodUnderline
}

// Copy: make a copy of the KitInputMethodUnderline.
//
// The function returns the following values:
//
//   - inputMethodUnderline: copy of passed in KitInputMethodUnderline.
//
func (underline *InputMethodUnderline) Copy() *InputMethodUnderline {
	var _arg0 *C.WebKitInputMethodUnderline // out
	var _cret *C.WebKitInputMethodUnderline // in

	_arg0 = (*C.WebKitInputMethodUnderline)(gextras.StructNative(unsafe.Pointer(underline)))

	_cret = C.webkit_input_method_underline_copy(_arg0)
	runtime.KeepAlive(underline)

	var _inputMethodUnderline *InputMethodUnderline // out

	_inputMethodUnderline = (*InputMethodUnderline)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_inputMethodUnderline)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.webkit_input_method_underline_free((*C.WebKitInputMethodUnderline)(intern.C))
		},
	)

	return _inputMethodUnderline
}

// SetColor: set the color of the underline.
//
// If rgba is NULL the foreground text color will be used for the underline too.
//
// The function takes the following parameters:
//
//   - rgba (optional) or NULL.
//
func (underline *InputMethodUnderline) SetColor(rgba *gdk.RGBA) {
	var _arg0 *C.WebKitInputMethodUnderline // out
	var _arg1 *C.GdkRGBA                    // out

	_arg0 = (*C.WebKitInputMethodUnderline)(gextras.StructNative(unsafe.Pointer(underline)))
	if rgba != nil {
		_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(rgba)))
	}

	C.webkit_input_method_underline_set_color(_arg0, _arg1)
	runtime.KeepAlive(underline)
	runtime.KeepAlive(rgba)
}
