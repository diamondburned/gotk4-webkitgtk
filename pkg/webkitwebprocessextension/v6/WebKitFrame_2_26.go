// Code generated by girgen. DO NOT EDIT.

package webkitwebprocessextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4-webkitgtk/pkg/javascriptcore/v6"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit/webkit-web-process-extension.h>
import "C"

// GType values.
var (
	GTypeFrame = coreglib.Type(C.webkit_frame_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFrame, F: marshalFrame},
	})
}

// FrameOverrides contains methods that are overridable.
type FrameOverrides struct {
}

func defaultFrameOverrides(v *Frame) FrameOverrides {
	return FrameOverrides{}
}

// Frame: web page frame.
//
// Each WebKitWebPage has at least one main frame, and can have any number of
// subframes.
type Frame struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Frame)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Frame, *FrameClass, FrameOverrides](
		GTypeFrame,
		initFrameClass,
		wrapFrame,
		defaultFrameOverrides,
	)
}

func initFrameClass(gclass unsafe.Pointer, overrides FrameOverrides, classInitFunc func(*FrameClass)) {
	if classInitFunc != nil {
		class := (*FrameClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapFrame(obj *coreglib.Object) *Frame {
	return &Frame{
		Object: obj,
	}
}

func marshalFrame(p uintptr) (interface{}, error) {
	return wrapFrame(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ID gets the process-unique identifier of this KitFrame. No other frame in
// the same web process will have the same ID; however, frames in other web
// processes may.
//
// The function returns the following values:
//
//   - guint64: identifier of frame.
//
func (frame *Frame) ID() uint64 {
	var _arg0 *C.WebKitFrame // out
	var _cret C.guint64      // in

	_arg0 = (*C.WebKitFrame)(unsafe.Pointer(coreglib.InternObject(frame).Native()))

	_cret = C.webkit_frame_get_id(_arg0)
	runtime.KeepAlive(frame)

	var _guint64 uint64 // out

	_guint64 = uint64(_cret)

	return _guint64
}

// JsContext: get the JavaScript execution context of frame. Use this function
// to bridge between the WebKit and JavaScriptCore APIs.
//
// The function returns the following values:
//
//   - context for the JavaScript execution context of frame.
//
func (frame *Frame) JsContext() *javascriptcore.Context {
	var _arg0 *C.WebKitFrame // out
	var _cret *C.JSCContext  // in

	_arg0 = (*C.WebKitFrame)(unsafe.Pointer(coreglib.InternObject(frame).Native()))

	_cret = C.webkit_frame_get_js_context(_arg0)
	runtime.KeepAlive(frame)

	var _context *javascriptcore.Context // out

	{
		obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
		_context = &javascriptcore.Context{
			Object: obj,
		}
	}

	return _context
}

// JsContextForScriptWorld: get the JavaScript execution context of frame for
// the given KitScriptWorld.
//
// The function takes the following parameters:
//
//   - world: KitScriptWorld.
//
// The function returns the following values:
//
//   - context for the JavaScript execution context of frame for world.
//
func (frame *Frame) JsContextForScriptWorld(world *ScriptWorld) *javascriptcore.Context {
	var _arg0 *C.WebKitFrame       // out
	var _arg1 *C.WebKitScriptWorld // out
	var _cret *C.JSCContext        // in

	_arg0 = (*C.WebKitFrame)(unsafe.Pointer(coreglib.InternObject(frame).Native()))
	_arg1 = (*C.WebKitScriptWorld)(unsafe.Pointer(coreglib.InternObject(world).Native()))

	_cret = C.webkit_frame_get_js_context_for_script_world(_arg0, _arg1)
	runtime.KeepAlive(frame)
	runtime.KeepAlive(world)

	var _context *javascriptcore.Context // out

	{
		obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
		_context = &javascriptcore.Context{
			Object: obj,
		}
	}

	return _context
}

// URI gets the current active URI of frame.
//
// The function returns the following values:
//
//   - utf8: current active URI of frame or NULL if nothing has been loaded yet.
//
func (frame *Frame) URI() string {
	var _arg0 *C.WebKitFrame // out
	var _cret *C.gchar       // in

	_arg0 = (*C.WebKitFrame)(unsafe.Pointer(coreglib.InternObject(frame).Native()))

	_cret = C.webkit_frame_get_uri(_arg0)
	runtime.KeepAlive(frame)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// IsMainFrame gets whether frame is the main frame of a KitWebPage.
//
// The function returns the following values:
//
//   - ok: TRUE if frame is a main frame or FALSE otherwise.
//
func (frame *Frame) IsMainFrame() bool {
	var _arg0 *C.WebKitFrame // out
	var _cret C.gboolean     // in

	_arg0 = (*C.WebKitFrame)(unsafe.Pointer(coreglib.InternObject(frame).Native()))

	_cret = C.webkit_frame_is_main_frame(_arg0)
	runtime.KeepAlive(frame)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}
