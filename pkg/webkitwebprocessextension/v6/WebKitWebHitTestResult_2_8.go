// Code generated by girgen. DO NOT EDIT.

package webkitwebprocessextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4-webkitgtk/pkg/javascriptcore/v6"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit/webkit-web-process-extension.h>
import "C"

// GType values.
var (
	GTypeWebHitTestResult = coreglib.Type(C.webkit_web_hit_test_result_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeWebHitTestResult, F: marshalWebHitTestResult},
	})
}

// WebHitTestResultOverrides contains methods that are overridable.
type WebHitTestResultOverrides struct {
}

func defaultWebHitTestResultOverrides(v *WebHitTestResult) WebHitTestResultOverrides {
	return WebHitTestResultOverrides{}
}

// WebHitTestResult: result of a Hit Test (Web Process Extensions).
//
// WebKitWebHitTestResult extends KitHitTestResult to provide information about
// the KitDOMNode in the coordinates of the Hit Test.
type WebHitTestResult struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*WebHitTestResult)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*WebHitTestResult, *WebHitTestResultClass, WebHitTestResultOverrides](
		GTypeWebHitTestResult,
		initWebHitTestResultClass,
		wrapWebHitTestResult,
		defaultWebHitTestResultOverrides,
	)
}

func initWebHitTestResultClass(gclass unsafe.Pointer, overrides WebHitTestResultOverrides, classInitFunc func(*WebHitTestResultClass)) {
	if classInitFunc != nil {
		class := (*WebHitTestResultClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapWebHitTestResult(obj *coreglib.Object) *WebHitTestResult {
	return &WebHitTestResult{
		Object: obj,
	}
}

func marshalWebHitTestResult(p uintptr) (interface{}, error) {
	return wrapWebHitTestResult(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ContextIsEditable: check whether there is an editable element at the hit test
// position.
//
// Checks whether WEBKIT_HIT_TEST_RESULT_CONTEXT_EDITABLE flag is present in the
// context flags.
//
// The function returns the following values:
//
//   - ok: TRUE if the hit test covers an editable element or FALSE otherwise.
//
func (webHitTestResult *WebHitTestResult) ContextIsEditable() bool {
	var _arg0 *C.WebKitWebHitTestResult // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitWebHitTestResult)(unsafe.Pointer(coreglib.InternObject(webHitTestResult).Native()))

	_cret = C.webkit_web_hit_test_result_context_is_editable(_arg0)
	runtime.KeepAlive(webHitTestResult)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ContextIsImage: check whether there is an image element at the hit test
// position.
//
// Checks whether WEBKIT_HIT_TEST_RESULT_CONTEXT_IMAGE flag is present in the
// context flags.
//
// The function returns the following values:
//
//   - ok: TRUE if the hit test covers an image element or FALSE otherwise.
//
func (webHitTestResult *WebHitTestResult) ContextIsImage() bool {
	var _arg0 *C.WebKitWebHitTestResult // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitWebHitTestResult)(unsafe.Pointer(coreglib.InternObject(webHitTestResult).Native()))

	_cret = C.webkit_web_hit_test_result_context_is_image(_arg0)
	runtime.KeepAlive(webHitTestResult)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ContextIsLink: check whether there is a link element at the hit test
// position.
//
// Checks whether WEBKIT_HIT_TEST_RESULT_CONTEXT_LINK flag is present in the
// context flags.
//
// The function returns the following values:
//
//   - ok: TRUE if the hit test covers a link element or FALSE otherwise.
//
func (webHitTestResult *WebHitTestResult) ContextIsLink() bool {
	var _arg0 *C.WebKitWebHitTestResult // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitWebHitTestResult)(unsafe.Pointer(coreglib.InternObject(webHitTestResult).Native()))

	_cret = C.webkit_web_hit_test_result_context_is_link(_arg0)
	runtime.KeepAlive(webHitTestResult)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ContextIsMedia: check whether there is a media element at the hit test
// position.
//
// Checks whether WEBKIT_HIT_TEST_RESULT_CONTEXT_MEDIA flag is present in the
// context flags.
//
// The function returns the following values:
//
//   - ok: TRUE if the hit test covers a media element or FALSE otherwise.
//
func (webHitTestResult *WebHitTestResult) ContextIsMedia() bool {
	var _arg0 *C.WebKitWebHitTestResult // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitWebHitTestResult)(unsafe.Pointer(coreglib.InternObject(webHitTestResult).Native()))

	_cret = C.webkit_web_hit_test_result_context_is_media(_arg0)
	runtime.KeepAlive(webHitTestResult)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ContextIsScrollbar: check whether there is a scrollbar at the hit test
// position.
//
// Checks whether WEBKIT_HIT_TEST_RESULT_CONTEXT_SCROLLBAR flag is present in
// the context flags.
//
// The function returns the following values:
//
//   - ok: TRUE if the hit test covers a scrollbar or FALSE otherwise.
//
func (webHitTestResult *WebHitTestResult) ContextIsScrollbar() bool {
	var _arg0 *C.WebKitWebHitTestResult // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitWebHitTestResult)(unsafe.Pointer(coreglib.InternObject(webHitTestResult).Native()))

	_cret = C.webkit_web_hit_test_result_context_is_scrollbar(_arg0)
	runtime.KeepAlive(webHitTestResult)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ContextIsSelection: check whether there is a selected element at the hit test
// position.
//
// Checks whether WEBKIT_HIT_TEST_RESULT_CONTEXT_SELECTION flag is present in
// the context flags.
//
// The function returns the following values:
//
//   - ok: TRUE if the hit test covers a selected element or FALSE otherwise.
//
func (webHitTestResult *WebHitTestResult) ContextIsSelection() bool {
	var _arg0 *C.WebKitWebHitTestResult // out
	var _cret C.gboolean                // in

	_arg0 = (*C.WebKitWebHitTestResult)(unsafe.Pointer(coreglib.InternObject(webHitTestResult).Native()))

	_cret = C.webkit_web_hit_test_result_context_is_selection(_arg0)
	runtime.KeepAlive(webHitTestResult)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Context gets the the context flags for the hit test result.
//
// The function returns the following values:
//
//   - guint: bitmask of KitHitTestResultContext flags.
//
func (webHitTestResult *WebHitTestResult) Context() uint {
	var _arg0 *C.WebKitWebHitTestResult // out
	var _cret C.guint                   // in

	_arg0 = (*C.WebKitWebHitTestResult)(unsafe.Pointer(coreglib.InternObject(webHitTestResult).Native()))

	_cret = C.webkit_web_hit_test_result_get_context(_arg0)
	runtime.KeepAlive(webHitTestResult)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// ImageURI obtains the URI associated with the image element at the hit test
// position.
//
// The function returns the following values:
//
//   - utf8: URI of the image element, or NULL if the hit test does not cover an
//     image element.
//
func (webHitTestResult *WebHitTestResult) ImageURI() string {
	var _arg0 *C.WebKitWebHitTestResult // out
	var _cret *C.gchar                  // in

	_arg0 = (*C.WebKitWebHitTestResult)(unsafe.Pointer(coreglib.InternObject(webHitTestResult).Native()))

	_cret = C.webkit_web_hit_test_result_get_image_uri(_arg0)
	runtime.KeepAlive(webHitTestResult)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// JsNode: get the CValue for the DOM node in world at the coordinates of the
// Hit Test.
//
// The function takes the following parameters:
//
//   - world (optional) or NULL to use the default.
//
// The function returns the following values:
//
//   - value (optional) for the DOM node, or NULL.
//
func (webHitTestResult *WebHitTestResult) JsNode(world *ScriptWorld) *javascriptcore.Value {
	var _arg0 *C.WebKitWebHitTestResult // out
	var _arg1 *C.WebKitScriptWorld      // out
	var _cret *C.JSCValue               // in

	_arg0 = (*C.WebKitWebHitTestResult)(unsafe.Pointer(coreglib.InternObject(webHitTestResult).Native()))
	if world != nil {
		_arg1 = (*C.WebKitScriptWorld)(unsafe.Pointer(coreglib.InternObject(world).Native()))
	}

	_cret = C.webkit_web_hit_test_result_get_js_node(_arg0, _arg1)
	runtime.KeepAlive(webHitTestResult)
	runtime.KeepAlive(world)

	var _value *javascriptcore.Value // out

	if _cret != nil {
		{
			obj := coreglib.AssumeOwnership(unsafe.Pointer(_cret))
			_value = &javascriptcore.Value{
				Object: obj,
			}
		}
	}

	return _value
}

// LinkLabel obtains the label associated with the link element at the hit test
// position.
//
// The function returns the following values:
//
//   - utf8: label of the link element, or NULL if the hit test does not cover a
//     link element or the link element does not have a label.
//
func (webHitTestResult *WebHitTestResult) LinkLabel() string {
	var _arg0 *C.WebKitWebHitTestResult // out
	var _cret *C.gchar                  // in

	_arg0 = (*C.WebKitWebHitTestResult)(unsafe.Pointer(coreglib.InternObject(webHitTestResult).Native()))

	_cret = C.webkit_web_hit_test_result_get_link_label(_arg0)
	runtime.KeepAlive(webHitTestResult)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// LinkTitle obtains the title associated with the link element at the hit test
// position.
//
// The function returns the following values:
//
//   - utf8: title of the link element, or NULL if the hit test does not cover a
//     link element or the link element does not have a title.
//
func (webHitTestResult *WebHitTestResult) LinkTitle() string {
	var _arg0 *C.WebKitWebHitTestResult // out
	var _cret *C.gchar                  // in

	_arg0 = (*C.WebKitWebHitTestResult)(unsafe.Pointer(coreglib.InternObject(webHitTestResult).Native()))

	_cret = C.webkit_web_hit_test_result_get_link_title(_arg0)
	runtime.KeepAlive(webHitTestResult)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// LinkURI obtains the URI associated with the link element at the hit test
// position.
//
// The function returns the following values:
//
//   - utf8: URI of the link element, or NULL if the hit test does not cover a
//     link element.
//
func (webHitTestResult *WebHitTestResult) LinkURI() string {
	var _arg0 *C.WebKitWebHitTestResult // out
	var _cret *C.gchar                  // in

	_arg0 = (*C.WebKitWebHitTestResult)(unsafe.Pointer(coreglib.InternObject(webHitTestResult).Native()))

	_cret = C.webkit_web_hit_test_result_get_link_uri(_arg0)
	runtime.KeepAlive(webHitTestResult)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// MediaURI obtains the URI associated with the media element at the hit test
// position.
//
// The function returns the following values:
//
//   - utf8: URI of the media element, or NULL if the hit test does not cover a
//     media element.
//
func (webHitTestResult *WebHitTestResult) MediaURI() string {
	var _arg0 *C.WebKitWebHitTestResult // out
	var _cret *C.gchar                  // in

	_arg0 = (*C.WebKitWebHitTestResult)(unsafe.Pointer(coreglib.InternObject(webHitTestResult).Native()))

	_cret = C.webkit_web_hit_test_result_get_media_uri(_arg0)
	runtime.KeepAlive(webHitTestResult)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}
