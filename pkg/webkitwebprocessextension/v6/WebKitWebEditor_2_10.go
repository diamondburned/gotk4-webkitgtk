// Code generated by girgen. DO NOT EDIT.

package webkitwebprocessextension

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <webkit/webkit-web-process-extension.h>
// extern void _gotk4_webkitwebprocessextension6_WebEditor_ConnectSelectionChanged(gpointer, guintptr);
import "C"

// GType values.
var (
	GTypeWebEditor = coreglib.Type(C.webkit_web_editor_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeWebEditor, F: marshalWebEditor},
	})
}

// WebEditorOverrides contains methods that are overridable.
type WebEditorOverrides struct {
}

func defaultWebEditorOverrides(v *WebEditor) WebEditorOverrides {
	return WebEditorOverrides{}
}

// WebEditor access to editing capabilities of a KitWebPage.
//
// The WebKitWebEditor provides access to various editing capabilities of
// a KitWebPage such as a possibility to react to the current selection in
// KitWebPage.
type WebEditor struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*WebEditor)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*WebEditor, *WebEditorClass, WebEditorOverrides](
		GTypeWebEditor,
		initWebEditorClass,
		wrapWebEditor,
		defaultWebEditorOverrides,
	)
}

func initWebEditorClass(gclass unsafe.Pointer, overrides WebEditorOverrides, classInitFunc func(*WebEditorClass)) {
	if classInitFunc != nil {
		class := (*WebEditorClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapWebEditor(obj *coreglib.Object) *WebEditor {
	return &WebEditor{
		Object: obj,
	}
}

func marshalWebEditor(p uintptr) (interface{}, error) {
	return wrapWebEditor(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectSelectionChanged: this signal is emitted for every selection change
// inside a KitWebPage as well as for every caret position change as the caret
// is a collapsed selection.
func (editor *WebEditor) ConnectSelectionChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(editor, "selection-changed", false, unsafe.Pointer(C._gotk4_webkitwebprocessextension6_WebEditor_ConnectSelectionChanged), f)
}

// Page gets the KitWebPage that is associated with the KitWebEditor.
//
// The function returns the following values:
//
//   - webPage: associated KitWebPage.
//
func (editor *WebEditor) Page() *WebPage {
	var _arg0 *C.WebKitWebEditor // out
	var _cret *C.WebKitWebPage   // in

	_arg0 = (*C.WebKitWebEditor)(unsafe.Pointer(coreglib.InternObject(editor).Native()))

	_cret = C.webkit_web_editor_get_page(_arg0)
	runtime.KeepAlive(editor)

	var _webPage *WebPage // out

	_webPage = wrapWebPage(coreglib.Take(unsafe.Pointer(_cret)))

	return _webPage
}
