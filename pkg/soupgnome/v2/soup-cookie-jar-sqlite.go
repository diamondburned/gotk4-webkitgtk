// Code generated by girgen. DO NOT EDIT.

package soupgnome

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4-webkitgtk/pkg/soup/v2"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libsoup/soup-gnome.h>
import "C"

// GType values.
var (
	GTypeCookieJarSqlite = coreglib.Type(C.soup_cookie_jar_sqlite_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCookieJarSqlite, F: marshalCookieJarSqlite},
	})
}

const COOKIE_JAR_SQLITE_FILENAME = "filename"

// CookieJarSqliteOverrides contains methods that are overridable.
type CookieJarSqliteOverrides struct {
}

func defaultCookieJarSqliteOverrides(v *CookieJarSqlite) CookieJarSqliteOverrides {
	return CookieJarSqliteOverrides{}
}

type CookieJarSqlite struct {
	_ [0]func() // equal guard
	soup.CookieJarDB
}

var (
	_ coreglib.Objector = (*CookieJarSqlite)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*CookieJarSqlite, *CookieJarSqliteClass, CookieJarSqliteOverrides](
		GTypeCookieJarSqlite,
		initCookieJarSqliteClass,
		wrapCookieJarSqlite,
		defaultCookieJarSqliteOverrides,
	)
}

func initCookieJarSqliteClass(gclass unsafe.Pointer, overrides CookieJarSqliteOverrides, classInitFunc func(*CookieJarSqliteClass)) {
	if classInitFunc != nil {
		class := (*CookieJarSqliteClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapCookieJarSqlite(obj *coreglib.Object) *CookieJarSqlite {
	return &CookieJarSqlite{
		CookieJarDB: soup.CookieJarDB{
			CookieJar: soup.CookieJar{
				Object: obj,
				SessionFeature: soup.SessionFeature{
					Object: obj,
				},
			},
		},
	}
}

func marshalCookieJarSqlite(p uintptr) (interface{}, error) {
	return wrapCookieJarSqlite(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// The function takes the following parameters:
//
//   - filename
//   - readOnly
//
// The function returns the following values:
//
func NewCookieJarSqlite(filename string, readOnly bool) *CookieJarSqlite {
	var _arg1 *C.char          // out
	var _arg2 C.gboolean       // out
	var _cret *C.SoupCookieJar // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(filename)))
	defer C.free(unsafe.Pointer(_arg1))
	if readOnly {
		_arg2 = C.TRUE
	}

	_cret = C.soup_cookie_jar_sqlite_new(_arg1, _arg2)
	runtime.KeepAlive(filename)
	runtime.KeepAlive(readOnly)

	var _cookieJarSqlite *CookieJarSqlite // out

	_cookieJarSqlite = wrapCookieJarSqlite(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _cookieJarSqlite
}

// CookieJarSqliteClass: instance of this type is always passed by reference.
type CookieJarSqliteClass struct {
	*cookieJarSqliteClass
}

// cookieJarSqliteClass is the struct that's finalized.
type cookieJarSqliteClass struct {
	native *C.SoupCookieJarSqliteClass
}

func (c *CookieJarSqliteClass) ParentClass() *soup.CookieJarDBClass {
	valptr := &c.native.parent_class
	var _v *soup.CookieJarDBClass // out
	_v = (*soup.CookieJarDBClass)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}
